
Space_Invaders_Slave_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c624  0800c624  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c62c  0800c62c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c62c  0800c62c  0001c62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c630  0800c630  0001c630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800c634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004740  20000030  0800c664  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004770  0800c664  00024770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b4b  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046e3  00000000  00000000  00045ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd8  00000000  00000000  0004a290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bc0  00000000  00000000  0004c068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030fc4  00000000  00000000  0004dc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018466  00000000  00000000  0007ebec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ea5a  00000000  00000000  00097052  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc4  00000000  00000000  001c5b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000030 	.word	0x20000030
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a8bc 	.word	0x0800a8bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000034 	.word	0x20000034
 800023c:	0800a8bc 	.word	0x0800a8bc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800054a:	49be      	ldr	r1, [pc, #760]	; (8000844 <OTM8009A_Init+0x304>)
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fcf9 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000552:	49bd      	ldr	r1, [pc, #756]	; (8000848 <OTM8009A_Init+0x308>)
 8000554:	2003      	movs	r0, #3
 8000556:	f000 fcf5 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800055a:	49bc      	ldr	r1, [pc, #752]	; (800084c <OTM8009A_Init+0x30c>)
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fcf1 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000562:	49bb      	ldr	r1, [pc, #748]	; (8000850 <OTM8009A_Init+0x310>)
 8000564:	2002      	movs	r0, #2
 8000566:	f000 fced 	bl	8000f44 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800056a:	49b8      	ldr	r1, [pc, #736]	; (800084c <OTM8009A_Init+0x30c>)
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fce9 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000572:	49b8      	ldr	r1, [pc, #736]	; (8000854 <OTM8009A_Init+0x314>)
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fce5 	bl	8000f44 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800057a:	200a      	movs	r0, #10
 800057c:	f000 fa80 	bl	8000a80 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000580:	49b5      	ldr	r1, [pc, #724]	; (8000858 <OTM8009A_Init+0x318>)
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fcde 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000588:	49b4      	ldr	r1, [pc, #720]	; (800085c <OTM8009A_Init+0x31c>)
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fcda 	bl	8000f44 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fa75 	bl	8000a80 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000596:	49b2      	ldr	r1, [pc, #712]	; (8000860 <OTM8009A_Init+0x320>)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fcd3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800059e:	49b1      	ldr	r1, [pc, #708]	; (8000864 <OTM8009A_Init+0x324>)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fccf 	bl	8000f44 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80005a6:	49b0      	ldr	r1, [pc, #704]	; (8000868 <OTM8009A_Init+0x328>)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fccb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80005ae:	49af      	ldr	r1, [pc, #700]	; (800086c <OTM8009A_Init+0x32c>)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fcc7 	bl	8000f44 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80005b6:	49ae      	ldr	r1, [pc, #696]	; (8000870 <OTM8009A_Init+0x330>)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fcc3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80005be:	49ad      	ldr	r1, [pc, #692]	; (8000874 <OTM8009A_Init+0x334>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fcbf 	bl	8000f44 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005c6:	499f      	ldr	r1, [pc, #636]	; (8000844 <OTM8009A_Init+0x304>)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fcbb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80005ce:	49aa      	ldr	r1, [pc, #680]	; (8000878 <OTM8009A_Init+0x338>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fcb7 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80005d6:	49a9      	ldr	r1, [pc, #676]	; (800087c <OTM8009A_Init+0x33c>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fcb3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80005de:	49a8      	ldr	r1, [pc, #672]	; (8000880 <OTM8009A_Init+0x340>)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fcaf 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80005e6:	49a7      	ldr	r1, [pc, #668]	; (8000884 <OTM8009A_Init+0x344>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fcab 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80005ee:	49a6      	ldr	r1, [pc, #664]	; (8000888 <OTM8009A_Init+0x348>)
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fca7 	bl	8000f44 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80005f6:	49a5      	ldr	r1, [pc, #660]	; (800088c <OTM8009A_Init+0x34c>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fca3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80005fe:	49a4      	ldr	r1, [pc, #656]	; (8000890 <OTM8009A_Init+0x350>)
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fc9f 	bl	8000f44 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000606:	49a3      	ldr	r1, [pc, #652]	; (8000894 <OTM8009A_Init+0x354>)
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fc9b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800060e:	4997      	ldr	r1, [pc, #604]	; (800086c <OTM8009A_Init+0x32c>)
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fc97 	bl	8000f44 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000616:	498b      	ldr	r1, [pc, #556]	; (8000844 <OTM8009A_Init+0x304>)
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fc93 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800061e:	499e      	ldr	r1, [pc, #632]	; (8000898 <OTM8009A_Init+0x358>)
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fc8f 	bl	8000f44 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000626:	499d      	ldr	r1, [pc, #628]	; (800089c <OTM8009A_Init+0x35c>)
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fc8b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800062e:	499c      	ldr	r1, [pc, #624]	; (80008a0 <OTM8009A_Init+0x360>)
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fc87 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000636:	499b      	ldr	r1, [pc, #620]	; (80008a4 <OTM8009A_Init+0x364>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fc83 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800063e:	499a      	ldr	r1, [pc, #616]	; (80008a8 <OTM8009A_Init+0x368>)
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fc7f 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000646:	4999      	ldr	r1, [pc, #612]	; (80008ac <OTM8009A_Init+0x36c>)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fc7b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800064e:	4998      	ldr	r1, [pc, #608]	; (80008b0 <OTM8009A_Init+0x370>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fc77 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000656:	4989      	ldr	r1, [pc, #548]	; (800087c <OTM8009A_Init+0x33c>)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fc73 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800065e:	4995      	ldr	r1, [pc, #596]	; (80008b4 <OTM8009A_Init+0x374>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fc6f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000666:	4987      	ldr	r1, [pc, #540]	; (8000884 <OTM8009A_Init+0x344>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fc6b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800066e:	4992      	ldr	r1, [pc, #584]	; (80008b8 <OTM8009A_Init+0x378>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fc67 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000676:	4991      	ldr	r1, [pc, #580]	; (80008bc <OTM8009A_Init+0x37c>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fc63 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800067e:	4990      	ldr	r1, [pc, #576]	; (80008c0 <OTM8009A_Init+0x380>)
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fc5f 	bl	8000f44 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000686:	4971      	ldr	r1, [pc, #452]	; (800084c <OTM8009A_Init+0x30c>)
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fc5b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800068e:	498d      	ldr	r1, [pc, #564]	; (80008c4 <OTM8009A_Init+0x384>)
 8000690:	2006      	movs	r0, #6
 8000692:	f000 fc57 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000696:	498c      	ldr	r1, [pc, #560]	; (80008c8 <OTM8009A_Init+0x388>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fc53 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800069e:	498b      	ldr	r1, [pc, #556]	; (80008cc <OTM8009A_Init+0x38c>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f000 fc4f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80006a6:	498a      	ldr	r1, [pc, #552]	; (80008d0 <OTM8009A_Init+0x390>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fc4b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80006ae:	4989      	ldr	r1, [pc, #548]	; (80008d4 <OTM8009A_Init+0x394>)
 80006b0:	200e      	movs	r0, #14
 80006b2:	f000 fc47 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80006b6:	4988      	ldr	r1, [pc, #544]	; (80008d8 <OTM8009A_Init+0x398>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fc43 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80006be:	4987      	ldr	r1, [pc, #540]	; (80008dc <OTM8009A_Init+0x39c>)
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fc3f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80006c6:	4986      	ldr	r1, [pc, #536]	; (80008e0 <OTM8009A_Init+0x3a0>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fc3b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80006ce:	4985      	ldr	r1, [pc, #532]	; (80008e4 <OTM8009A_Init+0x3a4>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fc37 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80006d6:	495d      	ldr	r1, [pc, #372]	; (800084c <OTM8009A_Init+0x30c>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fc33 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80006de:	4982      	ldr	r1, [pc, #520]	; (80008e8 <OTM8009A_Init+0x3a8>)
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 fc2f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80006e6:	4981      	ldr	r1, [pc, #516]	; (80008ec <OTM8009A_Init+0x3ac>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fc2b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80006ee:	4980      	ldr	r1, [pc, #512]	; (80008f0 <OTM8009A_Init+0x3b0>)
 80006f0:	200f      	movs	r0, #15
 80006f2:	f000 fc27 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80006f6:	4974      	ldr	r1, [pc, #464]	; (80008c8 <OTM8009A_Init+0x388>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fc23 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80006fe:	497d      	ldr	r1, [pc, #500]	; (80008f4 <OTM8009A_Init+0x3b4>)
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fc1f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000706:	4972      	ldr	r1, [pc, #456]	; (80008d0 <OTM8009A_Init+0x390>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fc1b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800070e:	497a      	ldr	r1, [pc, #488]	; (80008f8 <OTM8009A_Init+0x3b8>)
 8000710:	200a      	movs	r0, #10
 8000712:	f000 fc17 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000716:	4970      	ldr	r1, [pc, #448]	; (80008d8 <OTM8009A_Init+0x398>)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fc13 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800071e:	4977      	ldr	r1, [pc, #476]	; (80008fc <OTM8009A_Init+0x3bc>)
 8000720:	200f      	movs	r0, #15
 8000722:	f000 fc0f 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000726:	496e      	ldr	r1, [pc, #440]	; (80008e0 <OTM8009A_Init+0x3a0>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fc0b 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800072e:	4974      	ldr	r1, [pc, #464]	; (8000900 <OTM8009A_Init+0x3c0>)
 8000730:	200f      	movs	r0, #15
 8000732:	f000 fc07 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000736:	4973      	ldr	r1, [pc, #460]	; (8000904 <OTM8009A_Init+0x3c4>)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fc03 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800073e:	4972      	ldr	r1, [pc, #456]	; (8000908 <OTM8009A_Init+0x3c8>)
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fbff 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000746:	4971      	ldr	r1, [pc, #452]	; (800090c <OTM8009A_Init+0x3cc>)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fbfb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800074e:	4970      	ldr	r1, [pc, #448]	; (8000910 <OTM8009A_Init+0x3d0>)
 8000750:	200a      	movs	r0, #10
 8000752:	f000 fbf7 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000756:	493d      	ldr	r1, [pc, #244]	; (800084c <OTM8009A_Init+0x30c>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fbf3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800075e:	496d      	ldr	r1, [pc, #436]	; (8000914 <OTM8009A_Init+0x3d4>)
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fbef 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000766:	4961      	ldr	r1, [pc, #388]	; (80008ec <OTM8009A_Init+0x3ac>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fbeb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800076e:	496a      	ldr	r1, [pc, #424]	; (8000918 <OTM8009A_Init+0x3d8>)
 8000770:	200f      	movs	r0, #15
 8000772:	f000 fbe7 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000776:	4954      	ldr	r1, [pc, #336]	; (80008c8 <OTM8009A_Init+0x388>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fbe3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800077e:	4967      	ldr	r1, [pc, #412]	; (800091c <OTM8009A_Init+0x3dc>)
 8000780:	200f      	movs	r0, #15
 8000782:	f000 fbdf 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000786:	4952      	ldr	r1, [pc, #328]	; (80008d0 <OTM8009A_Init+0x390>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fbdb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800078e:	4964      	ldr	r1, [pc, #400]	; (8000920 <OTM8009A_Init+0x3e0>)
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fbd7 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000796:	4950      	ldr	r1, [pc, #320]	; (80008d8 <OTM8009A_Init+0x398>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fbd3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800079e:	4961      	ldr	r1, [pc, #388]	; (8000924 <OTM8009A_Init+0x3e4>)
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fbcf 	bl	8000f44 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80007a6:	494e      	ldr	r1, [pc, #312]	; (80008e0 <OTM8009A_Init+0x3a0>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fbcb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80007ae:	495e      	ldr	r1, [pc, #376]	; (8000928 <OTM8009A_Init+0x3e8>)
 80007b0:	200f      	movs	r0, #15
 80007b2:	f000 fbc7 	bl	8000f44 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80007b6:	4931      	ldr	r1, [pc, #196]	; (800087c <OTM8009A_Init+0x33c>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fbc3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80007be:	495b      	ldr	r1, [pc, #364]	; (800092c <OTM8009A_Init+0x3ec>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fbbf 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80007c6:	495a      	ldr	r1, [pc, #360]	; (8000930 <OTM8009A_Init+0x3f0>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fbbb 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80007ce:	4959      	ldr	r1, [pc, #356]	; (8000934 <OTM8009A_Init+0x3f4>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fbb7 	bl	8000f44 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80007d6:	4958      	ldr	r1, [pc, #352]	; (8000938 <OTM8009A_Init+0x3f8>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fbb3 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80007de:	4957      	ldr	r1, [pc, #348]	; (800093c <OTM8009A_Init+0x3fc>)
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fbaf 	bl	8000f44 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007e6:	4917      	ldr	r1, [pc, #92]	; (8000844 <OTM8009A_Init+0x304>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fbab 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80007ee:	4954      	ldr	r1, [pc, #336]	; (8000940 <OTM8009A_Init+0x400>)
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 fba7 	bl	8000f44 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007f6:	4913      	ldr	r1, [pc, #76]	; (8000844 <OTM8009A_Init+0x304>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fba3 	bl	8000f44 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007fe:	4911      	ldr	r1, [pc, #68]	; (8000844 <OTM8009A_Init+0x304>)
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fb9f 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000806:	494f      	ldr	r1, [pc, #316]	; (8000944 <OTM8009A_Init+0x404>)
 8000808:	2010      	movs	r0, #16
 800080a:	f000 fb9b 	bl	8000f44 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <OTM8009A_Init+0x304>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fb97 	bl	8000f44 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000816:	494c      	ldr	r1, [pc, #304]	; (8000948 <OTM8009A_Init+0x408>)
 8000818:	2010      	movs	r0, #16
 800081a:	f000 fb93 	bl	8000f44 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800081e:	494b      	ldr	r1, [pc, #300]	; (800094c <OTM8009A_Init+0x40c>)
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fb8f 	bl	8000f44 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000826:	2078      	movs	r0, #120	; 0x78
 8000828:	f000 f92a 	bl	8000a80 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 8090 	beq.w	8000954 <OTM8009A_Init+0x414>
 8000834:	2b02      	cmp	r3, #2
 8000836:	d000      	beq.n	800083a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000838:	e091      	b.n	800095e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800083a:	4945      	ldr	r1, [pc, #276]	; (8000950 <OTM8009A_Init+0x410>)
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fb81 	bl	8000f44 <DSI_IO_WriteCmd>
    break;
 8000842:	e08c      	b.n	800095e <OTM8009A_Init+0x41e>
 8000844:	0800aa80 	.word	0x0800aa80
 8000848:	0800a938 	.word	0x0800a938
 800084c:	0800aa84 	.word	0x0800aa84
 8000850:	0800a93c 	.word	0x0800a93c
 8000854:	0800aa88 	.word	0x0800aa88
 8000858:	0800aa8c 	.word	0x0800aa8c
 800085c:	0800aa90 	.word	0x0800aa90
 8000860:	0800aa94 	.word	0x0800aa94
 8000864:	0800aa98 	.word	0x0800aa98
 8000868:	0800aa9c 	.word	0x0800aa9c
 800086c:	0800aaa0 	.word	0x0800aaa0
 8000870:	0800aaa4 	.word	0x0800aaa4
 8000874:	0800aaa8 	.word	0x0800aaa8
 8000878:	0800aaac 	.word	0x0800aaac
 800087c:	0800aab0 	.word	0x0800aab0
 8000880:	0800aab4 	.word	0x0800aab4
 8000884:	0800aab8 	.word	0x0800aab8
 8000888:	0800aabc 	.word	0x0800aabc
 800088c:	0800aac0 	.word	0x0800aac0
 8000890:	0800aac4 	.word	0x0800aac4
 8000894:	0800aac8 	.word	0x0800aac8
 8000898:	0800a968 	.word	0x0800a968
 800089c:	0800aacc 	.word	0x0800aacc
 80008a0:	0800aad0 	.word	0x0800aad0
 80008a4:	0800aad4 	.word	0x0800aad4
 80008a8:	0800aad8 	.word	0x0800aad8
 80008ac:	0800aadc 	.word	0x0800aadc
 80008b0:	0800aae0 	.word	0x0800aae0
 80008b4:	0800aae4 	.word	0x0800aae4
 80008b8:	0800aae8 	.word	0x0800aae8
 80008bc:	0800aaec 	.word	0x0800aaec
 80008c0:	0800a96c 	.word	0x0800a96c
 80008c4:	0800a970 	.word	0x0800a970
 80008c8:	0800aaf0 	.word	0x0800aaf0
 80008cc:	0800a978 	.word	0x0800a978
 80008d0:	0800aaf4 	.word	0x0800aaf4
 80008d4:	0800a988 	.word	0x0800a988
 80008d8:	0800aaf8 	.word	0x0800aaf8
 80008dc:	0800a998 	.word	0x0800a998
 80008e0:	0800aafc 	.word	0x0800aafc
 80008e4:	0800ab34 	.word	0x0800ab34
 80008e8:	0800a9a4 	.word	0x0800a9a4
 80008ec:	0800ab00 	.word	0x0800ab00
 80008f0:	0800a9b0 	.word	0x0800a9b0
 80008f4:	0800a9c0 	.word	0x0800a9c0
 80008f8:	0800a9d0 	.word	0x0800a9d0
 80008fc:	0800a9dc 	.word	0x0800a9dc
 8000900:	0800a9ec 	.word	0x0800a9ec
 8000904:	0800ab04 	.word	0x0800ab04
 8000908:	0800a9fc 	.word	0x0800a9fc
 800090c:	0800ab08 	.word	0x0800ab08
 8000910:	0800aa08 	.word	0x0800aa08
 8000914:	0800aa14 	.word	0x0800aa14
 8000918:	0800aa20 	.word	0x0800aa20
 800091c:	0800aa30 	.word	0x0800aa30
 8000920:	0800aa40 	.word	0x0800aa40
 8000924:	0800aa4c 	.word	0x0800aa4c
 8000928:	0800aa5c 	.word	0x0800aa5c
 800092c:	0800ab38 	.word	0x0800ab38
 8000930:	0800ab3c 	.word	0x0800ab3c
 8000934:	0800ab40 	.word	0x0800ab40
 8000938:	0800ab44 	.word	0x0800ab44
 800093c:	0800ab48 	.word	0x0800ab48
 8000940:	0800aa6c 	.word	0x0800aa6c
 8000944:	0800a940 	.word	0x0800a940
 8000948:	0800a954 	.word	0x0800a954
 800094c:	0800ab0c 	.word	0x0800ab0c
 8000950:	0800ab10 	.word	0x0800ab10
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000954:	491a      	ldr	r1, [pc, #104]	; (80009c0 <OTM8009A_Init+0x480>)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 faf4 	bl	8000f44 <DSI_IO_WriteCmd>
    break;
 800095c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10b      	bne.n	800097c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000964:	4917      	ldr	r1, [pc, #92]	; (80009c4 <OTM8009A_Init+0x484>)
 8000966:	2000      	movs	r0, #0
 8000968:	f000 faec 	bl	8000f44 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800096c:	4916      	ldr	r1, [pc, #88]	; (80009c8 <OTM8009A_Init+0x488>)
 800096e:	2004      	movs	r0, #4
 8000970:	f000 fae8 	bl	8000f44 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000974:	4915      	ldr	r1, [pc, #84]	; (80009cc <OTM8009A_Init+0x48c>)
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fae4 	bl	8000f44 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800097c:	4914      	ldr	r1, [pc, #80]	; (80009d0 <OTM8009A_Init+0x490>)
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fae0 	bl	8000f44 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <OTM8009A_Init+0x494>)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fadc 	bl	8000f44 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800098c:	4912      	ldr	r1, [pc, #72]	; (80009d8 <OTM8009A_Init+0x498>)
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fad8 	bl	8000f44 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000994:	4911      	ldr	r1, [pc, #68]	; (80009dc <OTM8009A_Init+0x49c>)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fad4 	bl	8000f44 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800099c:	4910      	ldr	r1, [pc, #64]	; (80009e0 <OTM8009A_Init+0x4a0>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 fad0 	bl	8000f44 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <OTM8009A_Init+0x4a4>)
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 facc 	bl	8000f44 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80009ac:	490e      	ldr	r1, [pc, #56]	; (80009e8 <OTM8009A_Init+0x4a8>)
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fac8 	bl	8000f44 <DSI_IO_WriteCmd>

  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	0800ab14 	.word	0x0800ab14
 80009c4:	0800ab18 	.word	0x0800ab18
 80009c8:	0800aa70 	.word	0x0800aa70
 80009cc:	0800aa78 	.word	0x0800aa78
 80009d0:	0800ab1c 	.word	0x0800ab1c
 80009d4:	0800ab20 	.word	0x0800ab20
 80009d8:	0800ab24 	.word	0x0800ab24
 80009dc:	0800ab28 	.word	0x0800ab28
 80009e0:	0800ab2c 	.word	0x0800ab2c
 80009e4:	0800aa80 	.word	0x0800aa80
 80009e8:	0800ab30 	.word	0x0800ab30

080009ec <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <BSP_LED_Init+0x54>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <BSP_LED_Init+0x54>)
 80009fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <BSP_LED_Init+0x54>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <BSP_LED_Init+0x58>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <BSP_LED_Init+0x5c>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fae0 	bl	8003ff8 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008

08000a4c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <BSP_LED_On+0x2c>)
 8000a5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <BSP_LED_On+0x30>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f003 fd90 	bl	8004590 <HAL_GPIO_WritePin>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000000 	.word	0x20000000

08000a80 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fd15 	bl	80014b8 <HAL_Delay>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f804 	bl	8000aa8 <BSP_LCD_InitEx>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000ab2:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000ac0:	f000 f936 	bl	8000d30 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000ac4:	f000 fa68 	bl	8000f98 <LCD_IO_GetID>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ace:	2b11      	cmp	r3, #17
 8000ad0:	d001      	beq.n	8000ad6 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e113      	b.n	8000cfe <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000ad6:	f000 fa67 	bl	8000fa8 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8000ada:	4b8b      	ldr	r3, [pc, #556]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000adc:	4a8b      	ldr	r2, [pc, #556]	; (8000d0c <BSP_LCD_InitEx+0x264>)
 8000ade:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000ae0:	4889      	ldr	r0, [pc, #548]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000ae2:	f002 fb7b 	bl	80031dc <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000aea:	2305      	movs	r3, #5
 8000aec:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000af2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000af8:	4b83      	ldr	r3, [pc, #524]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	4a83      	ldr	r2, [pc, #524]	; (8000d10 <BSP_LCD_InitEx+0x268>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	0a9b      	lsrs	r3, r3, #10
 8000b0a:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000b0c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	487c      	ldr	r0, [pc, #496]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000b16:	f002 fa47 	bl	8002fa8 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d108      	bne.n	8000b32 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000b20:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b26:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b28:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b2a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b38:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000b3a:	4b77      	ldr	r3, [pc, #476]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b40:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000b42:	4b74      	ldr	r3, [pc, #464]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8000b48:	4b73      	ldr	r3, [pc, #460]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000b52:	230f      	movs	r3, #15
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8000b56:	2310      	movs	r3, #16
 8000b58:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000b5e:	2322      	movs	r3, #34	; 0x22
 8000b60:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000b62:	2322      	movs	r3, #34	; 0x22
 8000b64:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000b66:	4b6d      	ldr	r3, [pc, #436]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b6c:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b6e:	2205      	movs	r2, #5
 8000b70:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b78:	4b68      	ldr	r3, [pc, #416]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000b7e:	4b67      	ldr	r3, [pc, #412]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000b84:	4b65      	ldr	r3, [pc, #404]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b8c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b90:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000b92:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000b98:	4a60      	ldr	r2, [pc, #384]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba2:	fb02 f203 	mul.w	r2, r2, r3
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4a5b      	ldr	r2, [pc, #364]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bae:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bb4:	fb02 f203 	mul.w	r2, r2, r3
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	441a      	add	r2, r3
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	441a      	add	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	4413      	add	r3, r2
 8000bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd2:	fb02 f203 	mul.w	r2, r2, r3
 8000bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000be0:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000be6:	4a4d      	ldr	r2, [pc, #308]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000bec:	4a4b      	ldr	r2, [pc, #300]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c06:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c22:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000c3c:	4937      	ldr	r1, [pc, #220]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c3e:	4832      	ldr	r0, [pc, #200]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000c40:	f002 fc24 	bl	800348c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c4a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c56:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	441a      	add	r2, r3
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4413      	add	r3, r2
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c68:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	441a      	add	r2, r3
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	441a      	add	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c86:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c8e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000c98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c9c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000cac:	f004 fc44 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <BSP_LCD_InitEx+0x280>)
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cd8:	f003 ff1c 	bl	8004b14 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cde:	f003 fc71 	bl	80045c4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000ce4:	f003 f864 	bl	8003db0 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000ce8:	f000 fa00 	bl	80010ec <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <BSP_LCD_InitEx+0x284>)
 8000cee:	f000 f8e7 	bl	8000ec0 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fc22 	bl	8000540 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3740      	adds	r7, #64	; 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20004044 	.word	0x20004044
 8000d0c:	40016c00 	.word	0x40016c00
 8000d10:	43215e57 	.word	0x43215e57
 8000d14:	20000018 	.word	0x20000018
 8000d18:	2000001c 	.word	0x2000001c
 8000d1c:	2000004c 	.word	0x2000004c
 8000d20:	20003f9c 	.word	0x20003f9c
 8000d24:	200000d4 	.word	0x200000d4
 8000d28:	40016800 	.word	0x40016800
 8000d2c:	20000010 	.word	0x20000010

08000d30 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d52:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d66:	f003 f947 	bl	8003ff8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d72:	f003 fc0d 	bl	8004590 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000d76:	2014      	movs	r0, #20
 8000d78:	f000 fb9e 	bl	80014b8 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d84:	f003 fc04 	bl	8004590 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f000 fb95 	bl	80014b8 <HAL_Delay>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40022400 	.word	0x40022400

08000da0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <BSP_LCD_GetXSize+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000018 	.word	0x20000018

08000db8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <BSP_LCD_GetYSize+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000001c 	.word	0x2000001c

08000dd0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000de0:	f7ff ffde 	bl	8000da0 <BSP_LCD_GetXSize>
 8000de4:	4603      	mov	r3, r0
 8000de6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000dec:	f7ff ffe4 	bl	8000db8 <BSP_LCD_GetYSize>
 8000df0:	4603      	mov	r3, r0
 8000df2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000dfc:	23ff      	movs	r3, #255	; 0xff
 8000dfe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000e20:	f7ff ffbe 	bl	8000da0 <BSP_LCD_GetXSize>
 8000e24:	4603      	mov	r3, r0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000e28:	f7ff ffc6 	bl	8000db8 <BSP_LCD_GetYSize>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000e30:	88fa      	ldrh	r2, [r7, #6]
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000e3a:	f003 fc93 	bl	8004764 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	490c      	ldr	r1, [pc, #48]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3308      	adds	r3, #8
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000e66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	4907      	ldr	r1, [pc, #28]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3740      	adds	r7, #64	; 0x40
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20003f9c 	.word	0x20003f9c
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	20000010 	.word	0x20000010

08000e90 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <BSP_LCD_SetTextColor+0x28>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <BSP_LCD_SetTextColor+0x2c>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200000b8 	.word	0x200000b8
 8000ebc:	200000bc 	.word	0x200000bc

08000ec0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <BSP_LCD_SetFont+0x2c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <BSP_LCD_SetFont+0x30>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000b8 	.word	0x200000b8
 8000ef0:	200000bc 	.word	0x200000bc

08000ef4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <BSP_LCD_Clear+0x48>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <BSP_LCD_Clear+0x48>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <BSP_LCD_Clear+0x4c>)
 8000f06:	2134      	movs	r1, #52	; 0x34
 8000f08:	fb01 f303 	mul.w	r3, r1, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	335c      	adds	r3, #92	; 0x5c
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461d      	mov	r5, r3
 8000f14:	f7ff ff44 	bl	8000da0 <BSP_LCD_GetXSize>
 8000f18:	4606      	mov	r6, r0
 8000f1a:	f7ff ff4d 	bl	8000db8 <BSP_LCD_GetYSize>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	4632      	mov	r2, r6
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f000 f8a4 	bl	800107c <LL_FillBuffer>
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3c:	200000b8 	.word	0x200000b8
 8000f40:	20003f9c 	.word	0x20003f9c

08000f44 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d80d      	bhi.n	8000f70 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4613      	mov	r3, r2
 8000f64:	2215      	movs	r2, #21
 8000f66:	2100      	movs	r1, #0
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <DSI_IO_WriteCmd+0x50>)
 8000f6a:	f002 ff5d 	bl	8003e28 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8000f6e:	e00d      	b.n	8000f8c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2239      	movs	r2, #57	; 0x39
 8000f84:	2100      	movs	r1, #0
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <DSI_IO_WriteCmd+0x50>)
 8000f88:	f002 ff70 	bl	8003e6c <HAL_DSI_LongWrite>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20004044 	.word	0x20004044

08000f98 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8000f9c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a31      	ldr	r2, [pc, #196]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fd0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000fdc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8000ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001000:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001008:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800100c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 800102c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <BSP_LCD_MspInit+0xd0>)
 8001038:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800103c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2103      	movs	r1, #3
 8001042:	2058      	movs	r0, #88	; 0x58
 8001044:	f001 f8a0 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001048:	2058      	movs	r0, #88	; 0x58
 800104a:	f001 f8b9 	bl	80021c0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2103      	movs	r1, #3
 8001052:	205a      	movs	r0, #90	; 0x5a
 8001054:	f001 f898 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001058:	205a      	movs	r0, #90	; 0x5a
 800105a:	f001 f8b1 	bl	80021c0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2103      	movs	r1, #3
 8001062:	2062      	movs	r0, #98	; 0x62
 8001064:	f001 f890 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001068:	2062      	movs	r0, #98	; 0x62
 800106a:	f001 f8a9 	bl	80021c0 <HAL_NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <LL_FillBuffer+0x68>)
 800108c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001090:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <LL_FillBuffer+0x68>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <LL_FillBuffer+0x68>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <LL_FillBuffer+0x68>)
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <LL_FillBuffer+0x6c>)
 80010a2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <LL_FillBuffer+0x68>)
 80010a6:	f001 fc8f 	bl	80029c8 <HAL_DMA2D_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d115      	bne.n	80010dc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LL_FillBuffer+0x68>)
 80010b4:	f001 fdf6 	bl	8002ca4 <HAL_DMA2D_ConfigLayer>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10e      	bne.n	80010dc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69f9      	ldr	r1, [r7, #28]
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <LL_FillBuffer+0x68>)
 80010ca:	f001 fcd7 	bl	8002a7c <HAL_DMA2D_Start>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80010d4:	210a      	movs	r1, #10
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <LL_FillBuffer+0x68>)
 80010d8:	f001 fcfb 	bl	8002ad2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20003f44 	.word	0x20003f44
 80010e8:	4002b000 	.word	0x4002b000

080010ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <BSP_SDRAM_Init+0xac>)
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <BSP_SDRAM_Init+0xb0>)
 80010f4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 80010fe:	2207      	movs	r2, #7
 8001100:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 8001104:	2204      	movs	r2, #4
 8001106:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 800110a:	2207      	movs	r2, #7
 800110c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 8001110:	2202      	movs	r2, #2
 8001112:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 8001116:	2202      	movs	r2, #2
 8001118:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 800111c:	2202      	movs	r2, #2
 800111e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <BSP_SDRAM_Init+0xac>)
 800112e:	2204      	movs	r2, #4
 8001130:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001134:	2220      	movs	r2, #32
 8001136:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <BSP_SDRAM_Init+0xac>)
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001140:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001144:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <BSP_SDRAM_Init+0xac>)
 800114e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001152:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <BSP_SDRAM_Init+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001162:	2100      	movs	r1, #0
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <BSP_SDRAM_Init+0xac>)
 8001166:	f000 f87f 	bl	8001268 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <BSP_SDRAM_Init+0xb4>)
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <BSP_SDRAM_Init+0xac>)
 800116e:	f004 fe09 	bl	8005d84 <HAL_SDRAM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <BSP_SDRAM_Init+0xb8>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e002      	b.n	8001186 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <BSP_SDRAM_Init+0xb8>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001186:	f240 6003 	movw	r0, #1539	; 0x603
 800118a:	f000 f80d 	bl	80011a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <BSP_SDRAM_Init+0xb8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20004060 	.word	0x20004060
 800119c:	a0000140 	.word	0xa0000140
 80011a0:	20000164 	.word	0x20000164
 80011a4:	20000020 	.word	0x20000020

080011a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011bc:	2210      	movs	r2, #16
 80011be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80011cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d0:	4923      	ldr	r1, [pc, #140]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011d2:	4824      	ldr	r0, [pc, #144]	; (8001264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011d4:	f004 fe0a 	bl	8005dec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 f96d 	bl	80014b8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011e6:	2210      	movs	r2, #16
 80011e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	4919      	ldr	r1, [pc, #100]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011fe:	f004 fdf5 	bl	8005dec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001204:	2203      	movs	r2, #3
 8001206:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800120a:	2210      	movs	r2, #16
 800120c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001210:	2208      	movs	r2, #8
 8001212:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	4910      	ldr	r1, [pc, #64]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001220:	4810      	ldr	r0, [pc, #64]	; (8001264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001222:	f004 fde3 	bl	8005dec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001226:	f44f 730c 	mov.w	r3, #560	; 0x230
 800122a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800122e:	2204      	movs	r2, #4
 8001230:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800123a:	2201      	movs	r2, #1
 800123c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001242:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	4905      	ldr	r1, [pc, #20]	; (8001260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800124c:	f004 fdce 	bl	8005dec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001254:	f004 fdf5 	bl	8005e42 <HAL_SDRAM_ProgramRefreshRate>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000180 	.word	0x20000180
 8001264:	20004060 	.word	0x20004060

08001268 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	4a70      	ldr	r2, [pc, #448]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6393      	str	r3, [r2, #56]	; 0x38
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b68      	ldr	r3, [pc, #416]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a64      	ldr	r2, [pc, #400]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b59      	ldr	r3, [pc, #356]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a52      	ldr	r2, [pc, #328]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b50      	ldr	r3, [pc, #320]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <BSP_SDRAM_MspInit+0x1d0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800133e:	230c      	movs	r3, #12
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001342:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	483b      	ldr	r0, [pc, #236]	; (800143c <BSP_SDRAM_MspInit+0x1d4>)
 8001350:	f002 fe52 	bl	8003ff8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001354:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	4837      	ldr	r0, [pc, #220]	; (8001440 <BSP_SDRAM_MspInit+0x1d8>)
 8001362:	f002 fe49 	bl	8003ff8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001366:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800136c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001370:	4619      	mov	r1, r3
 8001372:	4834      	ldr	r0, [pc, #208]	; (8001444 <BSP_SDRAM_MspInit+0x1dc>)
 8001374:	f002 fe40 	bl	8003ff8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001378:	f248 1337 	movw	r3, #33079	; 0x8137
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	4830      	ldr	r0, [pc, #192]	; (8001448 <BSP_SDRAM_MspInit+0x1e0>)
 8001386:	f002 fe37 	bl	8003ff8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800138a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	482d      	ldr	r0, [pc, #180]	; (800144c <BSP_SDRAM_MspInit+0x1e4>)
 8001398:	f002 fe2e 	bl	8003ff8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800139c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <BSP_SDRAM_MspInit+0x1e8>)
 80013aa:	f002 fe25 	bl	8003ff8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <BSP_SDRAM_MspInit+0x1f0>)
 8001404:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001412:	4810      	ldr	r0, [pc, #64]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 8001414:	f000 ff90 	bl	8002338 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <BSP_SDRAM_MspInit+0x1ec>)
 800141a:	f000 fedf 	bl	80021dc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	210f      	movs	r1, #15
 8001422:	2038      	movs	r0, #56	; 0x38
 8001424:	f000 feb0 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001428:	2038      	movs	r0, #56	; 0x38
 800142a:	f000 fec9 	bl	80021c0 <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3740      	adds	r7, #64	; 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40022000 	.word	0x40022000
 8001454:	20000190 	.word	0x20000190
 8001458:	40026410 	.word	0x40026410

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 fe86 	bl	8002172 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f009 f8ec 	bl	800a644 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f008 fe4c 	bl	800a108 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000021 	.word	0x20000021
 800149c:	20004094 	.word	0x20004094

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20004094 	.word	0x20004094

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_Delay+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000021 	.word	0x20000021

080014fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e031      	b.n	8001576 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f008 fe1c 	bl	800a158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d116      	bne.n	8001568 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_ADC_Init+0x84>)
 8001540:	4013      	ands	r3, r2
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fa5a 	bl	8001a04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f023 0303 	bic.w	r3, r3, #3
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
 8001566:	e001      	b.n	800156c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	ffffeefd 	.word	0xffffeefd

08001584 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Start_DMA+0x1e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e0c7      	b.n	8001732 <HAL_ADC_Start_DMA+0x1ae>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d018      	beq.n	80015ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015c8:	4b5c      	ldr	r3, [pc, #368]	; (800173c <HAL_ADC_Start_DMA+0x1b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <HAL_ADC_Start_DMA+0x1bc>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9a      	lsrs	r2, r3, #18
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 809b 	bne.w	8001730 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_ADC_Start_DMA+0x1c0>)
 8001600:	4013      	ands	r3, r2
 8001602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001620:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001634:	d106      	bne.n	8001644 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f023 0206 	bic.w	r2, r3, #6
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
 8001642:	e002      	b.n	800164a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <HAL_ADC_Start_DMA+0x1c4>)
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a3b      	ldr	r2, [pc, #236]	; (800174c <HAL_ADC_Start_DMA+0x1c8>)
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <HAL_ADC_Start_DMA+0x1cc>)
 8001668:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001672:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001682:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f000 fea6 	bl	80023f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_ADC_Start_DMA+0x1d0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10f      	bne.n	80016d4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d136      	bne.n	8001730 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	e02d      	b.n	8001730 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_ADC_Start_DMA+0x1d4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10e      	bne.n	80016fc <HAL_ADC_Start_DMA+0x178>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_ADC_Start_DMA+0x1d0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d113      	bne.n	8001730 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_ADC_Start_DMA+0x1d8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10e      	bne.n	8001730 <HAL_ADC_Start_DMA+0x1ac>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800172e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000002c 	.word	0x2000002c
 8001740:	431bde83 	.word	0x431bde83
 8001744:	fffff8fe 	.word	0xfffff8fe
 8001748:	08001bf9 	.word	0x08001bf9
 800174c:	08001cb3 	.word	0x08001cb3
 8001750:	08001ccf 	.word	0x08001ccf
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	40012200 	.word	0x40012200

08001760 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1c>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e115      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x248>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d935      	bls.n	8001834 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68d9      	ldr	r1, [r3, #12]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	3b1e      	subs	r3, #30
 80017de:	2207      	movs	r2, #7
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43da      	mvns	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	400a      	ands	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7f      	ldr	r2, [pc, #508]	; (80019f0 <HAL_ADC_ConfigChannel+0x254>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d10a      	bne.n	800180e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	061a      	lsls	r2, r3, #24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	e035      	b.n	800187a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	4603      	mov	r3, r0
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4403      	add	r3, r0
 8001826:	3b1e      	subs	r3, #30
 8001828:	409a      	lsls	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	e022      	b.n	800187a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6919      	ldr	r1, [r3, #16]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	2207      	movs	r2, #7
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	4603      	mov	r3, r0
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4403      	add	r3, r0
 8001870:	409a      	lsls	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b06      	cmp	r3, #6
 8001880:	d824      	bhi.n	80018cc <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b05      	subs	r3, #5
 8001894:	221f      	movs	r2, #31
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b05      	subs	r3, #5
 80018be:	fa00 f203 	lsl.w	r2, r0, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	e04c      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d824      	bhi.n	800191e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	3b23      	subs	r3, #35	; 0x23
 80018e6:	221f      	movs	r2, #31
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43da      	mvns	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	400a      	ands	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3b23      	subs	r3, #35	; 0x23
 8001910:	fa00 f203 	lsl.w	r2, r0, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
 800191c:	e023      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b41      	subs	r3, #65	; 0x41
 8001930:	221f      	movs	r2, #31
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	400a      	ands	r2, r1
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b41      	subs	r3, #65	; 0x41
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <HAL_ADC_ConfigChannel+0x258>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d109      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1e8>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b12      	cmp	r3, #18
 8001976:	d105      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_ADC_ConfigChannel+0x25c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_ADC_ConfigChannel+0x25c>)
 800197e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001982:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_ADC_ConfigChannel+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d125      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23e>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_ADC_ConfigChannel+0x254>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x204>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b11      	cmp	r3, #17
 800199e:	d11c      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_ADC_ConfigChannel+0x25c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_ADC_ConfigChannel+0x25c>)
 80019a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019aa:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_ADC_ConfigChannel+0x254>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d111      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_ADC_ConfigChannel+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_ConfigChannel+0x264>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9a      	lsrs	r2, r3, #18
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	10000012 	.word	0x10000012
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40012300 	.word	0x40012300
 80019fc:	2000002c 	.word	0x2000002c
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <ADC_Init+0x1ec>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <ADC_Init+0x1ec>)
 8001a12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <ADC_Init+0x1ec>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <ADC_Init+0x1ec>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	021a      	lsls	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <ADC_Init+0x1f0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6899      	ldr	r1, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	e00f      	b.n	8001afe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0202 	bic.w	r2, r2, #2
 8001b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	005a      	lsls	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	3b01      	subs	r3, #1
 8001b58:	035a      	lsls	r2, r3, #13
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e007      	b.n	8001b74 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	051a      	lsls	r2, r3, #20
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb6:	025a      	lsls	r2, r3, #9
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	029a      	lsls	r2, r3, #10
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40012300 	.word	0x40012300
 8001bf4:	0f000001 	.word	0x0f000001

08001bf8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d13c      	bne.n	8001c8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d12b      	bne.n	8001c84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d127      	bne.n	8001c84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d119      	bne.n	8001c84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0220 	bic.w	r2, r2, #32
 8001c5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff fd6b 	bl	8001760 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c8a:	e00e      	b.n	8001caa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff fd75 	bl	8001788 <HAL_ADC_ErrorCallback>
}
 8001c9e:	e004      	b.n	8001caa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff fd57 	bl	8001774 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f043 0204 	orr.w	r2, r3, #4
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fd4a 	bl	8001788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e171      	b.n	8001ff8 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b09      	cmp	r3, #9
 8001d22:	d925      	bls.n	8001d70 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	3b1e      	subs	r3, #30
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68d9      	ldr	r1, [r3, #12]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4403      	add	r3, r0
 8001d62:	3b1e      	subs	r3, #30
 8001d64:	409a      	lsls	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	e022      	b.n	8001db6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	2207      	movs	r2, #7
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	400a      	ands	r2, r1
 8001d92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6919      	ldr	r1, [r3, #16]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4403      	add	r3, r0
 8001dac:	409a      	lsls	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	051a      	lsls	r2, r3, #20
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3303      	adds	r3, #3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	221f      	movs	r2, #31
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_ADCEx_InjectedConfigChannel+0x308>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	e00f      	b.n	8001eb4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eb2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7d5b      	ldrb	r3, [r3, #21]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	e007      	b.n	8001ede <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	7d1b      	ldrb	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d015      	beq.n	8001f3c <HAL_ADCEx_InjectedConfigChannel+0x240>
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d025      	beq.n	8001f60 <HAL_ADCEx_InjectedConfigChannel+0x264>
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d135      	bne.n	8001f84 <HAL_ADCEx_InjectedConfigChannel+0x288>
  {
    case 1:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8001f24:	400b      	ands	r3, r1
 8001f26:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	615a      	str	r2, [r3, #20]
      break;
 8001f3a:	e035      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    case 2:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6999      	ldr	r1, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8001f48:	400b      	ands	r3, r1
 8001f4a:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6999      	ldr	r1, [r3, #24]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	619a      	str	r2, [r3, #24]
      break;
 8001f5e:	e023      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    case 3:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69d9      	ldr	r1, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69d9      	ldr	r1, [r3, #28]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
      break;
 8001f82:	e011      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6a19      	ldr	r1, [r3, #32]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8001f90:	400b      	ands	r3, r1
 8001f92:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a19      	ldr	r1, [r3, #32]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
      break;
 8001fa6:	bf00      	nop
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d109      	bne.n	8001fc6 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d105      	bne.n	8001fc6 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8001fc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10e      	bne.n	8001fee <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d003      	beq.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2e6>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b11      	cmp	r3, #17
 8001fe0:	d105      	bne.n	8001fee <HAL_ADCEx_InjectedConfigChannel+0x2f2>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8001fe8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fec:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	000f0001 	.word	0x000f0001
 8002008:	fffff000 	.word	0xfffff000
 800200c:	40012000 	.word	0x40012000
 8002010:	40012300 	.word	0x40012300
 8002014:	10000012 	.word	0x10000012

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <__NVIC_SetPriorityGrouping+0x40>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	4313      	orrs	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <__NVIC_SetPriorityGrouping+0x40>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00
 800205c:	05fa0000 	.word	0x05fa0000

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff4c 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219a:	f7ff ff61 	bl	8002060 <__NVIC_GetPriorityGrouping>
 800219e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f7ff ffb1 	bl	800210c <NVIC_EncodePriority>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff80 	bl	80020b8 <__NVIC_SetPriority>
}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff54 	bl	800207c <__NVIC_EnableIRQ>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff f95a 	bl	80014a0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e099      	b.n	800232c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002218:	e00f      	b.n	800223a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221a:	f7ff f941 	bl	80014a0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b05      	cmp	r3, #5
 8002226:	d908      	bls.n	800223a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e078      	b.n	800232c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e8      	bne.n	800221a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_DMA_Init+0x158>)
 8002254:	4013      	ands	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b04      	cmp	r3, #4
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4313      	orrs	r3, r2
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d117      	bne.n	80022fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 faf7 	bl	80028d4 <DMA_CheckFifoParam>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022fa:	2301      	movs	r3, #1
 80022fc:	e016      	b.n	800232c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 faae 	bl	8002868 <DMA_CalcBaseAndBitshift>
 800230c:	4603      	mov	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	223f      	movs	r2, #63	; 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	e010803f 	.word	0xe010803f

08002338 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e050      	b.n	80023ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d101      	bne.n	800235a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e048      	b.n	80023ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa64 	bl	8002868 <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_DMA_Start_IT+0x26>
 8002416:	2302      	movs	r3, #2
 8002418:	e048      	b.n	80024ac <HAL_DMA_Start_IT+0xb8>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d137      	bne.n	800249e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f9e2 	bl	800280c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	223f      	movs	r2, #63	; 0x3f
 800244e:	409a      	lsls	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0216 	orr.w	r2, r2, #22
 8002462:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002472:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e005      	b.n	80024aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00c      	b.n	80024ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2205      	movs	r2, #5
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_DMA_IRQHandler+0x258>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_DMA_IRQHandler+0x25c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a9b      	lsrs	r3, r3, #10
 8002510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2208      	movs	r2, #8
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2208      	movs	r2, #8
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2204      	movs	r2, #4
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2204      	movs	r2, #4
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2210      	movs	r2, #16
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d043      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03c      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2210      	movs	r2, #16
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e01f      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e016      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0208 	bic.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2220      	movs	r2, #32
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808e 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8086 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d136      	bne.n	8002710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x1da>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
        }
        return;
 800270e:	e078      	b.n	8002802 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01c      	beq.n	8002758 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2b00      	cmp	r3, #0
 8002732:	d030      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e02b      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d027      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e022      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
 8002750:	2000002c 	.word	0x2000002c
 8002754:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	2b00      	cmp	r3, #0
 800279c:	d032      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2205      	movs	r2, #5
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d307      	bcc.n	80027de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x2ca>
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e000      	b.n	8002804 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002802:	bf00      	nop
    }
  }
}
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002828:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d108      	bne.n	800284c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800284a:	e007      	b.n	800285c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3b10      	subs	r3, #16
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <DMA_CalcBaseAndBitshift+0x60>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <DMA_CalcBaseAndBitshift+0x64>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d908      	bls.n	80028a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <DMA_CalcBaseAndBitshift+0x68>)
 800289e:	4013      	ands	r3, r2
 80028a0:	1d1a      	adds	r2, r3, #4
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58
 80028a6:	e006      	b.n	80028b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <DMA_CalcBaseAndBitshift+0x68>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	aaaaaaab 	.word	0xaaaaaaab
 80028cc:	0800c604 	.word	0x0800c604
 80028d0:	fffffc00 	.word	0xfffffc00

080028d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d855      	bhi.n	80029a0 <DMA_CheckFifoParam+0xcc>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x28>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	0800291f 	.word	0x0800291f
 8002904:	0800290d 	.word	0x0800290d
 8002908:	080029a1 	.word	0x080029a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d045      	beq.n	80029a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e042      	b.n	80029a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002926:	d13f      	bne.n	80029a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e03c      	b.n	80029a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	d121      	bne.n	800297c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d836      	bhi.n	80029ac <DMA_CheckFifoParam+0xd8>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <DMA_CheckFifoParam+0x70>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	0800295b 	.word	0x0800295b
 800294c:	08002955 	.word	0x08002955
 8002950:	0800296d 	.word	0x0800296d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e02f      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d024      	beq.n	80029b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296a:	e021      	b.n	80029b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002974:	d11e      	bne.n	80029b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800297a:	e01b      	b.n	80029b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <DMA_CheckFifoParam+0xb4>
 8002982:	2b03      	cmp	r3, #3
 8002984:	d003      	beq.n	800298e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002986:	e018      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e015      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00e      	beq.n	80029b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      break;
 800299e:	e00b      	b.n	80029b8 <DMA_CheckFifoParam+0xe4>
      break;
 80029a0:	bf00      	nop
 80029a2:	e00a      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029a4:	bf00      	nop
 80029a6:	e008      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029a8:	bf00      	nop
 80029aa:	e006      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029ac:	bf00      	nop
 80029ae:	e004      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029b0:	bf00      	nop
 80029b2:	e002      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;   
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029b8:	bf00      	nop
    }
  } 
  
  return status; 
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e049      	b.n	8002a6e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f007 fc26 	bl	800a240 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a18:	f023 0107 	bic.w	r1, r3, #7
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_DMA2D_Init+0xb0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d1      	ldr	r1, [r2, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	051a      	lsls	r2, r3, #20
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	ffffc000 	.word	0xffffc000

08002a7c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA2D_Start+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e018      	b.n	8002aca <HAL_DMA2D_Start+0x4e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f994 	bl	8002de0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d056      	beq.n	8002b9c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002aee:	f7fe fcd7 	bl	80014a0 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002af4:	e04b      	b.n	8002b8e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d023      	beq.n	8002b50 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2221      	movs	r2, #33	; 0x21
 8002b3a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0a5      	b.n	8002c9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d01a      	beq.n	8002b8e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002b58:	f7fe fca2 	bl	80014a0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <HAL_DMA2D_PollForTransfer+0x9c>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e086      	b.n	8002c9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ac      	beq.n	8002af6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d061      	beq.n	8002c82 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bbe:	f7fe fc6f 	bl	80014a0 <HAL_GetTick>
 8002bc2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002bc4:	e056      	b.n	8002c74 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02e      	beq.n	8002c36 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f043 0202 	orr.w	r2, r3, #2
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2229      	movs	r2, #41	; 0x29
 8002c20:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e032      	b.n	8002c9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d01a      	beq.n	8002c74 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002c3e:	f7fe fc2f 	bl	80014a0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <HAL_DMA2D_PollForTransfer+0x182>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10f      	bne.n	8002c74 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0a1      	beq.n	8002bc6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2212      	movs	r2, #18
 8002c88:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA2D_ConfigLayer+0x20>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e084      	b.n	8002dce <HAL_DMA2D_ConfigLayer+0x12a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	3320      	adds	r3, #32
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002cf8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <HAL_DMA2D_ConfigLayer+0x138>)
 8002d06:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b0a      	cmp	r3, #10
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA2D_ConfigLayer+0x74>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d107      	bne.n	8002d28 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e005      	b.n	8002d34 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d120      	bne.n	8002d7c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	ea02 0103 	and.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b0a      	cmp	r3, #10
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA2D_ConfigLayer+0xc8>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	d127      	bne.n	8002dbc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7a:	e01f      	b.n	8002dbc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	ea02 0103 	and.w	r1, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d003      	beq.n	8002dae <HAL_DMA2D_ConfigLayer+0x10a>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b09      	cmp	r3, #9
 8002dac:	d106      	bne.n	8002dbc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002dba:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	ff33000f 	.word	0xff33000f

08002de0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e18:	d174      	bne.n	8002f04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e053      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d106      	bne.n	8002e68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e048      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d111      	bne.n	8002e94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	0cdb      	lsrs	r3, r3, #19
 8002e74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	0a9b      	lsrs	r3, r3, #10
 8002e7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	02db      	lsls	r3, r3, #11
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	e032      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d117      	bne.n	8002ecc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	0fdb      	lsrs	r3, r3, #31
 8002ea0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	0cdb      	lsrs	r3, r3, #19
 8002ea6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	03db      	lsls	r3, r3, #15
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e016      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	0f1b      	lsrs	r3, r3, #28
 8002ed0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	0b1b      	lsrs	r3, r3, #12
 8002edc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f02:	e003      	b.n	8002f0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	372c      	adds	r7, #44	; 0x2c
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	019a      	lsls	r2, r3, #6
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	431a      	orrs	r2, r3
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f58:	f7fe faa2 	bl	80014a0 <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f5e:	e009      	b.n	8002f74 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002f60:	f7fe fa9e 	bl	80014a0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6e:	d901      	bls.n	8002f74 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e015      	b.n	8002fa0 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	019a      	lsls	r2, r3, #6
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e106      	b.n	80031ca <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7c5b      	ldrb	r3, [r3, #17]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f007 f95a 	bl	800a280 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fe6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffa:	f7fe fa51 	bl	80014a0 <HAL_GetTick>
 8002ffe:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003000:	e009      	b.n	8003016 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003002:	f7fe fa4d 	bl	80014a0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003010:	d901      	bls.n	8003016 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0d9      	b.n	80031ca <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800301e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ed      	beq.n	8003002 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_DSI_Init+0x22c>)
 8003034:	400b      	ands	r3, r1
 8003036:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	02db      	lsls	r3, r3, #11
 800304e:	431a      	orrs	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308a:	f7fe fa09 	bl	80014a0 <HAL_GetTick>
 800308e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003090:	e009      	b.n	80030a6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003092:	f7fe fa05 	bl	80014a0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a0:	d901      	bls.n	80030a6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e091      	b.n	80031ca <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ed      	beq.n	8003092 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0206 	orr.w	r2, r2, #6
 80030c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0203 	bic.w	r2, r2, #3
 80030da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0203 	bic.w	r2, r2, #3
 8003108:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003130:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_DSI_Init+0x1aa>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	e000      	b.n	8003154 <HAL_DSI_Init+0x1ac>
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_DSI_Init+0x230>)
 800315a:	fb02 f203 	mul.w	r2, r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	409a      	lsls	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800318a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	430a      	orrs	r2, r1
 800319e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	fffc8603 	.word	0xfffc8603
 80031d8:	003d0900 	.word	0x003d0900

080031dc <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e066      	b.n	80032bc <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2203      	movs	r2, #3
 80031f2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0208 	bic.w	r2, r2, #8
 8003208:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0206 	bic.w	r2, r2, #6
 800324e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800328e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800329a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f007 f830 	bl	800a308 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7c1b      	ldrb	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_DSI_ConfigErrorMonitor+0x16>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0aa      	b.n	8003430 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003314:	430b      	orrs	r3, r1
 8003316:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003334:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0202 	orr.w	r2, r2, #2
 8003370:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 020c 	orr.w	r2, r2, #12
 800338e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0210 	orr.w	r2, r2, #16
 80033ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003406:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003424:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7c1b      	ldrb	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_DSI_SetGenericVCID+0x16>
 800344e:	2302      	movs	r3, #2
 8003450:	e016      	b.n	8003480 <HAL_DSI_SetGenericVCID+0x44>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0203 	bic.w	r2, r2, #3
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7c1b      	ldrb	r3, [r3, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_DSI_ConfigVideoMode+0x16>
 800349e:	2302      	movs	r3, #2
 80034a0:	e1ee      	b.n	8003880 <HAL_DSI_ConfigVideoMode+0x3f4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0203 	bic.w	r2, r2, #3
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_DSI_ConfigVideoMode+0x29c>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b84      	ldr	r3, [pc, #528]	; (800372c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800351c:	400b      	ands	r3, r1
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b7b      	ldr	r3, [pc, #492]	; (800372c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800353e:	400b      	ands	r3, r1
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0203 	bic.w	r2, r2, #3
 8003562:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0207 	bic.w	r2, r2, #7
 8003584:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	431a      	orrs	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 020f 	bic.w	r2, r2, #15
 80035b2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6919      	ldr	r1, [r3, #16]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 020e 	bic.w	r2, r2, #14
 80035d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	005a      	lsls	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d110      	bne.n	800361c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003608:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6919      	ldr	r1, [r3, #16]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003628:	400b      	ands	r3, r1
 800362a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800364a:	400b      	ands	r3, r1
 800364c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800366c:	400b      	ands	r3, r1
 800366e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800368e:	400b      	ands	r3, r1
 8003690:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80036b0:	400b      	ands	r3, r1
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_DSI_ConfigVideoMode+0x29c>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	e00a      	b.n	800373c <HAL_DSI_ConfigVideoMode+0x2b0>
 8003726:	bf00      	nop
 8003728:	ffffc000 	.word	0xffffc000
 800372c:	ffffe000 	.word	0xffffe000
 8003730:	fffff000 	.word	0xfffff000
 8003734:	ffff8000 	.word	0xffff8000
 8003738:	fffffc00 	.word	0xfffffc00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003752:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	041a      	lsls	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003776:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7c1b      	ldrb	r3, [r3, #16]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0c5      	b.n	8003a2e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0203 	bic.w	r2, r2, #3
 80038ee:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0207 	bic.w	r2, r2, #7
 8003910:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6959      	ldr	r1, [r3, #20]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	431a      	orrs	r2, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 020f 	bic.w	r2, r2, #15
 800393e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6919      	ldr	r1, [r3, #16]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	005a      	lsls	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800398a:	400b      	ands	r3, r1
 800398c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0202 	orr.w	r2, r2, #2
 8003a22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	ffff0000 	.word	0xffff0000

08003a40 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7c1b      	ldrb	r3, [r3, #16]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DSI_ConfigCommand+0x16>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e049      	b.n	8003aea <HAL_DSI_ConfigCommand+0xaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_DSI_ConfigCommand+0xb8>)
 8003a68:	400b      	ands	r3, r1
 8003a6a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003a7a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003a80:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003a86:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003a8c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003a92:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003a98:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003a9e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003aa4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003aaa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003ab0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003ab6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0202 	bic.w	r2, r2, #2
 8003ace:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	fef080ff 	.word	0xfef080ff

08003afc <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7c1b      	ldrb	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_DSI_ConfigFlowControl+0x16>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e016      	b.n	8003b40 <HAL_DSI_ConfigFlowControl+0x44>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 021f 	bic.w	r2, r2, #31
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7c1b      	ldrb	r3, [r3, #16]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_DSI_ConfigPhyTimer+0x16>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e058      	b.n	8003c14 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4293      	cmp	r3, r2
 8003b72:	bf38      	it	cc
 8003b74:	4613      	movcc	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003b88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	041a      	lsls	r2, r3, #16
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003bb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7c1b      	ldrb	r3, [r3, #16]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0b4      	b.n	8003da0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c4a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b292      	uxth	r2, r2
 8003c6c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	041a      	lsls	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b36      	ldr	r3, [pc, #216]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003cd4:	400b      	ands	r3, r1
 8003cd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003cfe:	400b      	ands	r3, r1
 8003d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7c1b      	ldrb	r3, [r3, #16]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_DSI_Start+0x14>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e02b      	b.n	8003e1c <HAL_DSI_Start+0x6c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0208 	orr.w	r2, r2, #8
 8003e00:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	7c1b      	ldrb	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_DSI_ShortWrite+0x1a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e010      	b.n	8003e64 <HAL_DSI_ShortWrite+0x3c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff f879 	bl	8002f4a <DSI_ShortWrite>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	741a      	strb	r2, [r3, #16]

  return status;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	; 0x30
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	7c1b      	ldrb	r3, [r3, #16]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_DSI_LongWrite+0x1e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e084      	b.n	8003f94 <HAL_DSI_LongWrite+0x128>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7fd fb06 	bl	80014a0 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e96:	e00c      	b.n	8003eb2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e98:	f7fd fb02 	bl	80014a0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea6:	d904      	bls.n	8003eb2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e070      	b.n	8003f94 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0eb      	beq.n	8003e98 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	bf28      	it	cs
 8003eca:	2303      	movcs	r3, #3
 8003ecc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	4413      	add	r3, r2
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d3eb      	bcc.n	8003ed4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003f14:	e028      	b.n	8003f68 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	bf28      	it	cs
 8003f1c:	2304      	movcs	r3, #4
 8003f1e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	e00e      	b.n	8003f48 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	4413      	add	r3, r2
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3301      	adds	r3, #1
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3ec      	bcc.n	8003f2a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1d3      	bne.n	8003f16 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003f76:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	f7fe ffc6 	bl	8002f18 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7c1b      	ldrb	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e01b      	b.n	8003fea <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003fc8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	065a      	lsls	r2, r3, #25
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e175      	b.n	8004304 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 8164 	bne.w	80042fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x4e>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b12      	cmp	r3, #18
 8004044:	d123      	bne.n	800408e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d00b      	beq.n	80040e2 <HAL_GPIO_Init+0xea>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d007      	beq.n	80040e2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040d6:	2b11      	cmp	r3, #17
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b12      	cmp	r3, #18
 80040e0:	d130      	bne.n	8004144 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2203      	movs	r2, #3
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004118:	2201      	movs	r2, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 0201 	and.w	r2, r3, #1
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2203      	movs	r2, #3
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80be 	beq.w	80042fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	4b65      	ldr	r3, [pc, #404]	; (8004318 <HAL_GPIO_Init+0x320>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	4a64      	ldr	r2, [pc, #400]	; (8004318 <HAL_GPIO_Init+0x320>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800418c:	6453      	str	r3, [r2, #68]	; 0x44
 800418e:	4b62      	ldr	r3, [pc, #392]	; (8004318 <HAL_GPIO_Init+0x320>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800419a:	4a60      	ldr	r2, [pc, #384]	; (800431c <HAL_GPIO_Init+0x324>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a57      	ldr	r2, [pc, #348]	; (8004320 <HAL_GPIO_Init+0x328>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d037      	beq.n	8004236 <HAL_GPIO_Init+0x23e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a56      	ldr	r2, [pc, #344]	; (8004324 <HAL_GPIO_Init+0x32c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_GPIO_Init+0x23a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a55      	ldr	r2, [pc, #340]	; (8004328 <HAL_GPIO_Init+0x330>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <HAL_GPIO_Init+0x236>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a54      	ldr	r2, [pc, #336]	; (800432c <HAL_GPIO_Init+0x334>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d025      	beq.n	800422a <HAL_GPIO_Init+0x232>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a53      	ldr	r2, [pc, #332]	; (8004330 <HAL_GPIO_Init+0x338>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <HAL_GPIO_Init+0x22e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_GPIO_Init+0x33c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d019      	beq.n	8004222 <HAL_GPIO_Init+0x22a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a51      	ldr	r2, [pc, #324]	; (8004338 <HAL_GPIO_Init+0x340>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_GPIO_Init+0x226>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a50      	ldr	r2, [pc, #320]	; (800433c <HAL_GPIO_Init+0x344>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00d      	beq.n	800421a <HAL_GPIO_Init+0x222>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a4f      	ldr	r2, [pc, #316]	; (8004340 <HAL_GPIO_Init+0x348>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <HAL_GPIO_Init+0x21e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a4e      	ldr	r2, [pc, #312]	; (8004344 <HAL_GPIO_Init+0x34c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_GPIO_Init+0x21a>
 800420e:	2309      	movs	r3, #9
 8004210:	e012      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004212:	230a      	movs	r3, #10
 8004214:	e010      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004216:	2308      	movs	r3, #8
 8004218:	e00e      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800421a:	2307      	movs	r3, #7
 800421c:	e00c      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800421e:	2306      	movs	r3, #6
 8004220:	e00a      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004222:	2305      	movs	r3, #5
 8004224:	e008      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004226:	2304      	movs	r3, #4
 8004228:	e006      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800422a:	2303      	movs	r3, #3
 800422c:	e004      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800422e:	2302      	movs	r3, #2
 8004230:	e002      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004236:	2300      	movs	r3, #0
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	f002 0203 	and.w	r2, r2, #3
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	4093      	lsls	r3, r2
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004248:	4934      	ldr	r1, [pc, #208]	; (800431c <HAL_GPIO_Init+0x324>)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	3302      	adds	r3, #2
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_GPIO_Init+0x350>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800427a:	4a33      	ldr	r2, [pc, #204]	; (8004348 <HAL_GPIO_Init+0x350>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_GPIO_Init+0x350>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <HAL_GPIO_Init+0x350>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_GPIO_Init+0x350>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ce:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <HAL_GPIO_Init+0x350>)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <HAL_GPIO_Init+0x350>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_GPIO_Init+0x350>)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3301      	adds	r3, #1
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	f67f ae86 	bls.w	8004018 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800430c:	bf00      	nop
 800430e:	3724      	adds	r7, #36	; 0x24
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40023800 	.word	0x40023800
 800431c:	40013800 	.word	0x40013800
 8004320:	40020000 	.word	0x40020000
 8004324:	40020400 	.word	0x40020400
 8004328:	40020800 	.word	0x40020800
 800432c:	40020c00 	.word	0x40020c00
 8004330:	40021000 	.word	0x40021000
 8004334:	40021400 	.word	0x40021400
 8004338:	40021800 	.word	0x40021800
 800433c:	40021c00 	.word	0x40021c00
 8004340:	40022000 	.word	0x40022000
 8004344:	40022400 	.word	0x40022400
 8004348:	40013c00 	.word	0x40013c00

0800434c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e0d9      	b.n	800451c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004368:	2201      	movs	r2, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	f040 80c9 	bne.w	8004516 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004384:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <HAL_GPIO_DeInit+0x1e4>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004390:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a62      	ldr	r2, [pc, #392]	; (8004534 <HAL_GPIO_DeInit+0x1e8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d037      	beq.n	800441e <HAL_GPIO_DeInit+0xd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_GPIO_DeInit+0x1ec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_GPIO_DeInit+0xce>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_GPIO_DeInit+0x1f0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02b      	beq.n	8004416 <HAL_GPIO_DeInit+0xca>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a5f      	ldr	r2, [pc, #380]	; (8004540 <HAL_GPIO_DeInit+0x1f4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d025      	beq.n	8004412 <HAL_GPIO_DeInit+0xc6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a5e      	ldr	r2, [pc, #376]	; (8004544 <HAL_GPIO_DeInit+0x1f8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01f      	beq.n	800440e <HAL_GPIO_DeInit+0xc2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a5d      	ldr	r2, [pc, #372]	; (8004548 <HAL_GPIO_DeInit+0x1fc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d019      	beq.n	800440a <HAL_GPIO_DeInit+0xbe>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_GPIO_DeInit+0x200>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_GPIO_DeInit+0xba>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a5b      	ldr	r2, [pc, #364]	; (8004550 <HAL_GPIO_DeInit+0x204>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00d      	beq.n	8004402 <HAL_GPIO_DeInit+0xb6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a5a      	ldr	r2, [pc, #360]	; (8004554 <HAL_GPIO_DeInit+0x208>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <HAL_GPIO_DeInit+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a59      	ldr	r2, [pc, #356]	; (8004558 <HAL_GPIO_DeInit+0x20c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <HAL_GPIO_DeInit+0xae>
 80043f6:	2309      	movs	r3, #9
 80043f8:	e012      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 80043fa:	230a      	movs	r3, #10
 80043fc:	e010      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 80043fe:	2308      	movs	r3, #8
 8004400:	e00e      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 8004402:	2307      	movs	r3, #7
 8004404:	e00c      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 8004406:	2306      	movs	r3, #6
 8004408:	e00a      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 800440a:	2305      	movs	r3, #5
 800440c:	e008      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 800440e:	2304      	movs	r3, #4
 8004410:	e006      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 8004412:	2303      	movs	r3, #3
 8004414:	e004      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 8004416:	2302      	movs	r3, #2
 8004418:	e002      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_GPIO_DeInit+0xd4>
 800441e:	2300      	movs	r3, #0
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	f002 0203 	and.w	r2, r2, #3
 8004426:	0092      	lsls	r2, r2, #2
 8004428:	4093      	lsls	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d132      	bne.n	8004496 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004440:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <HAL_GPIO_DeInit+0x1e4>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	3302      	adds	r3, #2
 8004448:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	43da      	mvns	r2, r3
 8004450:	4837      	ldr	r0, [pc, #220]	; (8004530 <HAL_GPIO_DeInit+0x1e4>)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	400a      	ands	r2, r1
 8004458:	3302      	adds	r3, #2
 800445a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800445e:	4b3f      	ldr	r3, [pc, #252]	; (800455c <HAL_GPIO_DeInit+0x210>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_GPIO_DeInit+0x210>)
 8004468:	4013      	ands	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_GPIO_DeInit+0x210>)
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	43db      	mvns	r3, r3
 8004474:	4939      	ldr	r1, [pc, #228]	; (800455c <HAL_GPIO_DeInit+0x210>)
 8004476:	4013      	ands	r3, r2
 8004478:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800447a:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_GPIO_DeInit+0x210>)
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	4936      	ldr	r1, [pc, #216]	; (800455c <HAL_GPIO_DeInit+0x210>)
 8004484:	4013      	ands	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004488:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_GPIO_DeInit+0x210>)
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	4932      	ldr	r1, [pc, #200]	; (800455c <HAL_GPIO_DeInit+0x210>)
 8004492:	4013      	ands	r3, r2
 8004494:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2103      	movs	r1, #3
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	08d2      	lsrs	r2, r2, #3
 80044cc:	4019      	ands	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3208      	adds	r2, #8
 80044d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	2103      	movs	r1, #3
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	2101      	movs	r1, #1
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2103      	movs	r1, #3
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	401a      	ands	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	f67f af22 	bls.w	8004368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40022000 	.word	0x40022000
 8004558:	40022400 	.word	0x40022400
 800455c:	40013c00 	.word	0x40013c00

08004560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e001      	b.n	8004582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
 800459c:	4613      	mov	r3, r2
 800459e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a0:	787b      	ldrb	r3, [r7, #1]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80045ac:	e003      	b.n	80045b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	041a      	lsls	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	619a      	str	r2, [r3, #24]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0bf      	b.n	8004756 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f005 feaa 	bl	800a344 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004606:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800461c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6899      	ldr	r1, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004638:	400b      	ands	r3, r1
 800463a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68d9      	ldr	r1, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004666:	400b      	ands	r3, r1
 8004668:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68d9      	ldr	r1, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b33      	ldr	r3, [pc, #204]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004694:	400b      	ands	r3, r1
 8004696:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6959      	ldr	r1, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_LTDC_Init+0x19c>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6959      	ldr	r1, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0206 	orr.w	r2, r2, #6
 8004732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	f000f800 	.word	0xf000f800

08004764 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004764:	b5b0      	push	{r4, r5, r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_LTDC_ConfigLayer+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e02c      	b.n	80047d8 <HAL_LTDC_ConfigLayer+0x74>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2134      	movs	r1, #52	; 0x34
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f811 	bl	80047e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bdb0      	pop	{r4, r5, r7, pc}

080047e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	4413      	add	r3, r2
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	4413      	add	r3, r2
 800480e:	3384      	adds	r3, #132	; 0x84
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	4611      	mov	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	01d2      	lsls	r2, r2, #7
 800481c:	440a      	add	r2, r1
 800481e:	3284      	adds	r2, #132	; 0x84
 8004820:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004824:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004836:	4413      	add	r3, r2
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	01db      	lsls	r3, r3, #7
 8004844:	440b      	add	r3, r1
 8004846:	3384      	adds	r3, #132	; 0x84
 8004848:	4619      	mov	r1, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800485e:	4413      	add	r3, r2
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	01db      	lsls	r3, r3, #7
 800486e:	4413      	add	r3, r2
 8004870:	3384      	adds	r3, #132	; 0x84
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	4611      	mov	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	01d2      	lsls	r2, r2, #7
 800487e:	440a      	add	r2, r1
 8004880:	3284      	adds	r2, #132	; 0x84
 8004882:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004886:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004896:	4413      	add	r3, r2
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4619      	mov	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	01db      	lsls	r3, r3, #7
 80048a4:	440b      	add	r3, r1
 80048a6:	3384      	adds	r3, #132	; 0x84
 80048a8:	4619      	mov	r1, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	4413      	add	r3, r2
 80048bc:	3384      	adds	r3, #132	; 0x84
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	4611      	mov	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	01d2      	lsls	r2, r2, #7
 80048ca:	440a      	add	r2, r1
 80048cc:	3284      	adds	r2, #132	; 0x84
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	01db      	lsls	r3, r3, #7
 80048de:	4413      	add	r3, r2
 80048e0:	3384      	adds	r3, #132	; 0x84
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	01db      	lsls	r3, r3, #7
 8004910:	4413      	add	r3, r2
 8004912:	3384      	adds	r3, #132	; 0x84
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	4413      	add	r3, r2
 8004922:	3384      	adds	r3, #132	; 0x84
 8004924:	461a      	mov	r2, r3
 8004926:	2300      	movs	r3, #0
 8004928:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004930:	461a      	mov	r2, r3
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	431a      	orrs	r2, r3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4619      	mov	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	440b      	add	r3, r1
 8004946:	3384      	adds	r3, #132	; 0x84
 8004948:	4619      	mov	r1, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	01db      	lsls	r3, r3, #7
 800495a:	4413      	add	r3, r2
 800495c:	3384      	adds	r3, #132	; 0x84
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	4611      	mov	r1, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	01d2      	lsls	r2, r2, #7
 800496a:	440a      	add	r2, r1
 800496c:	3284      	adds	r2, #132	; 0x84
 800496e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004972:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	4413      	add	r3, r2
 8004980:	3384      	adds	r3, #132	; 0x84
 8004982:	461a      	mov	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	01db      	lsls	r3, r3, #7
 8004994:	4413      	add	r3, r2
 8004996:	3384      	adds	r3, #132	; 0x84
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	440b      	add	r3, r1
 80049a6:	3384      	adds	r3, #132	; 0x84
 80049a8:	4619      	mov	r1, r3
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <LTDC_SetConfig+0x32c>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	6809      	ldr	r1, [r1, #0]
 80049bc:	4608      	mov	r0, r1
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	01c9      	lsls	r1, r1, #7
 80049c2:	4401      	add	r1, r0
 80049c4:	3184      	adds	r1, #132	; 0x84
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	01db      	lsls	r3, r3, #7
 80049d4:	4413      	add	r3, r2
 80049d6:	3384      	adds	r3, #132	; 0x84
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	01db      	lsls	r3, r3, #7
 80049e4:	4413      	add	r3, r2
 80049e6:	3384      	adds	r3, #132	; 0x84
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	01db      	lsls	r3, r3, #7
 80049f8:	4413      	add	r3, r2
 80049fa:	3384      	adds	r3, #132	; 0x84
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e01b      	b.n	8004a4a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e014      	b.n	8004a4a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d00b      	beq.n	8004a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d007      	beq.n	8004a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d003      	beq.n	8004a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a3c:	2b07      	cmp	r3, #7
 8004a3e:	d102      	bne.n	8004a46 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004a40:	2302      	movs	r3, #2
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e001      	b.n	8004a4a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	4413      	add	r3, r2
 8004a56:	3384      	adds	r3, #132	; 0x84
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	01d2      	lsls	r2, r2, #7
 8004a64:	440a      	add	r2, r1
 8004a66:	3284      	adds	r2, #132	; 0x84
 8004a68:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1acb      	subs	r3, r1, r3
 8004a84:	69f9      	ldr	r1, [r7, #28]
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	3303      	adds	r3, #3
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	6809      	ldr	r1, [r1, #0]
 8004a90:	4608      	mov	r0, r1
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	01c9      	lsls	r1, r1, #7
 8004a96:	4401      	add	r1, r0
 8004a98:	3184      	adds	r1, #132	; 0x84
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	01db      	lsls	r3, r3, #7
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3384      	adds	r3, #132	; 0x84
 8004aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	440b      	add	r3, r1
 8004aba:	3384      	adds	r3, #132	; 0x84
 8004abc:	4619      	mov	r1, r3
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <LTDC_SetConfig+0x330>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	01db      	lsls	r3, r3, #7
 8004ace:	4413      	add	r3, r2
 8004ad0:	3384      	adds	r3, #132	; 0x84
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	01db      	lsls	r3, r3, #7
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3384      	adds	r3, #132	; 0x84
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	4611      	mov	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	01d2      	lsls	r2, r2, #7
 8004af4:	440a      	add	r2, r1
 8004af6:	3284      	adds	r2, #132	; 0x84
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	fffff8f8 	.word	0xfffff8f8
 8004b10:	fffff800 	.word	0xfffff800

08004b14 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004b26:	2200      	movs	r2, #0
 8004b28:	e001      	b.n	8004b2e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004b2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b3e:	e000      	b.n	8004b42 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004b40:	2200      	movs	r2, #0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b52:	e000      	b.n	8004b56 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004b54:	2200      	movs	r2, #0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	4413      	add	r3, r2
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	441a      	add	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4413      	add	r3, r2
 8004b84:	1e5a      	subs	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	441a      	add	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	441a      	add	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	4413      	add	r3, r2
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be2:	f7fc fc5d 	bl	80014a0 <HAL_GetTick>
 8004be6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004be8:	e009      	b.n	8004bfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bea:	f7fc fc59 	bl	80014a0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf8:	d901      	bls.n	8004bfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e022      	b.n	8004c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0a:	d1ee      	bne.n	8004bea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c18:	f7fc fc42 	bl	80014a0 <HAL_GetTick>
 8004c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c1e:	e009      	b.n	8004c34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c20:	f7fc fc3e 	bl	80014a0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2e:	d901      	bls.n	8004c34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e007      	b.n	8004c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c40:	d1ee      	bne.n	8004c20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40007000 	.word	0x40007000

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e25e      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8087 	beq.w	8004d86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c78:	4b96      	ldr	r3, [pc, #600]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d00c      	beq.n	8004c9e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c84:	4b93      	ldr	r3, [pc, #588]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d112      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x62>
 8004c90:	4b90      	ldr	r3, [pc, #576]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9e:	4b8d      	ldr	r3, [pc, #564]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d06c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x130>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d168      	bne.n	8004d84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e238      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x7a>
 8004cc0:	4b84      	ldr	r3, [pc, #528]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a83      	ldr	r2, [pc, #524]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e02e      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x9c>
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7e      	ldr	r2, [pc, #504]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7b      	ldr	r2, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e01d      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0xc0>
 8004cfa:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a75      	ldr	r2, [pc, #468]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b73      	ldr	r3, [pc, #460]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a72      	ldr	r2, [pc, #456]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004d14:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6b      	ldr	r2, [pc, #428]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fc fbb4 	bl	80014a0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fc fbb0 	bl	80014a0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1ec      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe8>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fc fba0 	bl	80014a0 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fc fb9c 	bl	80014a0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1d8      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	4b57      	ldr	r3, [pc, #348]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x110>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d069      	beq.n	8004e66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d92:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d11c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x190>
 8004daa:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	4b47      	ldr	r3, [pc, #284]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x17a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1ac      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	493d      	ldr	r1, [pc, #244]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	e040      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d023      	beq.n	8004e34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dec:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fb52 	bl	80014a0 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fc fb4e 	bl	80014a0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e18a      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e12:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4929      	ldr	r1, [pc, #164]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a26      	ldr	r2, [pc, #152]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fc fb2e 	bl	80014a0 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fc fb2a 	bl	80014a0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e166      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d038      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fc fb0b 	bl	80014a0 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fb07 	bl	80014a0 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e143      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x23a>
 8004eac:	e01a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fc faf1 	bl	80014a0 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fc faed 	bl	80014a0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d903      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e129      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
 8004ed4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b95      	ldr	r3, [pc, #596]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ee      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80a4 	beq.w	800503a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef2:	4b8f      	ldr	r3, [pc, #572]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	4b8c      	ldr	r3, [pc, #560]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4a8b      	ldr	r2, [pc, #556]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0a:	4b89      	ldr	r3, [pc, #548]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1a:	4b86      	ldr	r3, [pc, #536]	; (8005134 <HAL_RCC_OscConfig+0x4e0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d118      	bne.n	8004f58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f26:	4b83      	ldr	r3, [pc, #524]	; (8005134 <HAL_RCC_OscConfig+0x4e0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a82      	ldr	r2, [pc, #520]	; (8005134 <HAL_RCC_OscConfig+0x4e0>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f32:	f7fc fab5 	bl	80014a0 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f3a:	f7fc fab1 	bl	80014a0 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b64      	cmp	r3, #100	; 0x64
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0ed      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4c:	4b79      	ldr	r3, [pc, #484]	; (8005134 <HAL_RCC_OscConfig+0x4e0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_OscConfig+0x31a>
 8004f60:	4b73      	ldr	r3, [pc, #460]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a72      	ldr	r2, [pc, #456]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6c:	e02d      	b.n	8004fca <HAL_RCC_OscConfig+0x376>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x33c>
 8004f76:	4b6e      	ldr	r3, [pc, #440]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a6d      	ldr	r2, [pc, #436]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
 8004f82:	4b6b      	ldr	r3, [pc, #428]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a6a      	ldr	r2, [pc, #424]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	e01c      	b.n	8004fca <HAL_RCC_OscConfig+0x376>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x35e>
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a64      	ldr	r2, [pc, #400]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a61      	ldr	r2, [pc, #388]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	e00b      	b.n	8004fca <HAL_RCC_OscConfig+0x376>
 8004fb2:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a5e      	ldr	r2, [pc, #376]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbe:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d015      	beq.n	8004ffe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fa65 	bl	80014a0 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fc fa61 	bl	80014a0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e09b      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ee      	beq.n	8004fda <HAL_RCC_OscConfig+0x386>
 8004ffc:	e014      	b.n	8005028 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffe:	f7fc fa4f 	bl	80014a0 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fc fa4b 	bl	80014a0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e085      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501c:	4b44      	ldr	r3, [pc, #272]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1ee      	bne.n	8005006 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4b40      	ldr	r3, [pc, #256]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d071      	beq.n	8005126 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005042:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d069      	beq.n	8005122 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d14b      	bne.n	80050ee <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b36      	ldr	r3, [pc, #216]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 800505c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fc fa1d 	bl	80014a0 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fc fa19 	bl	80014a0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e055      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507c:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	019b      	lsls	r3, r3, #6
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	3b01      	subs	r3, #1
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	071b      	lsls	r3, r3, #28
 80050b4:	491e      	ldr	r1, [pc, #120]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fc f9eb 	bl	80014a0 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fc f9e7 	bl	80014a0 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e023      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x47a>
 80050ec:	e01b      	b.n	8005126 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 80050f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc f9d1 	bl	80014a0 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005102:	f7fc f9cd 	bl	80014a0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e009      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCC_OscConfig+0x4dc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x4ae>
 8005120:	e001      	b.n	8005126 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000

08005138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0ce      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005150:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d910      	bls.n	8005180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515e:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 020f 	bic.w	r2, r3, #15
 8005166:	4964      	ldr	r1, [pc, #400]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b62      	ldr	r3, [pc, #392]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0b6      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005198:	4b58      	ldr	r3, [pc, #352]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b0:	4b52      	ldr	r3, [pc, #328]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a51      	ldr	r2, [pc, #324]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b4f      	ldr	r3, [pc, #316]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	494c      	ldr	r1, [pc, #304]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d040      	beq.n	800525c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d107      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d115      	bne.n	800521a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07d      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fa:	4b40      	ldr	r3, [pc, #256]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e071      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800520a:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e069      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 0203 	bic.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4935      	ldr	r1, [pc, #212]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fc f938 	bl	80014a0 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005232:	e00a      	b.n	800524a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005234:	f7fc f934 	bl	80014a0 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e051      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 020c 	and.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	429a      	cmp	r2, r3
 800525a:	d1eb      	bne.n	8005234 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d210      	bcs.n	800528c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 020f 	bic.w	r2, r3, #15
 8005272:	4921      	ldr	r1, [pc, #132]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e030      	b.n	80052ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b18      	ldr	r3, [pc, #96]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4915      	ldr	r1, [pc, #84]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	490d      	ldr	r1, [pc, #52]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ca:	f000 f81d 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052ce:	4601      	mov	r1, r0
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	4a09      	ldr	r2, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x1c8>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	fa21 f303 	lsr.w	r3, r1, r3
 80052e2:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_RCC_ClockConfig+0x1cc>)
 80052e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f005 f9ac 	bl	800a644 <HAL_InitTick>

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023c00 	.word	0x40023c00
 80052fc:	40023800 	.word	0x40023800
 8005300:	0800c60c 	.word	0x0800c60c
 8005304:	2000002c 	.word	0x2000002c

08005308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	2300      	movs	r3, #0
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800531e:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d007      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x32>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d008      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x38>
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 808d 	bne.w	800544e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005336:	60bb      	str	r3, [r7, #8]
       break;
 8005338:	e08c      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533a:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <HAL_RCC_GetSysClockFreq+0x160>)
 800533c:	60bb      	str	r3, [r7, #8]
      break;
 800533e:	e089      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005340:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005348:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800534a:	4b45      	ldr	r3, [pc, #276]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d023      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005356:	4b42      	ldr	r3, [pc, #264]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	f04f 0400 	mov.w	r4, #0
 8005360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	ea03 0501 	and.w	r5, r3, r1
 800536c:	ea04 0602 	and.w	r6, r4, r2
 8005370:	4a3d      	ldr	r2, [pc, #244]	; (8005468 <HAL_RCC_GetSysClockFreq+0x160>)
 8005372:	fb02 f106 	mul.w	r1, r2, r6
 8005376:	2200      	movs	r2, #0
 8005378:	fb02 f205 	mul.w	r2, r2, r5
 800537c:	440a      	add	r2, r1
 800537e:	493a      	ldr	r1, [pc, #232]	; (8005468 <HAL_RCC_GetSysClockFreq+0x160>)
 8005380:	fba5 0101 	umull	r0, r1, r5, r1
 8005384:	1853      	adds	r3, r2, r1
 8005386:	4619      	mov	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f04f 0400 	mov.w	r4, #0
 800538e:	461a      	mov	r2, r3
 8005390:	4623      	mov	r3, r4
 8005392:	f7fa ff55 	bl	8000240 <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e049      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	ea03 0501 	and.w	r5, r3, r1
 80053b4:	ea04 0602 	and.w	r6, r4, r2
 80053b8:	4629      	mov	r1, r5
 80053ba:	4632      	mov	r2, r6
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	0154      	lsls	r4, r2, #5
 80053c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053ca:	014b      	lsls	r3, r1, #5
 80053cc:	4619      	mov	r1, r3
 80053ce:	4622      	mov	r2, r4
 80053d0:	1b49      	subs	r1, r1, r5
 80053d2:	eb62 0206 	sbc.w	r2, r2, r6
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f04f 0400 	mov.w	r4, #0
 80053de:	0194      	lsls	r4, r2, #6
 80053e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053e4:	018b      	lsls	r3, r1, #6
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	eb64 0402 	sbc.w	r4, r4, r2
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	00e2      	lsls	r2, r4, #3
 80053f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053fa:	00d9      	lsls	r1, r3, #3
 80053fc:	460b      	mov	r3, r1
 80053fe:	4614      	mov	r4, r2
 8005400:	195b      	adds	r3, r3, r5
 8005402:	eb44 0406 	adc.w	r4, r4, r6
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	02a2      	lsls	r2, r4, #10
 8005410:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005414:	0299      	lsls	r1, r3, #10
 8005416:	460b      	mov	r3, r1
 8005418:	4614      	mov	r4, r2
 800541a:	4618      	mov	r0, r3
 800541c:	4621      	mov	r1, r4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	f7fa ff0a 	bl	8000240 <__aeabi_uldivmod>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCC_GetSysClockFreq+0x158>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	3301      	adds	r3, #1
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	60bb      	str	r3, [r7, #8]
      break;
 800544c:	e002      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005450:	60bb      	str	r3, [r7, #8]
      break;
 8005452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005454:	68bb      	ldr	r3, [r7, #8]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	017d7840 	.word	0x017d7840

0800546c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCC_GetHCLKFreq+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2000002c 	.word	0x2000002c

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005488:	f7ff fff0 	bl	800546c <HAL_RCC_GetHCLKFreq>
 800548c:	4601      	mov	r1, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0a9b      	lsrs	r3, r3, #10
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	0800c61c 	.word	0x0800c61c

080054ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054b0:	f7ff ffdc 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b4:	4601      	mov	r1, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0b5b      	lsrs	r3, r3, #13
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4a03      	ldr	r2, [pc, #12]	; (80054d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800c61c 	.word	0x0800c61c

080054d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	220f      	movs	r2, #15
 80054e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054e4:	4b12      	ldr	r3, [pc, #72]	; (8005530 <HAL_RCC_GetClockConfig+0x5c>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0203 	and.w	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <HAL_RCC_GetClockConfig+0x5c>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <HAL_RCC_GetClockConfig+0x5c>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_GetClockConfig+0x5c>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	08db      	lsrs	r3, r3, #3
 800550e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <HAL_RCC_GetClockConfig+0x60>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40023800 	.word	0x40023800
 8005534:	40023c00 	.word	0x40023c00

08005538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005560:	4b69      	ldr	r3, [pc, #420]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a68      	ldr	r2, [pc, #416]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800556a:	6093      	str	r3, [r2, #8]
 800556c:	4b66      	ldr	r3, [pc, #408]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	4964      	ldr	r1, [pc, #400]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005582:	2301      	movs	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005592:	4b5d      	ldr	r3, [pc, #372]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	4959      	ldr	r1, [pc, #356]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b0:	d101      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055be:	2301      	movs	r3, #1
 80055c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055ce:	4b4e      	ldr	r3, [pc, #312]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	494a      	ldr	r1, [pc, #296]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ec:	d101      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 808b 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	4a39      	ldr	r2, [pc, #228]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005626:	6413      	str	r3, [r2, #64]	; 0x40
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005634:	4b35      	ldr	r3, [pc, #212]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a34      	ldr	r2, [pc, #208]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005640:	f7fb ff2e 	bl	80014a0 <HAL_GetTick>
 8005644:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005646:	e008      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fb ff2a 	bl	80014a0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e38d      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005666:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d035      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d02e      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005684:	4b20      	ldr	r3, [pc, #128]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d114      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fb fef2 	bl	80014a0 <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056be:	e00a      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fb feee 	bl	80014a0 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e34f      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ee      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ee:	d111      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056fe:	400b      	ands	r3, r1
 8005700:	4901      	ldr	r1, [pc, #4]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	e00b      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005708:	40023800 	.word	0x40023800
 800570c:	40007000 	.word	0x40007000
 8005710:	0ffffcff 	.word	0x0ffffcff
 8005714:	4bb3      	ldr	r3, [pc, #716]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4ab2      	ldr	r2, [pc, #712]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571e:	6093      	str	r3, [r2, #8]
 8005720:	4bb0      	ldr	r3, [pc, #704]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005722:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572c:	49ad      	ldr	r1, [pc, #692]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572e:	4313      	orrs	r3, r2
 8005730:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	d010      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800573e:	4ba9      	ldr	r3, [pc, #676]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005744:	4aa7      	ldr	r2, [pc, #668]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800574e:	4ba5      	ldr	r3, [pc, #660]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005750:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	49a2      	ldr	r1, [pc, #648]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576c:	4b9d      	ldr	r3, [pc, #628]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	499a      	ldr	r1, [pc, #616]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800578e:	4b95      	ldr	r3, [pc, #596]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579c:	4991      	ldr	r1, [pc, #580]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b0:	4b8c      	ldr	r3, [pc, #560]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057be:	4989      	ldr	r1, [pc, #548]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057d2:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4980      	ldr	r1, [pc, #512]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f4:	4b7b      	ldr	r3, [pc, #492]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	4978      	ldr	r1, [pc, #480]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005816:	4b73      	ldr	r3, [pc, #460]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f023 020c 	bic.w	r2, r3, #12
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005824:	496f      	ldr	r1, [pc, #444]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005838:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	4967      	ldr	r1, [pc, #412]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800585a:	4b62      	ldr	r3, [pc, #392]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005868:	495e      	ldr	r1, [pc, #376]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	4956      	ldr	r1, [pc, #344]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800589e:	4b51      	ldr	r3, [pc, #324]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	494d      	ldr	r1, [pc, #308]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058c0:	4b48      	ldr	r3, [pc, #288]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	4945      	ldr	r1, [pc, #276]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058e2:	4b40      	ldr	r3, [pc, #256]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f0:	493c      	ldr	r1, [pc, #240]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005904:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005912:	4934      	ldr	r1, [pc, #208]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005934:	492b      	ldr	r1, [pc, #172]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005944:	d101      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005946:	2301      	movs	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	491b      	ldr	r1, [pc, #108]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005998:	4912      	ldr	r1, [pc, #72]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059bc:	4909      	ldr	r1, [pc, #36]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	4985      	ldr	r1, [pc, #532]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059fc:	4b80      	ldr	r3, [pc, #512]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0c:	497c      	ldr	r1, [pc, #496]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d005      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a22:	f040 80d6 	bne.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a26:	4b76      	ldr	r3, [pc, #472]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a75      	ldr	r2, [pc, #468]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fb fd35 	bl	80014a0 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a3a:	f7fb fd31 	bl	80014a0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	; 0x64
 8005a46:	d901      	bls.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e194      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a4c:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d021      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11d      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a6c:	4b64      	ldr	r3, [pc, #400]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a72:	0c1b      	lsrs	r3, r3, #16
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a7a:	4b61      	ldr	r3, [pc, #388]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a80:	0e1b      	lsrs	r3, r3, #24
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	019a      	lsls	r2, r3, #6
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	071b      	lsls	r3, r3, #28
 8005aa0:	4957      	ldr	r1, [pc, #348]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02e      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad2:	d129      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae8:	0f1b      	lsrs	r3, r3, #28
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	019a      	lsls	r2, r3, #6
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	431a      	orrs	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	071b      	lsls	r3, r3, #28
 8005b08:	493d      	ldr	r1, [pc, #244]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b10:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b16:	f023 021f 	bic.w	r2, r3, #31
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4937      	ldr	r1, [pc, #220]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	0e1b      	lsrs	r3, r3, #24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b48:	0f1b      	lsrs	r3, r3, #28
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	019a      	lsls	r2, r3, #6
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	071b      	lsls	r3, r3, #28
 8005b68:	4925      	ldr	r1, [pc, #148]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	019a      	lsls	r2, r3, #6
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	071b      	lsls	r3, r3, #28
 8005b98:	4919      	ldr	r1, [pc, #100]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bac:	f7fb fc78 	bl	80014a0 <HAL_GetTick>
 8005bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bb4:	f7fb fc74 	bl	80014a0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0d7      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 80cd 	bne.w	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fb fc5b 	bl	80014a0 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bee:	f7fb fc57 	bl	80014a0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b64      	cmp	r3, #100	; 0x64
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0ba      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c04:	4b5e      	ldr	r3, [pc, #376]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c10:	d0ed      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02e      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d12a      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c3a:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c48:	4b4d      	ldr	r3, [pc, #308]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	0f1b      	lsrs	r3, r3, #28
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	019a      	lsls	r2, r3, #6
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	061b      	lsls	r3, r3, #24
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	071b      	lsls	r3, r3, #28
 8005c6e:	4944      	ldr	r1, [pc, #272]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c76:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	493d      	ldr	r1, [pc, #244]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d022      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca4:	d11d      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca6:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cb4:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	0f1b      	lsrs	r3, r3, #28
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	019a      	lsls	r2, r3, #6
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	061b      	lsls	r3, r3, #24
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	4929      	ldr	r1, [pc, #164]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d028      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cfc:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	0c1b      	lsrs	r3, r3, #16
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	019a      	lsls	r2, r3, #6
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	431a      	orrs	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	071b      	lsls	r3, r3, #28
 8005d22:	4917      	ldr	r1, [pc, #92]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4911      	ldr	r1, [pc, #68]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4c:	f7fb fba8 	bl	80014a0 <HAL_GetTick>
 8005d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d54:	f7fb fba4 	bl	80014a0 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e007      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d72:	d1ef      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e025      	b.n	8005de4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f004 fc3f 	bl	800a630 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f001 fa1d 	bl	8007204 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	f001 fa87 	bl	80072e8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d101      	bne.n	8005e08 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	e018      	b.n	8005e3a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fae5 	bl	80073e8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d104      	bne.n	8005e30 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2205      	movs	r2, #5
 8005e2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005e2e:	e003      	b.n	8005e38 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d101      	bne.n	8005e5c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e00e      	b.n	8005e7a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fadd 	bl	800742a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e01d      	b.n	8005ed0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f815 	bl	8005ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f000 f985 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_TIM_Base_Start_IT+0x50>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d00b      	beq.n	8005f2e <HAL_TIM_Base_Start_IT+0x42>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d007      	beq.n	8005f2e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	00010007 	.word	0x00010007

08005f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0202 	mvn.w	r2, #2
 8005f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f905 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8f7 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f908 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0204 	mvn.w	r2, #4
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8db 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8cd 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f8de 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b08      	cmp	r3, #8
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0208 	mvn.w	r2, #8
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2204      	movs	r2, #4
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8b1 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8a3 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8b4 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b10      	cmp	r3, #16
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b10      	cmp	r3, #16
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0210 	mvn.w	r2, #16
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2208      	movs	r2, #8
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f887 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f879 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f88a 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0201 	mvn.w	r2, #1
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f004 f808 	bl	800a0d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	d10e      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d107      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f91a 	bl	8006324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fe:	d10e      	bne.n	800611e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d107      	bne.n	800611e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f90d 	bl	8006338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d10e      	bne.n	800614a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d107      	bne.n	800614a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f838 	bl	80061ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b20      	cmp	r3, #32
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b20      	cmp	r3, #32
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0220 	mvn.w	r2, #32
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8cd 	bl	8006310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a40      	ldr	r2, [pc, #256]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3c      	ldr	r2, [pc, #240]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3a      	ldr	r2, [pc, #232]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d027      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <TIM_Base_SetConfig+0x128>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <TIM_Base_SetConfig+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <TIM_Base_SetConfig+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <TIM_Base_SetConfig+0x134>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a24      	ldr	r2, [pc, #144]	; (8006308 <TIM_Base_SetConfig+0x138>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a23      	ldr	r2, [pc, #140]	; (800630c <TIM_Base_SetConfig+0x13c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40001800 	.word	0x40001800
 8006308:	40001c00 	.word	0x40001c00
 800630c:	40002000 	.word	0x40002000

08006310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e040      	b.n	80063e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f004 f808 	bl	800a384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2224      	movs	r2, #36	; 0x24
 8006378:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa66 	bl	800685c <UART_SetConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fcfe 	bl	8006da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fd85 	bl	8006ee8 <UART_CheckIdleState>
 80063de:	4603      	mov	r3, r0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d164      	bne.n	80064c8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_UART_Transmit_DMA+0x22>
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e05d      	b.n	80064ca <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_UART_Transmit_DMA+0x34>
 8006418:	2302      	movs	r3, #2
 800641a:	e056      	b.n	80064ca <HAL_UART_Transmit_DMA+0xe2>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2221      	movs	r2, #33	; 0x21
 8006444:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02a      	beq.n	80064a4 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006452:	4a20      	ldr	r2, [pc, #128]	; (80064d4 <HAL_UART_Transmit_DMA+0xec>)
 8006454:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645a:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <HAL_UART_Transmit_DMA+0xf0>)
 800645c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_UART_Transmit_DMA+0xf4>)
 8006464:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646a:	2200      	movs	r2, #0
 800646c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	4619      	mov	r1, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3328      	adds	r3, #40	; 0x28
 800647e:	461a      	mov	r2, r3
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	f7fb ffb7 	bl	80023f4 <HAL_DMA_Start_IT>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2210      	movs	r2, #16
 8006490:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e012      	b.n	80064ca <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2240      	movs	r2, #64	; 0x40
 80064aa:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064c2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	08007041 	.word	0x08007041
 80064d8:	08007091 	.word	0x08007091
 80064dc:	0800712d 	.word	0x0800712d

080064e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d16c      	bne.n	80065d0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Receive_DMA+0x22>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e065      	b.n	80065d2 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UART_Receive_DMA+0x34>
 8006510:	2302      	movs	r3, #2
 8006512:	e05e      	b.n	80065d2 <HAL_UART_Receive_DMA+0xf2>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2222      	movs	r2, #34	; 0x22
 8006534:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02a      	beq.n	8006594 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006542:	4a26      	ldr	r2, [pc, #152]	; (80065dc <HAL_UART_Receive_DMA+0xfc>)
 8006544:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654a:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <HAL_UART_Receive_DMA+0x100>)
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006552:	4a24      	ldr	r2, [pc, #144]	; (80065e4 <HAL_UART_Receive_DMA+0x104>)
 8006554:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800655a:	2200      	movs	r2, #0
 800655c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	4619      	mov	r1, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	461a      	mov	r2, r3
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	f7fb ff3f 	bl	80023f4 <HAL_DMA_Start_IT>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2210      	movs	r2, #16
 8006580:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e01e      	b.n	80065d2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065aa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	080070ad 	.word	0x080070ad
 80065e0:	08007111 	.word	0x08007111
 80065e4:	0800712d 	.word	0x0800712d

080065e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d113      	bne.n	800663e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00e      	beq.n	800663e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80eb 	beq.w	800680a <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
      }
      return;
 800663c:	e0e5      	b.n	800680a <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80c0 	beq.w	80067c6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80b5 	beq.w	80067c6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <HAL_UART_IRQHandler+0x9c>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2201      	movs	r2, #1
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <HAL_UART_IRQHandler+0xc4>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2202      	movs	r2, #2
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a4:	f043 0204 	orr.w	r2, r3, #4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <HAL_UART_IRQHandler+0xec>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2204      	movs	r2, #4
 80066c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066cc:	f043 0202 	orr.w	r2, r3, #2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2208      	movs	r2, #8
 80066f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	f043 0208 	orr.w	r2, r3, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d07f      	beq.n	800680e <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00c      	beq.n	8006732 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d004      	beq.n	8006750 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674c:	2b00      	cmp	r3, #0
 800674e:	d031      	beq.n	80067b4 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc55 	bl	8007000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d123      	bne.n	80067ac <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006772:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d013      	beq.n	80067a4 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006780:	4a26      	ldr	r2, [pc, #152]	; (800681c <HAL_UART_IRQHandler+0x234>)
 8006782:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006788:	4618      	mov	r0, r3
 800678a:	f7fb fe93 	bl	80024b4 <HAL_DMA_Abort_IT>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800679e:	4610      	mov	r0, r2
 80067a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	e00e      	b.n	80067c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f84f 	bl	8006848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	e00a      	b.n	80067c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f84b 	bl	8006848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	e006      	b.n	80067c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f847 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80067c0:	e025      	b.n	800680e <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c2:	bf00      	nop
    return;
 80067c4:	e023      	b.n	800680e <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00d      	beq.n	80067ec <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
    }
    return;
 80067ea:	e012      	b.n	8006812 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <HAL_UART_IRQHandler+0x22c>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d009      	beq.n	8006814 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fce5 	bl	80071d0 <UART_EndTransmit_IT>
    return;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_UART_IRQHandler+0x22c>
      return;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_UART_IRQHandler+0x22c>
    return;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_UART_IRQHandler+0x22c>
    return;
 8006812:	bf00      	nop
  }

}
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	080071a5 	.word	0x080071a5

08006820 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4bb1      	ldr	r3, [pc, #708]	; (8006b50 <UART_SetConfig+0x2f4>)
 800688c:	4013      	ands	r3, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	6939      	ldr	r1, [r7, #16]
 8006894:	430b      	orrs	r3, r1
 8006896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a9f      	ldr	r2, [pc, #636]	; (8006b54 <UART_SetConfig+0x2f8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d121      	bne.n	8006920 <UART_SetConfig+0xc4>
 80068dc:	4b9e      	ldr	r3, [pc, #632]	; (8006b58 <UART_SetConfig+0x2fc>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d816      	bhi.n	8006918 <UART_SetConfig+0xbc>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x94>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006901 	.word	0x08006901
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006907 	.word	0x08006907
 80068fc:	08006913 	.word	0x08006913
 8006900:	2301      	movs	r3, #1
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e151      	b.n	8006baa <UART_SetConfig+0x34e>
 8006906:	2302      	movs	r3, #2
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e14e      	b.n	8006baa <UART_SetConfig+0x34e>
 800690c:	2304      	movs	r3, #4
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e14b      	b.n	8006baa <UART_SetConfig+0x34e>
 8006912:	2308      	movs	r3, #8
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e148      	b.n	8006baa <UART_SetConfig+0x34e>
 8006918:	2310      	movs	r3, #16
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	bf00      	nop
 800691e:	e144      	b.n	8006baa <UART_SetConfig+0x34e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a8d      	ldr	r2, [pc, #564]	; (8006b5c <UART_SetConfig+0x300>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d134      	bne.n	8006994 <UART_SetConfig+0x138>
 800692a:	4b8b      	ldr	r3, [pc, #556]	; (8006b58 <UART_SetConfig+0x2fc>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f003 030c 	and.w	r3, r3, #12
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d829      	bhi.n	800698c <UART_SetConfig+0x130>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0xe4>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006975 	.word	0x08006975
 8006944:	0800698d 	.word	0x0800698d
 8006948:	0800698d 	.word	0x0800698d
 800694c:	0800698d 	.word	0x0800698d
 8006950:	08006981 	.word	0x08006981
 8006954:	0800698d 	.word	0x0800698d
 8006958:	0800698d 	.word	0x0800698d
 800695c:	0800698d 	.word	0x0800698d
 8006960:	0800697b 	.word	0x0800697b
 8006964:	0800698d 	.word	0x0800698d
 8006968:	0800698d 	.word	0x0800698d
 800696c:	0800698d 	.word	0x0800698d
 8006970:	08006987 	.word	0x08006987
 8006974:	2300      	movs	r3, #0
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e117      	b.n	8006baa <UART_SetConfig+0x34e>
 800697a:	2302      	movs	r3, #2
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e114      	b.n	8006baa <UART_SetConfig+0x34e>
 8006980:	2304      	movs	r3, #4
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e111      	b.n	8006baa <UART_SetConfig+0x34e>
 8006986:	2308      	movs	r3, #8
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e10e      	b.n	8006baa <UART_SetConfig+0x34e>
 800698c:	2310      	movs	r3, #16
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	bf00      	nop
 8006992:	e10a      	b.n	8006baa <UART_SetConfig+0x34e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a71      	ldr	r2, [pc, #452]	; (8006b60 <UART_SetConfig+0x304>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d120      	bne.n	80069e0 <UART_SetConfig+0x184>
 800699e:	4b6e      	ldr	r3, [pc, #440]	; (8006b58 <UART_SetConfig+0x2fc>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d00f      	beq.n	80069cc <UART_SetConfig+0x170>
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d802      	bhi.n	80069b6 <UART_SetConfig+0x15a>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <UART_SetConfig+0x164>
 80069b4:	e010      	b.n	80069d8 <UART_SetConfig+0x17c>
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d005      	beq.n	80069c6 <UART_SetConfig+0x16a>
 80069ba:	2b30      	cmp	r3, #48	; 0x30
 80069bc:	d009      	beq.n	80069d2 <UART_SetConfig+0x176>
 80069be:	e00b      	b.n	80069d8 <UART_SetConfig+0x17c>
 80069c0:	2300      	movs	r3, #0
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e0f1      	b.n	8006baa <UART_SetConfig+0x34e>
 80069c6:	2302      	movs	r3, #2
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e0ee      	b.n	8006baa <UART_SetConfig+0x34e>
 80069cc:	2304      	movs	r3, #4
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e0eb      	b.n	8006baa <UART_SetConfig+0x34e>
 80069d2:	2308      	movs	r3, #8
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e0e8      	b.n	8006baa <UART_SetConfig+0x34e>
 80069d8:	2310      	movs	r3, #16
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	bf00      	nop
 80069de:	e0e4      	b.n	8006baa <UART_SetConfig+0x34e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5f      	ldr	r2, [pc, #380]	; (8006b64 <UART_SetConfig+0x308>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d120      	bne.n	8006a2c <UART_SetConfig+0x1d0>
 80069ea:	4b5b      	ldr	r3, [pc, #364]	; (8006b58 <UART_SetConfig+0x2fc>)
 80069ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d00f      	beq.n	8006a18 <UART_SetConfig+0x1bc>
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d802      	bhi.n	8006a02 <UART_SetConfig+0x1a6>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <UART_SetConfig+0x1b0>
 8006a00:	e010      	b.n	8006a24 <UART_SetConfig+0x1c8>
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d005      	beq.n	8006a12 <UART_SetConfig+0x1b6>
 8006a06:	2bc0      	cmp	r3, #192	; 0xc0
 8006a08:	d009      	beq.n	8006a1e <UART_SetConfig+0x1c2>
 8006a0a:	e00b      	b.n	8006a24 <UART_SetConfig+0x1c8>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e0cb      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e0c8      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e0c5      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e0c2      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a24:	2310      	movs	r3, #16
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	bf00      	nop
 8006a2a:	e0be      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4d      	ldr	r2, [pc, #308]	; (8006b68 <UART_SetConfig+0x30c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d124      	bne.n	8006a80 <UART_SetConfig+0x224>
 8006a36:	4b48      	ldr	r3, [pc, #288]	; (8006b58 <UART_SetConfig+0x2fc>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a44:	d012      	beq.n	8006a6c <UART_SetConfig+0x210>
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4a:	d802      	bhi.n	8006a52 <UART_SetConfig+0x1f6>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <UART_SetConfig+0x204>
 8006a50:	e012      	b.n	8006a78 <UART_SetConfig+0x21c>
 8006a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a56:	d006      	beq.n	8006a66 <UART_SetConfig+0x20a>
 8006a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a5c:	d009      	beq.n	8006a72 <UART_SetConfig+0x216>
 8006a5e:	e00b      	b.n	8006a78 <UART_SetConfig+0x21c>
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e0a1      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a66:	2302      	movs	r3, #2
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e09e      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e09b      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a72:	2308      	movs	r3, #8
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e098      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	bf00      	nop
 8006a7e:	e094      	b.n	8006baa <UART_SetConfig+0x34e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a39      	ldr	r2, [pc, #228]	; (8006b6c <UART_SetConfig+0x310>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d124      	bne.n	8006ad4 <UART_SetConfig+0x278>
 8006a8a:	4b33      	ldr	r3, [pc, #204]	; (8006b58 <UART_SetConfig+0x2fc>)
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a98:	d012      	beq.n	8006ac0 <UART_SetConfig+0x264>
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9e:	d802      	bhi.n	8006aa6 <UART_SetConfig+0x24a>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <UART_SetConfig+0x258>
 8006aa4:	e012      	b.n	8006acc <UART_SetConfig+0x270>
 8006aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aaa:	d006      	beq.n	8006aba <UART_SetConfig+0x25e>
 8006aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ab0:	d009      	beq.n	8006ac6 <UART_SetConfig+0x26a>
 8006ab2:	e00b      	b.n	8006acc <UART_SetConfig+0x270>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e077      	b.n	8006baa <UART_SetConfig+0x34e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e074      	b.n	8006baa <UART_SetConfig+0x34e>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e071      	b.n	8006baa <UART_SetConfig+0x34e>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e06e      	b.n	8006baa <UART_SetConfig+0x34e>
 8006acc:	2310      	movs	r3, #16
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	bf00      	nop
 8006ad2:	e06a      	b.n	8006baa <UART_SetConfig+0x34e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <UART_SetConfig+0x314>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d124      	bne.n	8006b28 <UART_SetConfig+0x2cc>
 8006ade:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <UART_SetConfig+0x2fc>)
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d012      	beq.n	8006b14 <UART_SetConfig+0x2b8>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d802      	bhi.n	8006afa <UART_SetConfig+0x29e>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <UART_SetConfig+0x2ac>
 8006af8:	e012      	b.n	8006b20 <UART_SetConfig+0x2c4>
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	d006      	beq.n	8006b0e <UART_SetConfig+0x2b2>
 8006b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b04:	d009      	beq.n	8006b1a <UART_SetConfig+0x2be>
 8006b06:	e00b      	b.n	8006b20 <UART_SetConfig+0x2c4>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e04d      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e04a      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b14:	2304      	movs	r3, #4
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e047      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e044      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b20:	2310      	movs	r3, #16
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	bf00      	nop
 8006b26:	e040      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <UART_SetConfig+0x318>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d139      	bne.n	8006ba6 <UART_SetConfig+0x34a>
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <UART_SetConfig+0x2fc>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b40:	d027      	beq.n	8006b92 <UART_SetConfig+0x336>
 8006b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b46:	d817      	bhi.n	8006b78 <UART_SetConfig+0x31c>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01c      	beq.n	8006b86 <UART_SetConfig+0x32a>
 8006b4c:	e027      	b.n	8006b9e <UART_SetConfig+0x342>
 8006b4e:	bf00      	nop
 8006b50:	efff69f3 	.word	0xefff69f3
 8006b54:	40011000 	.word	0x40011000
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	40004c00 	.word	0x40004c00
 8006b68:	40005000 	.word	0x40005000
 8006b6c:	40011400 	.word	0x40011400
 8006b70:	40007800 	.word	0x40007800
 8006b74:	40007c00 	.word	0x40007c00
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7c:	d006      	beq.n	8006b8c <UART_SetConfig+0x330>
 8006b7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b82:	d009      	beq.n	8006b98 <UART_SetConfig+0x33c>
 8006b84:	e00b      	b.n	8006b9e <UART_SetConfig+0x342>
 8006b86:	2300      	movs	r3, #0
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e00e      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e00b      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b92:	2304      	movs	r3, #4
 8006b94:	77fb      	strb	r3, [r7, #31]
 8006b96:	e008      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e005      	b.n	8006baa <UART_SetConfig+0x34e>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	77fb      	strb	r3, [r7, #31]
 8006ba2:	bf00      	nop
 8006ba4:	e001      	b.n	8006baa <UART_SetConfig+0x34e>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb2:	d17c      	bne.n	8006cae <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006bb4:	7ffb      	ldrb	r3, [r7, #31]
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d859      	bhi.n	8006c6e <UART_SetConfig+0x412>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x364>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c6f 	.word	0x08006c6f
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006c6f 	.word	0x08006c6f
 8006bd8:	08006c6f 	.word	0x08006c6f
 8006bdc:	08006c6f 	.word	0x08006c6f
 8006be0:	08006c57 	.word	0x08006c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006be4:	f7fe fc4e 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8006be8:	4603      	mov	r3, r0
 8006bea:	005a      	lsls	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	441a      	add	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e038      	b.n	8006c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c02:	f7fe fc53 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 8006c06:	4603      	mov	r3, r0
 8006c08:	005a      	lsls	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	61bb      	str	r3, [r7, #24]
        break;
 8006c1e:	e029      	b.n	8006c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	085a      	lsrs	r2, r3, #1
 8006c26:	4b5d      	ldr	r3, [pc, #372]	; (8006d9c <UART_SetConfig+0x540>)
 8006c28:	4413      	add	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6852      	ldr	r2, [r2, #4]
 8006c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	61bb      	str	r3, [r7, #24]
        break;
 8006c36:	e01d      	b.n	8006c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c38:	f7fe fb66 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	005a      	lsls	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	441a      	add	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	61bb      	str	r3, [r7, #24]
        break;
 8006c54:	e00e      	b.n	8006c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	61bb      	str	r3, [r7, #24]
        break;
 8006c6c:	e002      	b.n	8006c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
        break;
 8006c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d916      	bls.n	8006ca8 <UART_SetConfig+0x44c>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d212      	bcs.n	8006ca8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f023 030f 	bic.w	r3, r3, #15
 8006c8a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	085b      	lsrs	r3, r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	89fa      	ldrh	r2, [r7, #14]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	e06e      	b.n	8006d86 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
 8006cac:	e06b      	b.n	8006d86 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d857      	bhi.n	8006d64 <UART_SetConfig+0x508>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x460>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d65 	.word	0x08006d65
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006d65 	.word	0x08006d65
 8006cd4:	08006d65 	.word	0x08006d65
 8006cd8:	08006d65 	.word	0x08006d65
 8006cdc:	08006d4d 	.word	0x08006d4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ce0:	f7fe fbd0 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	441a      	add	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	61bb      	str	r3, [r7, #24]
        break;
 8006cfa:	e036      	b.n	8006d6a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006cfc:	f7fe fbd6 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	61bb      	str	r3, [r7, #24]
        break;
 8006d16:	e028      	b.n	8006d6a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	085a      	lsrs	r2, r3, #1
 8006d1e:	4b20      	ldr	r3, [pc, #128]	; (8006da0 <UART_SetConfig+0x544>)
 8006d20:	4413      	add	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6852      	ldr	r2, [r2, #4]
 8006d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	61bb      	str	r3, [r7, #24]
        break;
 8006d2e:	e01c      	b.n	8006d6a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d30:	f7fe faea 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006d34:	4602      	mov	r2, r0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	61bb      	str	r3, [r7, #24]
        break;
 8006d4a:	e00e      	b.n	8006d6a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	61bb      	str	r3, [r7, #24]
        break;
 8006d62:	e002      	b.n	8006d6a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
        break;
 8006d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d908      	bls.n	8006d82 <UART_SetConfig+0x526>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d204      	bcs.n	8006d82 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e001      	b.n	8006d86 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	01e84800 	.word	0x01e84800
 8006da0:	00f42400 	.word	0x00f42400

08006da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01a      	beq.n	8006eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea2:	d10a      	bne.n	8006eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  }
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ef6:	f7fa fad3 	bl	80014a0 <HAL_GetTick>
 8006efa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d10e      	bne.n	8006f28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f814 	bl	8006f46 <UART_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e00a      	b.n	8006f3e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f56:	e02a      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d026      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f60:	f7fa fa9e 	bl	80014a0 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d11b      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00f      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d0c5      	beq.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fec:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007056:	d014      	beq.n	8007082 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800706e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800707e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007080:	e002      	b.n	8007088 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f002 fff2 	bl	800a06c <HAL_UART_TxCpltCallback>
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f002 fffa 	bl	800a098 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c2:	d01e      	beq.n	8007102 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070da:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fb8c 	bl	8006820 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fb88 	bl	8006834 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007144:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d109      	bne.n	8007168 <UART_DMAError+0x3c>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b21      	cmp	r3, #33	; 0x21
 8007158:	d106      	bne.n	8007168 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2200      	movs	r2, #0
 800715e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007162:	6978      	ldr	r0, [r7, #20]
 8007164:	f7ff ff37 	bl	8006fd6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d109      	bne.n	800718a <UART_DMAError+0x5e>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b22      	cmp	r3, #34	; 0x22
 800717a:	d106      	bne.n	800718a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007184:	6978      	ldr	r0, [r7, #20]
 8007186:	f7ff ff3b 	bl	8007000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718e:	f043 0210 	orr.w	r2, r3, #16
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff fb56 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719c:	bf00      	nop
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fb40 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 ff39 	bl	800a06c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d027      	beq.n	800726e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <FMC_SDRAM_Init+0xe0>)
 8007228:	4013      	ands	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007234:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800723a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007240:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007246:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800724c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007252:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007258:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800725e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e032      	b.n	80072d4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007284:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800728a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <FMC_SDRAM_Init+0xe0>)
 800729c:	4013      	ands	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072a8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80072ae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80072b4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80072ba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80072c0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	ffff8000 	.word	0xffff8000

080072e8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d02e      	beq.n	8007360 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800730e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	3b01      	subs	r3, #1
 800731c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800731e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	3b01      	subs	r3, #1
 8007326:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007328:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007332:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	3b01      	subs	r3, #1
 800733a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800733c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	3b01      	subs	r3, #1
 8007344:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007346:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	3b01      	subs	r3, #1
 800734e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007350:	4313      	orrs	r3, r2
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	609a      	str	r2, [r3, #8]
 800735e:	e039      	b.n	80073d4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <FMC_SDRAM_Timing_Init+0xfc>)
 800736a:	4013      	ands	r3, r2
 800736c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	3b01      	subs	r3, #1
 8007374:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	3b01      	subs	r3, #1
 800737c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800737e:	4313      	orrs	r3, r2
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007392:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	3b01      	subs	r3, #1
 80073a0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073a2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80073ac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80073b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	3b01      	subs	r3, #1
 80073be:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073c0:	4313      	orrs	r3, r2
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	ff0f0fff 	.word	0xff0f0fff

080073e8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007400:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	3b01      	subs	r3, #1
 8007408:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800740a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695a      	ldr	r2, [r3, #20]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800745e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007462:	2b84      	cmp	r3, #132	; 0x84
 8007464:	d005      	beq.n	8007472 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	3303      	adds	r3, #3
 8007470:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007484:	f000 fe8c 	bl	80081a0 <vTaskStartScheduler>
  
  return osOK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	bd80      	pop	{r7, pc}

0800748e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800748e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007490:	b087      	sub	sp, #28
 8007492:	af02      	add	r7, sp, #8
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685c      	ldr	r4, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074a4:	b29e      	uxth	r6, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ffcf 	bl	8007450 <makeFreeRtosPriority>
 80074b2:	4602      	mov	r2, r0
 80074b4:	f107 030c 	add.w	r3, r7, #12
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	9200      	str	r2, [sp, #0]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4632      	mov	r2, r6
 80074c0:	4629      	mov	r1, r5
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fc8a 	bl	8007ddc <xTaskCreate>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d001      	beq.n	80074d2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e000      	b.n	80074d4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <osDelay+0x16>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	e000      	b.n	80074f4 <osDelay+0x18>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fe1d 	bl	8008134 <vTaskDelay>
  
  return osOK;
 80074fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f103 0208 	add.w	r2, r3, #8
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f04f 32ff 	mov.w	r2, #4294967295
 800751c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f103 0208 	add.w	r2, r3, #8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f103 0208 	add.w	r2, r3, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d103      	bne.n	80075c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e00c      	b.n	80075e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3308      	adds	r3, #8
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e002      	b.n	80075d4 <vListInsert+0x2e>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d2f6      	bcs.n	80075ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6892      	ldr	r2, [r2, #8]
 800762e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6852      	ldr	r2, [r2, #4]
 8007638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d103      	bne.n	800764c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	b672      	cpsid	i
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	b662      	cpsie	i
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	e7fe      	b.n	8007696 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007698:	f001 fb7e 	bl	8008d98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	441a      	add	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	3b01      	subs	r3, #1
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	441a      	add	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	22ff      	movs	r2, #255	; 0xff
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d114      	bne.n	8007718 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01a      	beq.n	800772c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3310      	adds	r3, #16
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 ff96 	bl	800862c <xTaskRemoveFromEventList>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d012      	beq.n	800772c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <xQueueGenericReset+0xd0>)
 8007708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	e009      	b.n	800772c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3310      	adds	r3, #16
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fef1 	bl	8007504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3324      	adds	r3, #36	; 0x24
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff feec 	bl	8007504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800772c:	f001 fb66 	bl	8008dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007730:	2301      	movs	r3, #1
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <xQueueGenericCreate+0x2c>
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	b672      	cpsid	i
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	b662      	cpsie	i
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e7fe      	b.n	800776a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e004      	b.n	8007782 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	fb02 f303 	mul.w	r3, r2, r3
 8007780:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3348      	adds	r3, #72	; 0x48
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fbe6 	bl	8008f58 <pvPortMalloc>
 800778c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	3348      	adds	r3, #72	; 0x48
 8007798:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800779a:	79fa      	ldrb	r2, [r7, #7]
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f805 	bl	80077b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077ac:	69bb      	ldr	r3, [r7, #24]
	}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3720      	adds	r7, #32
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	e002      	b.n	80077d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077e4:	2101      	movs	r1, #1
 80077e6:	69b8      	ldr	r0, [r7, #24]
 80077e8:	f7ff ff40 	bl	800766c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	; 0x38
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <xQueueGenericSend+0x34>
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28
 8007826:	e7fe      	b.n	8007826 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <xQueueGenericSend+0x42>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <xQueueGenericSend+0x46>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <xQueueGenericSend+0x48>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <xQueueGenericSend+0x64>
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
 8007856:	e7fe      	b.n	8007856 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d103      	bne.n	8007866 <xQueueGenericSend+0x72>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <xQueueGenericSend+0x76>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueGenericSend+0x78>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xQueueGenericSend+0x94>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	b672      	cpsid	i
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	b662      	cpsie	i
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	e7fe      	b.n	8007886 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007888:	f001 f874 	bl	8008974 <xTaskGetSchedulerState>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <xQueueGenericSend+0xa4>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <xQueueGenericSend+0xa8>
 8007898:	2301      	movs	r3, #1
 800789a:	e000      	b.n	800789e <xQueueGenericSend+0xaa>
 800789c:	2300      	movs	r3, #0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <xQueueGenericSend+0xc6>
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	b672      	cpsid	i
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	b662      	cpsie	i
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e7fe      	b.n	80078b8 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ba:	f001 fa6d 	bl	8008d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <xQueueGenericSend+0xdc>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d129      	bne.n	8007924 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d6:	f000 f971 	bl	8007bbc <prvCopyDataToQueue>
 80078da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d010      	beq.n	8007906 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	3324      	adds	r3, #36	; 0x24
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fe9f 	bl	800862c <xTaskRemoveFromEventList>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d013      	beq.n	800791c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078f4:	4b3f      	ldr	r3, [pc, #252]	; (80079f4 <xQueueGenericSend+0x200>)
 80078f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	e00a      	b.n	800791c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800790c:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <xQueueGenericSend+0x200>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800791c:	f001 fa6e 	bl	8008dfc <vPortExitCritical>
				return pdPASS;
 8007920:	2301      	movs	r3, #1
 8007922:	e063      	b.n	80079ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800792a:	f001 fa67 	bl	8008dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800792e:	2300      	movs	r3, #0
 8007930:	e05c      	b.n	80079ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007938:	f107 0314 	add.w	r3, r7, #20
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fed9 	bl	80086f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007942:	2301      	movs	r3, #1
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007946:	f001 fa59 	bl	8008dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800794a:	f000 fc73 	bl	8008234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800794e:	f001 fa23 	bl	8008d98 <vPortEnterCritical>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007958:	b25b      	sxtb	r3, r3
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d103      	bne.n	8007968 <xQueueGenericSend+0x174>
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800796e:	b25b      	sxtb	r3, r3
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d103      	bne.n	800797e <xQueueGenericSend+0x18a>
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800797e:	f001 fa3d 	bl	8008dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007982:	1d3a      	adds	r2, r7, #4
 8007984:	f107 0314 	add.w	r3, r7, #20
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fec8 	bl	8008720 <xTaskCheckForTimeOut>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d124      	bne.n	80079e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007998:	f000 fa08 	bl	8007dac <prvIsQueueFull>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d018      	beq.n	80079d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	3310      	adds	r3, #16
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fe18 	bl	80085e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b2:	f000 f993 	bl	8007cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079b6:	f000 fc4b 	bl	8008250 <xTaskResumeAll>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f47f af7c 	bne.w	80078ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079c2:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <xQueueGenericSend+0x200>)
 80079c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	e772      	b.n	80078ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d6:	f000 f981 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079da:	f000 fc39 	bl	8008250 <xTaskResumeAll>
 80079de:	e76c      	b.n	80078ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e2:	f000 f97b 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079e6:	f000 fc33 	bl	8008250 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079ea:	2300      	movs	r3, #0
		}
	}
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3738      	adds	r7, #56	; 0x38
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08c      	sub	sp, #48	; 0x30
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xQueueReceive+0x32>
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	b672      	cpsid	i
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	b662      	cpsie	i
 8007a26:	623b      	str	r3, [r7, #32]
 8007a28:	e7fe      	b.n	8007a28 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d103      	bne.n	8007a38 <xQueueReceive+0x40>
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <xQueueReceive+0x44>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <xQueueReceive+0x46>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <xQueueReceive+0x62>
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	b672      	cpsid	i
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	b662      	cpsie	i
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	e7fe      	b.n	8007a58 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a5a:	f000 ff8b 	bl	8008974 <xTaskGetSchedulerState>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <xQueueReceive+0x72>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <xQueueReceive+0x76>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueReceive+0x78>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10b      	bne.n	8007a8c <xQueueReceive+0x94>
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e7fe      	b.n	8007a8a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a8c:	f001 f984 	bl	8008d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01f      	beq.n	8007adc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa0:	f000 f8f6 	bl	8007c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	1e5a      	subs	r2, r3, #1
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fdb7 	bl	800862c <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b3c      	ldr	r3, [pc, #240]	; (8007bb8 <xQueueReceive+0x1c0>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ad4:	f001 f992 	bl	8008dfc <vPortExitCritical>
				return pdPASS;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e069      	b.n	8007bb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ae2:	f001 f98b 	bl	8008dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e062      	b.n	8007bb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007af0:	f107 0310 	add.w	r3, r7, #16
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fdfd 	bl	80086f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007afe:	f001 f97d 	bl	8008dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b02:	f000 fb97 	bl	8008234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b06:	f001 f947 	bl	8008d98 <vPortEnterCritical>
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <xQueueReceive+0x128>
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d103      	bne.n	8007b36 <xQueueReceive+0x13e>
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b36:	f001 f961 	bl	8008dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b3a:	1d3a      	adds	r2, r7, #4
 8007b3c:	f107 0310 	add.w	r3, r7, #16
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fdec 	bl	8008720 <xTaskCheckForTimeOut>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d123      	bne.n	8007b96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b50:	f000 f916 	bl	8007d80 <prvIsQueueEmpty>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	3324      	adds	r3, #36	; 0x24
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fd3c 	bl	80085e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6a:	f000 f8b7 	bl	8007cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b6e:	f000 fb6f 	bl	8008250 <xTaskResumeAll>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d189      	bne.n	8007a8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <xQueueReceive+0x1c0>)
 8007b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	e780      	b.n	8007a8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8c:	f000 f8a6 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b90:	f000 fb5e 	bl	8008250 <xTaskResumeAll>
 8007b94:	e77a      	b.n	8007a8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b98:	f000 f8a0 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9c:	f000 fb58 	bl	8008250 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba2:	f000 f8ed 	bl	8007d80 <prvIsQueueEmpty>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f43f af6f 	beq.w	8007a8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3730      	adds	r7, #48	; 0x30
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14d      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fee2 	bl	80089b0 <xTaskPriorityDisinherit>
 8007bec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	605a      	str	r2, [r3, #4]
 8007bf4:	e043      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d119      	bne.n	8007c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6898      	ldr	r0, [r3, #8]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	461a      	mov	r2, r3
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	f002 fe44 	bl	800a894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d32b      	bcc.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
 8007c2e:	e026      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68d8      	ldr	r0, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	f002 fe2a 	bl	800a894 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	425b      	negs	r3, r3
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d207      	bcs.n	8007c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	425b      	negs	r3, r3
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d105      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c86:	697b      	ldr	r3, [r7, #20]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	441a      	add	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d303      	bcc.n	8007cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68d9      	ldr	r1, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f002 fde0 	bl	800a894 <memcpy>
	}
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ce4:	f001 f858 	bl	8008d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf0:	e011      	b.n	8007d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	; 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fc94 	bl	800862c <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d0a:	f000 fd6d 	bl	80087e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dce9      	bgt.n	8007cf2 <prvUnlockQueue+0x16>
 8007d1e:	e000      	b.n	8007d22 <prvUnlockQueue+0x46>
					break;
 8007d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d2a:	f001 f867 	bl	8008dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d2e:	f001 f833 	bl	8008d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d3a:	e011      	b.n	8007d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d012      	beq.n	8007d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3310      	adds	r3, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fc6f 	bl	800862c <xTaskRemoveFromEventList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d54:	f000 fd48 	bl	80087e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dce9      	bgt.n	8007d3c <prvUnlockQueue+0x60>
 8007d68:	e000      	b.n	8007d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d74:	f001 f842 	bl	8008dfc <vPortExitCritical>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d88:	f001 f806 	bl	8008d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e001      	b.n	8007d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d9e:	f001 f82d 	bl	8008dfc <vPortExitCritical>

	return xReturn;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db4:	f000 fff0 	bl	8008d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d102      	bne.n	8007dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dce:	f001 f815 	bl	8008dfc <vPortExitCritical>

	return xReturn;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	; 0x30
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	4613      	mov	r3, r2
 8007dea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f8b1 	bl	8008f58 <pvPortMalloc>
 8007df6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007dfe:	2054      	movs	r0, #84	; 0x54
 8007e00:	f001 f8aa 	bl	8008f58 <pvPortMalloc>
 8007e04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
 8007e12:	e005      	b.n	8007e20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e14:	6978      	ldr	r0, [r7, #20]
 8007e16:	f001 f967 	bl	80090e8 <vPortFree>
 8007e1a:	e001      	b.n	8007e20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d013      	beq.n	8007e4e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f80e 	bl	8007e5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e42:	69f8      	ldr	r0, [r7, #28]
 8007e44:	f000 f88c 	bl	8007f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e002      	b.n	8007e54 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e54:	69bb      	ldr	r3, [r7, #24]
	}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b088      	sub	sp, #32
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007e76:	440b      	add	r3, r1
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <prvInitialiseNewTask+0x4a>
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	b672      	cpsid	i
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	b662      	cpsie	i
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e7fe      	b.n	8007ea6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	e012      	b.n	8007ed4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	7819      	ldrb	r1, [r3, #0]
 8007eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3334      	adds	r3, #52	; 0x34
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d006      	beq.n	8007edc <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d9e9      	bls.n	8007eae <prvInitialiseNewTask+0x50>
 8007eda:	e000      	b.n	8007ede <prvInitialiseNewTask+0x80>
		{
			break;
 8007edc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	d901      	bls.n	8007ef0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007eec:	2306      	movs	r3, #6
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007efa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2200      	movs	r2, #0
 8007f00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	3304      	adds	r3, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fb1c 	bl	8007544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	3318      	adds	r3, #24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fb17 	bl	8007544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	f1c3 0207 	rsb	r2, r3, #7
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2200      	movs	r2, #0
 8007f30:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	68f9      	ldr	r1, [r7, #12]
 8007f3e:	69b8      	ldr	r0, [r7, #24]
 8007f40:	f000 fe24 	bl	8008b8c <pxPortInitialiseStack>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f68:	f000 ff16 	bl	8008d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f6c:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <prvAddNewTaskToReadyList+0xb8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a29      	ldr	r2, [pc, #164]	; (8008018 <prvAddNewTaskToReadyList+0xb8>)
 8007f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f76:	4b29      	ldr	r3, [pc, #164]	; (800801c <prvAddNewTaskToReadyList+0xbc>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f7e:	4a27      	ldr	r2, [pc, #156]	; (800801c <prvAddNewTaskToReadyList+0xbc>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <prvAddNewTaskToReadyList+0xb8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d110      	bne.n	8007fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f8c:	f000 fc50 	bl	8008830 <prvInitialiseTaskLists>
 8007f90:	e00d      	b.n	8007fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f92:	4b23      	ldr	r3, [pc, #140]	; (8008020 <prvAddNewTaskToReadyList+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f9a:	4b20      	ldr	r3, [pc, #128]	; (800801c <prvAddNewTaskToReadyList+0xbc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d802      	bhi.n	8007fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fa8:	4a1c      	ldr	r2, [pc, #112]	; (800801c <prvAddNewTaskToReadyList+0xbc>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fae:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <prvAddNewTaskToReadyList+0xc4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <prvAddNewTaskToReadyList+0xc4>)
 8007fb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <prvAddNewTaskToReadyList+0xc8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	4a18      	ldr	r2, [pc, #96]	; (8008028 <prvAddNewTaskToReadyList+0xc8>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4a15      	ldr	r2, [pc, #84]	; (800802c <prvAddNewTaskToReadyList+0xcc>)
 8007fd8:	441a      	add	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7ff fabc 	bl	800755e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fe6:	f000 ff09 	bl	8008dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fea:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <prvAddNewTaskToReadyList+0xc0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <prvAddNewTaskToReadyList+0xbc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d207      	bcs.n	8008010 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008000:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <prvAddNewTaskToReadyList+0xd0>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	200002f0 	.word	0x200002f0
 800801c:	200001f0 	.word	0x200001f0
 8008020:	200002fc 	.word	0x200002fc
 8008024:	2000030c 	.word	0x2000030c
 8008028:	200002f8 	.word	0x200002f8
 800802c:	200001f4 	.word	0x200001f4
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	; 0x28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <vTaskDelayUntil+0x2c>
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	b672      	cpsid	i
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	b662      	cpsie	i
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e7fe      	b.n	800805e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <vTaskDelayUntil+0x4a>
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	b672      	cpsid	i
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	b662      	cpsie	i
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e7fe      	b.n	800807c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800807e:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <vTaskDelayUntil+0xf4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <vTaskDelayUntil+0x6a>
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e7fe      	b.n	800809c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800809e:	f000 f8c9 	bl	8008234 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80080a2:	4b22      	ldr	r3, [pc, #136]	; (800812c <vTaskDelayUntil+0xf8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	4413      	add	r3, r2
 80080b0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a3a      	ldr	r2, [r7, #32]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d20b      	bcs.n	80080d4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d211      	bcs.n	80080ea <vTaskDelayUntil+0xb6>
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90d      	bls.n	80080ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80080ce:	2301      	movs	r3, #1
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
 80080d2:	e00a      	b.n	80080ea <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d303      	bcc.n	80080e6 <vTaskDelayUntil+0xb2>
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d901      	bls.n	80080ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d006      	beq.n	8008104 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fcde 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008104:	f000 f8a4 	bl	8008250 <xTaskResumeAll>
 8008108:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d107      	bne.n	8008120 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <vTaskDelayUntil+0xfc>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008120:	bf00      	nop
 8008122:	3728      	adds	r7, #40	; 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000318 	.word	0x20000318
 800812c:	200002f4 	.word	0x200002f4
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d018      	beq.n	8008178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <vTaskDelay+0x64>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <vTaskDelay+0x32>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	e7fe      	b.n	8008164 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008166:	f000 f865 	bl	8008234 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fca7 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008172:	f000 f86d 	bl	8008250 <xTaskResumeAll>
 8008176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <vTaskDelay+0x68>)
 8008180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000318 	.word	0x20000318
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <vTaskStartScheduler+0x7c>)
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	2280      	movs	r2, #128	; 0x80
 80081b2:	491b      	ldr	r1, [pc, #108]	; (8008220 <vTaskStartScheduler+0x80>)
 80081b4:	481b      	ldr	r0, [pc, #108]	; (8008224 <vTaskStartScheduler+0x84>)
 80081b6:	f7ff fe11 	bl	8007ddc <xTaskCreate>
 80081ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d117      	bne.n	80081f2 <vTaskStartScheduler+0x52>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <vTaskStartScheduler+0x88>)
 80081da:	f04f 32ff 	mov.w	r2, #4294967295
 80081de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <vTaskStartScheduler+0x8c>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <vTaskStartScheduler+0x90>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081ec:	f000 fd58 	bl	8008ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081f0:	e00f      	b.n	8008212 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d10b      	bne.n	8008212 <vTaskStartScheduler+0x72>
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	b672      	cpsid	i
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	b662      	cpsie	i
 800820e:	607b      	str	r3, [r7, #4]
 8008210:	e7fe      	b.n	8008210 <vTaskStartScheduler+0x70>
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000314 	.word	0x20000314
 8008220:	0800a8d4 	.word	0x0800a8d4
 8008224:	08008801 	.word	0x08008801
 8008228:	20000310 	.word	0x20000310
 800822c:	200002fc 	.word	0x200002fc
 8008230:	200002f4 	.word	0x200002f4

08008234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008238:	4b04      	ldr	r3, [pc, #16]	; (800824c <vTaskSuspendAll+0x18>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	4a03      	ldr	r2, [pc, #12]	; (800824c <vTaskSuspendAll+0x18>)
 8008240:	6013      	str	r3, [r2, #0]
}
 8008242:	bf00      	nop
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	20000318 	.word	0x20000318

08008250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800825e:	4b42      	ldr	r3, [pc, #264]	; (8008368 <xTaskResumeAll+0x118>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <xTaskResumeAll+0x2e>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	e7fe      	b.n	800827c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800827e:	f000 fd8b 	bl	8008d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008282:	4b39      	ldr	r3, [pc, #228]	; (8008368 <xTaskResumeAll+0x118>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a37      	ldr	r2, [pc, #220]	; (8008368 <xTaskResumeAll+0x118>)
 800828a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <xTaskResumeAll+0x118>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d161      	bne.n	8008358 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008294:	4b35      	ldr	r3, [pc, #212]	; (800836c <xTaskResumeAll+0x11c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d05d      	beq.n	8008358 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800829c:	e02e      	b.n	80082fc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800829e:	4b34      	ldr	r3, [pc, #208]	; (8008370 <xTaskResumeAll+0x120>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3318      	adds	r3, #24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff f9b4 	bl	8007618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff f9af 	bl	8007618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	2201      	movs	r2, #1
 80082c0:	409a      	lsls	r2, r3
 80082c2:	4b2c      	ldr	r3, [pc, #176]	; (8008374 <xTaskResumeAll+0x124>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <xTaskResumeAll+0x124>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a27      	ldr	r2, [pc, #156]	; (8008378 <xTaskResumeAll+0x128>)
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7ff f93b 	bl	800755e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	4b23      	ldr	r3, [pc, #140]	; (800837c <xTaskResumeAll+0x12c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d302      	bcc.n	80082fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082f6:	4b22      	ldr	r3, [pc, #136]	; (8008380 <xTaskResumeAll+0x130>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082fc:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTaskResumeAll+0x120>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1cc      	bne.n	800829e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800830a:	f000 fb0d 	bl	8008928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800830e:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <xTaskResumeAll+0x134>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d010      	beq.n	800833c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800831a:	f000 f847 	bl	80083ac <xTaskIncrementTick>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008324:	4b16      	ldr	r3, [pc, #88]	; (8008380 <xTaskResumeAll+0x130>)
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f1      	bne.n	800831a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008336:	4b13      	ldr	r3, [pc, #76]	; (8008384 <xTaskResumeAll+0x134>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xTaskResumeAll+0x130>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008348:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <xTaskResumeAll+0x138>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008358:	f000 fd50 	bl	8008dfc <vPortExitCritical>

	return xAlreadyYielded;
 800835c:	68bb      	ldr	r3, [r7, #8]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000318 	.word	0x20000318
 800836c:	200002f0 	.word	0x200002f0
 8008370:	200002b0 	.word	0x200002b0
 8008374:	200002f8 	.word	0x200002f8
 8008378:	200001f4 	.word	0x200001f4
 800837c:	200001f0 	.word	0x200001f0
 8008380:	20000304 	.word	0x20000304
 8008384:	20000300 	.word	0x20000300
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <xTaskGetTickCount+0x1c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008398:	687b      	ldr	r3, [r7, #4]
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	200002f4 	.word	0x200002f4

080083ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b6:	4b51      	ldr	r3, [pc, #324]	; (80084fc <xTaskIncrementTick+0x150>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 808e 	bne.w	80084dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083c0:	4b4f      	ldr	r3, [pc, #316]	; (8008500 <xTaskIncrementTick+0x154>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083c8:	4a4d      	ldr	r2, [pc, #308]	; (8008500 <xTaskIncrementTick+0x154>)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d121      	bne.n	8008418 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083d4:	4b4b      	ldr	r3, [pc, #300]	; (8008504 <xTaskIncrementTick+0x158>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <xTaskIncrementTick+0x4a>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	b672      	cpsid	i
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	b662      	cpsie	i
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	e7fe      	b.n	80083f4 <xTaskIncrementTick+0x48>
 80083f6:	4b43      	ldr	r3, [pc, #268]	; (8008504 <xTaskIncrementTick+0x158>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	4b42      	ldr	r3, [pc, #264]	; (8008508 <xTaskIncrementTick+0x15c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a40      	ldr	r2, [pc, #256]	; (8008504 <xTaskIncrementTick+0x158>)
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	4a40      	ldr	r2, [pc, #256]	; (8008508 <xTaskIncrementTick+0x15c>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4b40      	ldr	r3, [pc, #256]	; (800850c <xTaskIncrementTick+0x160>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3301      	adds	r3, #1
 8008410:	4a3e      	ldr	r2, [pc, #248]	; (800850c <xTaskIncrementTick+0x160>)
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	f000 fa88 	bl	8008928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008418:	4b3d      	ldr	r3, [pc, #244]	; (8008510 <xTaskIncrementTick+0x164>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	d34d      	bcc.n	80084be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008422:	4b38      	ldr	r3, [pc, #224]	; (8008504 <xTaskIncrementTick+0x158>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <xTaskIncrementTick+0x84>
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <xTaskIncrementTick+0x86>
 8008430:	2300      	movs	r3, #0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	4b36      	ldr	r3, [pc, #216]	; (8008510 <xTaskIncrementTick+0x164>)
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	601a      	str	r2, [r3, #0]
					break;
 800843e:	e03e      	b.n	80084be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008440:	4b30      	ldr	r3, [pc, #192]	; (8008504 <xTaskIncrementTick+0x158>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d203      	bcs.n	8008460 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008458:	4a2d      	ldr	r2, [pc, #180]	; (8008510 <xTaskIncrementTick+0x164>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6013      	str	r3, [r2, #0]
						break;
 800845e:	e02e      	b.n	80084be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3304      	adds	r3, #4
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff f8d7 	bl	8007618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	3318      	adds	r3, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f8ce 	bl	8007618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	2201      	movs	r2, #1
 8008482:	409a      	lsls	r2, r3
 8008484:	4b23      	ldr	r3, [pc, #140]	; (8008514 <xTaskIncrementTick+0x168>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4313      	orrs	r3, r2
 800848a:	4a22      	ldr	r2, [pc, #136]	; (8008514 <xTaskIncrementTick+0x168>)
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4a1f      	ldr	r2, [pc, #124]	; (8008518 <xTaskIncrementTick+0x16c>)
 800849c:	441a      	add	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7ff f85a 	bl	800755e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	4b1b      	ldr	r3, [pc, #108]	; (800851c <xTaskIncrementTick+0x170>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d3b4      	bcc.n	8008422 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084bc:	e7b1      	b.n	8008422 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084be:	4b17      	ldr	r3, [pc, #92]	; (800851c <xTaskIncrementTick+0x170>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	4914      	ldr	r1, [pc, #80]	; (8008518 <xTaskIncrementTick+0x16c>)
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	440b      	add	r3, r1
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d907      	bls.n	80084e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e004      	b.n	80084e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084dc:	4b10      	ldr	r3, [pc, #64]	; (8008520 <xTaskIncrementTick+0x174>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a0f      	ldr	r2, [pc, #60]	; (8008520 <xTaskIncrementTick+0x174>)
 80084e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084e6:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <xTaskIncrementTick+0x178>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084f2:	697b      	ldr	r3, [r7, #20]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000318 	.word	0x20000318
 8008500:	200002f4 	.word	0x200002f4
 8008504:	200002a8 	.word	0x200002a8
 8008508:	200002ac 	.word	0x200002ac
 800850c:	20000308 	.word	0x20000308
 8008510:	20000310 	.word	0x20000310
 8008514:	200002f8 	.word	0x200002f8
 8008518:	200001f4 	.word	0x200001f4
 800851c:	200001f0 	.word	0x200001f0
 8008520:	20000300 	.word	0x20000300
 8008524:	20000304 	.word	0x20000304

08008528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800852e:	4b27      	ldr	r3, [pc, #156]	; (80085cc <vTaskSwitchContext+0xa4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008536:	4b26      	ldr	r3, [pc, #152]	; (80085d0 <vTaskSwitchContext+0xa8>)
 8008538:	2201      	movs	r2, #1
 800853a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800853c:	e040      	b.n	80085c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800853e:	4b24      	ldr	r3, [pc, #144]	; (80085d0 <vTaskSwitchContext+0xa8>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008544:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <vTaskSwitchContext+0xac>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	fab3 f383 	clz	r3, r3
 8008550:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	f1c3 031f 	rsb	r3, r3, #31
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	491f      	ldr	r1, [pc, #124]	; (80085d8 <vTaskSwitchContext+0xb0>)
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10b      	bne.n	8008586 <vTaskSwitchContext+0x5e>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	b672      	cpsid	i
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	b662      	cpsie	i
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	e7fe      	b.n	8008584 <vTaskSwitchContext+0x5c>
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a11      	ldr	r2, [pc, #68]	; (80085d8 <vTaskSwitchContext+0xb0>)
 8008592:	4413      	add	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	3308      	adds	r3, #8
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d104      	bne.n	80085b6 <vTaskSwitchContext+0x8e>
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4a07      	ldr	r2, [pc, #28]	; (80085dc <vTaskSwitchContext+0xb4>)
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000318 	.word	0x20000318
 80085d0:	20000304 	.word	0x20000304
 80085d4:	200002f8 	.word	0x200002f8
 80085d8:	200001f4 	.word	0x200001f4
 80085dc:	200001f0 	.word	0x200001f0

080085e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <vTaskPlaceOnEventList+0x28>
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	b672      	cpsid	i
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	b662      	cpsie	i
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e7fe      	b.n	8008606 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008608:	4b07      	ldr	r3, [pc, #28]	; (8008628 <vTaskPlaceOnEventList+0x48>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3318      	adds	r3, #24
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fe ffc8 	bl	80075a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008616:	2101      	movs	r1, #1
 8008618:	6838      	ldr	r0, [r7, #0]
 800861a:	f000 fa51 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200001f0 	.word	0x200001f0

0800862c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <xTaskRemoveFromEventList+0x2e>
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	b672      	cpsid	i
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	b662      	cpsie	i
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e7fe      	b.n	8008658 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3318      	adds	r3, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe ffda 	bl	8007618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008664:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <xTaskRemoveFromEventList+0xb0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11c      	bne.n	80086a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe ffd1 	bl	8007618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	2201      	movs	r2, #1
 800867c:	409a      	lsls	r2, r3
 800867e:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <xTaskRemoveFromEventList+0xb4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4313      	orrs	r3, r2
 8008684:	4a16      	ldr	r2, [pc, #88]	; (80086e0 <xTaskRemoveFromEventList+0xb4>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <xTaskRemoveFromEventList+0xb8>)
 8008696:	441a      	add	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7fe ff5d 	bl	800755e <vListInsertEnd>
 80086a4:	e005      	b.n	80086b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3318      	adds	r3, #24
 80086aa:	4619      	mov	r1, r3
 80086ac:	480e      	ldr	r0, [pc, #56]	; (80086e8 <xTaskRemoveFromEventList+0xbc>)
 80086ae:	f7fe ff56 	bl	800755e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <xTaskRemoveFromEventList+0xc0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	429a      	cmp	r2, r3
 80086be:	d905      	bls.n	80086cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <xTaskRemoveFromEventList+0xc4>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	e001      	b.n	80086d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086d0:	697b      	ldr	r3, [r7, #20]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000318 	.word	0x20000318
 80086e0:	200002f8 	.word	0x200002f8
 80086e4:	200001f4 	.word	0x200001f4
 80086e8:	200002b0 	.word	0x200002b0
 80086ec:	200001f0 	.word	0x200001f0
 80086f0:	20000304 	.word	0x20000304

080086f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <vTaskInternalSetTimeOutState+0x24>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <vTaskInternalSetTimeOutState+0x28>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000308 	.word	0x20000308
 800871c:	200002f4 	.word	0x200002f4

08008720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xTaskCheckForTimeOut+0x28>
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e7fe      	b.n	8008746 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <xTaskCheckForTimeOut+0x46>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	b672      	cpsid	i
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	b662      	cpsie	i
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	e7fe      	b.n	8008764 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008766:	f000 fb17 	bl	8008d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800876a:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <xTaskCheckForTimeOut+0xc0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008782:	d102      	bne.n	800878a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	e023      	b.n	80087d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <xTaskCheckForTimeOut+0xc4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d007      	beq.n	80087a6 <xTaskCheckForTimeOut+0x86>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e015      	b.n	80087d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d20b      	bcs.n	80087c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	1ad2      	subs	r2, r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff99 	bl	80086f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	e004      	b.n	80087d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ce:	2301      	movs	r3, #1
 80087d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087d2:	f000 fb13 	bl	8008dfc <vPortExitCritical>

	return xReturn;
 80087d6:	69fb      	ldr	r3, [r7, #28]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	200002f4 	.word	0x200002f4
 80087e4:	20000308 	.word	0x20000308

080087e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <vTaskMissedYield+0x14>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	601a      	str	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	20000304 	.word	0x20000304

08008800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008808:	f000 f852 	bl	80088b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <prvIdleTask+0x28>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d9f9      	bls.n	8008808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <prvIdleTask+0x2c>)
 8008816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008824:	e7f0      	b.n	8008808 <prvIdleTask+0x8>
 8008826:	bf00      	nop
 8008828:	200001f4 	.word	0x200001f4
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008836:	2300      	movs	r3, #0
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	e00c      	b.n	8008856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4a12      	ldr	r2, [pc, #72]	; (8008890 <prvInitialiseTaskLists+0x60>)
 8008848:	4413      	add	r3, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fe5a 	bl	8007504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3301      	adds	r3, #1
 8008854:	607b      	str	r3, [r7, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b06      	cmp	r3, #6
 800885a:	d9ef      	bls.n	800883c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800885c:	480d      	ldr	r0, [pc, #52]	; (8008894 <prvInitialiseTaskLists+0x64>)
 800885e:	f7fe fe51 	bl	8007504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008862:	480d      	ldr	r0, [pc, #52]	; (8008898 <prvInitialiseTaskLists+0x68>)
 8008864:	f7fe fe4e 	bl	8007504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008868:	480c      	ldr	r0, [pc, #48]	; (800889c <prvInitialiseTaskLists+0x6c>)
 800886a:	f7fe fe4b 	bl	8007504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800886e:	480c      	ldr	r0, [pc, #48]	; (80088a0 <prvInitialiseTaskLists+0x70>)
 8008870:	f7fe fe48 	bl	8007504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008874:	480b      	ldr	r0, [pc, #44]	; (80088a4 <prvInitialiseTaskLists+0x74>)
 8008876:	f7fe fe45 	bl	8007504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <prvInitialiseTaskLists+0x78>)
 800887c:	4a05      	ldr	r2, [pc, #20]	; (8008894 <prvInitialiseTaskLists+0x64>)
 800887e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <prvInitialiseTaskLists+0x7c>)
 8008882:	4a05      	ldr	r2, [pc, #20]	; (8008898 <prvInitialiseTaskLists+0x68>)
 8008884:	601a      	str	r2, [r3, #0]
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200001f4 	.word	0x200001f4
 8008894:	20000280 	.word	0x20000280
 8008898:	20000294 	.word	0x20000294
 800889c:	200002b0 	.word	0x200002b0
 80088a0:	200002c4 	.word	0x200002c4
 80088a4:	200002dc 	.word	0x200002dc
 80088a8:	200002a8 	.word	0x200002a8
 80088ac:	200002ac 	.word	0x200002ac

080088b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088b6:	e019      	b.n	80088ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088b8:	f000 fa6e 	bl	8008d98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <prvCheckTasksWaitingTermination+0x4c>)
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fea5 	bl	8007618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <prvCheckTasksWaitingTermination+0x50>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <prvCheckTasksWaitingTermination+0x50>)
 80088d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <prvCheckTasksWaitingTermination+0x54>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3b01      	subs	r3, #1
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <prvCheckTasksWaitingTermination+0x54>)
 80088e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088e2:	f000 fa8b 	bl	8008dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f80e 	bl	8008908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <prvCheckTasksWaitingTermination+0x54>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e1      	bne.n	80088b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200002c4 	.word	0x200002c4
 8008900:	200002f0 	.word	0x200002f0
 8008904:	200002d8 	.word	0x200002d8

08008908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fbe7 	bl	80090e8 <vPortFree>
			vPortFree( pxTCB );
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fbe4 	bl	80090e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <prvResetNextTaskUnblockTime+0x44>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <prvResetNextTaskUnblockTime+0x14>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <prvResetNextTaskUnblockTime+0x16>
 800893c:	2300      	movs	r3, #0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008942:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <prvResetNextTaskUnblockTime+0x48>)
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800894a:	e008      	b.n	800895e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvResetNextTaskUnblockTime+0x44>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	4a05      	ldr	r2, [pc, #20]	; (8008970 <prvResetNextTaskUnblockTime+0x48>)
 800895c:	6013      	str	r3, [r2, #0]
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	200002a8 	.word	0x200002a8
 8008970:	20000310 	.word	0x20000310

08008974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <xTaskGetSchedulerState+0x34>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008982:	2301      	movs	r3, #1
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	e008      	b.n	800899a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <xTaskGetSchedulerState+0x38>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008990:	2302      	movs	r3, #2
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e001      	b.n	800899a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800899a:	687b      	ldr	r3, [r7, #4]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	200002fc 	.word	0x200002fc
 80089ac:	20000318 	.word	0x20000318

080089b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d070      	beq.n	8008aa8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089c6:	4b3b      	ldr	r3, [pc, #236]	; (8008ab4 <xTaskPriorityDisinherit+0x104>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d00b      	beq.n	80089e8 <xTaskPriorityDisinherit+0x38>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	b672      	cpsid	i
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	b662      	cpsie	i
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e7fe      	b.n	80089e6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xTaskPriorityDisinherit+0x58>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	b672      	cpsid	i
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	b662      	cpsie	i
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	e7fe      	b.n	8008a06 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0c:	1e5a      	subs	r2, r3, #1
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d044      	beq.n	8008aa8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d140      	bne.n	8008aa8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fdf4 	bl	8007618 <uxListRemove>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d115      	bne.n	8008a62 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	491f      	ldr	r1, [pc, #124]	; (8008ab8 <xTaskPriorityDisinherit+0x108>)
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <xTaskPriorityDisinherit+0xb2>
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	2201      	movs	r2, #1
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43da      	mvns	r2, r3
 8008a58:	4b18      	ldr	r3, [pc, #96]	; (8008abc <xTaskPriorityDisinherit+0x10c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	4a17      	ldr	r2, [pc, #92]	; (8008abc <xTaskPriorityDisinherit+0x10c>)
 8008a60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f1c3 0207 	rsb	r2, r3, #7
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <xTaskPriorityDisinherit+0x10c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	4a0d      	ldr	r2, [pc, #52]	; (8008abc <xTaskPriorityDisinherit+0x10c>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <xTaskPriorityDisinherit+0x108>)
 8008a96:	441a      	add	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe fd5d 	bl	800755e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aa8:	697b      	ldr	r3, [r7, #20]
	}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200001f0 	.word	0x200001f0
 8008ab8:	200001f4 	.word	0x200001f4
 8008abc:	200002f8 	.word	0x200002f8

08008ac0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008aca:	4b29      	ldr	r3, [pc, #164]	; (8008b70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad0:	4b28      	ldr	r3, [pc, #160]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fd9e 	bl	8007618 <uxListRemove>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	2201      	movs	r2, #1
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	43da      	mvns	r2, r3
 8008af0:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4013      	ands	r3, r2
 8008af6:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008af8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d10a      	bne.n	8008b18 <prvAddCurrentTaskToDelayedList+0x58>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b08:	4b1a      	ldr	r3, [pc, #104]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	481a      	ldr	r0, [pc, #104]	; (8008b7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b12:	f7fe fd24 	bl	800755e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b16:	e026      	b.n	8008b66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b20:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d209      	bcs.n	8008b44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b30:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7fe fd32 	bl	80075a6 <vListInsert>
}
 8008b42:	e010      	b.n	8008b66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b44:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f7fe fd28 	bl	80075a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d202      	bcs.n	8008b66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b60:	4a09      	ldr	r2, [pc, #36]	; (8008b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6013      	str	r3, [r2, #0]
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200002f4 	.word	0x200002f4
 8008b74:	200001f0 	.word	0x200001f0
 8008b78:	200002f8 	.word	0x200002f8
 8008b7c:	200002dc 	.word	0x200002dc
 8008b80:	200002ac 	.word	0x200002ac
 8008b84:	200002a8 	.word	0x200002a8
 8008b88:	20000310 	.word	0x20000310

08008b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f023 0201 	bic.w	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bbc:	4a0c      	ldr	r2, [pc, #48]	; (8008bf0 <pxPortInitialiseStack+0x64>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b14      	subs	r3, #20
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f06f 0202 	mvn.w	r2, #2
 8008bda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b20      	subs	r3, #32
 8008be0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be2:	68fb      	ldr	r3, [r7, #12]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	08008bf5 	.word	0x08008bf5

08008bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bfe:	4b13      	ldr	r3, [pc, #76]	; (8008c4c <prvTaskExitError+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d00b      	beq.n	8008c20 <prvTaskExitError+0x2c>
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	b672      	cpsid	i
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	b662      	cpsie	i
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e7fe      	b.n	8008c1e <prvTaskExitError+0x2a>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c36:	bf00      	nop
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0fc      	beq.n	8008c38 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000024 	.word	0x20000024

08008c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <pxCurrentTCBConst2>)
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	f380 8809 	msr	PSP, r0
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	4770      	bx	lr
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst2>:
 8008c70:	200001f0 	.word	0x200001f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c78:	4808      	ldr	r0, [pc, #32]	; (8008c9c <prvPortStartFirstTask+0x24>)
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f380 8808 	msr	MSP, r0
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8814 	msr	CONTROL, r0
 8008c8a:	b662      	cpsie	i
 8008c8c:	b661      	cpsie	f
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	df00      	svc	0
 8008c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c9a:	bf00      	nop
 8008c9c:	e000ed08 	.word	0xe000ed08

08008ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ca6:	4b36      	ldr	r3, [pc, #216]	; (8008d80 <xPortStartScheduler+0xe0>)
 8008ca8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	22ff      	movs	r2, #255	; 0xff
 8008cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4b2e      	ldr	r3, [pc, #184]	; (8008d84 <xPortStartScheduler+0xe4>)
 8008ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cce:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd4:	e009      	b.n	8008cea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cd6:	4b2c      	ldr	r3, [pc, #176]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d0ef      	beq.n	8008cd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f1c3 0307 	rsb	r3, r3, #7
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d00b      	beq.n	8008d1a <xPortStartScheduler+0x7a>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	60bb      	str	r3, [r7, #8]
 8008d18:	e7fe      	b.n	8008d18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008d22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d24:	4b18      	ldr	r3, [pc, #96]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d2c:	4a16      	ldr	r2, [pc, #88]	; (8008d88 <xPortStartScheduler+0xe8>)
 8008d2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d38:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <xPortStartScheduler+0xec>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a13      	ldr	r2, [pc, #76]	; (8008d8c <xPortStartScheduler+0xec>)
 8008d3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d44:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <xPortStartScheduler+0xec>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a10      	ldr	r2, [pc, #64]	; (8008d8c <xPortStartScheduler+0xec>)
 8008d4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d50:	f000 f8d4 	bl	8008efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <xPortStartScheduler+0xf0>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d5a:	f000 f8f3 	bl	8008f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <xPortStartScheduler+0xf4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <xPortStartScheduler+0xf4>)
 8008d64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d6a:	f7ff ff85 	bl	8008c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d6e:	f7ff fbdb 	bl	8008528 <vTaskSwitchContext>
	prvTaskExitError();
 8008d72:	f7ff ff3f 	bl	8008bf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	e000e400 	.word	0xe000e400
 8008d84:	2000031c 	.word	0x2000031c
 8008d88:	20000320 	.word	0x20000320
 8008d8c:	e000ed20 	.word	0xe000ed20
 8008d90:	20000024 	.word	0x20000024
 8008d94:	e000ef34 	.word	0xe000ef34

08008d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	b672      	cpsid	i
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	b662      	cpsie	i
 8008db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <vPortEnterCritical+0x5c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a0e      	ldr	r2, [pc, #56]	; (8008df4 <vPortEnterCritical+0x5c>)
 8008dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <vPortEnterCritical+0x5c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d110      	bne.n	8008de8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <vPortEnterCritical+0x60>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <vPortEnterCritical+0x50>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	b672      	cpsid	i
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	b662      	cpsie	i
 8008de4:	603b      	str	r3, [r7, #0]
 8008de6:	e7fe      	b.n	8008de6 <vPortEnterCritical+0x4e>
	}
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20000024 	.word	0x20000024
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <vPortExitCritical+0x50>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <vPortExitCritical+0x26>
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	607b      	str	r3, [r7, #4]
 8008e20:	e7fe      	b.n	8008e20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008e22:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <vPortExitCritical+0x50>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <vPortExitCritical+0x50>)
 8008e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <vPortExitCritical+0x50>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <vPortExitCritical+0x42>
 8008e34:	2300      	movs	r3, #0
 8008e36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000024 	.word	0x20000024

08008e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e50:	f3ef 8009 	mrs	r0, PSP
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <pxCurrentTCBConst>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	f01e 0f10 	tst.w	lr, #16
 8008e60:	bf08      	it	eq
 8008e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	f7ff fb50 	bl	8008528 <vTaskSwitchContext>
 8008e88:	f04f 0000 	mov.w	r0, #0
 8008e8c:	f380 8811 	msr	BASEPRI, r0
 8008e90:	bc09      	pop	{r0, r3}
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	6808      	ldr	r0, [r1, #0]
 8008e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9a:	f01e 0f10 	tst.w	lr, #16
 8008e9e:	bf08      	it	eq
 8008ea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ea4:	f380 8809 	msr	PSP, r0
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop

08008eb0 <pxCurrentTCBConst>:
 8008eb0:	200001f0 	.word	0x200001f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop

08008eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	b672      	cpsid	i
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	b662      	cpsie	i
 8008ed2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ed4:	f7ff fa6a 	bl	80083ac <xTaskIncrementTick>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <SysTick_Handler+0x40>)
 8008ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <vPortSetupTimerInterrupt+0x34>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <vPortSetupTimerInterrupt+0x38>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <vPortSetupTimerInterrupt+0x3c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <vPortSetupTimerInterrupt+0x40>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	099b      	lsrs	r3, r3, #6
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <vPortSetupTimerInterrupt+0x44>)
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f1e:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <vPortSetupTimerInterrupt+0x34>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	e000e010 	.word	0xe000e010
 8008f34:	e000e018 	.word	0xe000e018
 8008f38:	2000002c 	.word	0x2000002c
 8008f3c:	10624dd3 	.word	0x10624dd3
 8008f40:	e000e014 	.word	0xe000e014

08008f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f54 <vPortEnableVFP+0x10>
 8008f48:	6801      	ldr	r1, [r0, #0]
 8008f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f4e:	6001      	str	r1, [r0, #0]
 8008f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f52:	bf00      	nop
 8008f54:	e000ed88 	.word	0xe000ed88

08008f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f64:	f7ff f966 	bl	8008234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f68:	4b5a      	ldr	r3, [pc, #360]	; (80090d4 <pvPortMalloc+0x17c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f70:	f000 f916 	bl	80091a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f74:	4b58      	ldr	r3, [pc, #352]	; (80090d8 <pvPortMalloc+0x180>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 8090 	bne.w	80090a2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01e      	beq.n	8008fc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f88:	2208      	movs	r2, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d015      	beq.n	8008fc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f023 0307 	bic.w	r3, r3, #7
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <pvPortMalloc+0x6e>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	b672      	cpsid	i
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	b662      	cpsie	i
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	e7fe      	b.n	8008fc4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d06a      	beq.n	80090a2 <pvPortMalloc+0x14a>
 8008fcc:	4b43      	ldr	r3, [pc, #268]	; (80090dc <pvPortMalloc+0x184>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d865      	bhi.n	80090a2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fd6:	4b42      	ldr	r3, [pc, #264]	; (80090e0 <pvPortMalloc+0x188>)
 8008fd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fda:	4b41      	ldr	r3, [pc, #260]	; (80090e0 <pvPortMalloc+0x188>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fe0:	e004      	b.n	8008fec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d903      	bls.n	8008ffe <pvPortMalloc+0xa6>
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f1      	bne.n	8008fe2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ffe:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <pvPortMalloc+0x17c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009004:	429a      	cmp	r2, r3
 8009006:	d04c      	beq.n	80090a2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2208      	movs	r2, #8
 800900e:	4413      	add	r3, r2
 8009010:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	1ad2      	subs	r2, r2, r3
 8009022:	2308      	movs	r3, #8
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	429a      	cmp	r2, r3
 8009028:	d920      	bls.n	800906c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800902a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4413      	add	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <pvPortMalloc+0xfc>
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	b672      	cpsid	i
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	b662      	cpsie	i
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009066:	69b8      	ldr	r0, [r7, #24]
 8009068:	f000 f8fc 	bl	8009264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <pvPortMalloc+0x184>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	4a19      	ldr	r2, [pc, #100]	; (80090dc <pvPortMalloc+0x184>)
 8009078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800907a:	4b18      	ldr	r3, [pc, #96]	; (80090dc <pvPortMalloc+0x184>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <pvPortMalloc+0x18c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d203      	bcs.n	800908e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <pvPortMalloc+0x184>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <pvPortMalloc+0x18c>)
 800908c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <pvPortMalloc+0x180>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	431a      	orrs	r2, r3
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090a2:	f7ff f8d5 	bl	8008250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <pvPortMalloc+0x170>
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	b672      	cpsid	i
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	b662      	cpsie	i
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	e7fe      	b.n	80090c6 <pvPortMalloc+0x16e>
	return pvReturn;
 80090c8:	69fb      	ldr	r3, [r7, #28]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3728      	adds	r7, #40	; 0x28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20003f2c 	.word	0x20003f2c
 80090d8:	20003f38 	.word	0x20003f38
 80090dc:	20003f30 	.word	0x20003f30
 80090e0:	20003f24 	.word	0x20003f24
 80090e4:	20003f34 	.word	0x20003f34

080090e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d04a      	beq.n	8009190 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090fa:	2308      	movs	r3, #8
 80090fc:	425b      	negs	r3, r3
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <vPortFree+0xb0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4013      	ands	r3, r2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <vPortFree+0x46>
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	b672      	cpsid	i
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	b662      	cpsie	i
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e7fe      	b.n	800912c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <vPortFree+0x66>
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	b672      	cpsid	i
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	b662      	cpsie	i
 800914a:	60bb      	str	r3, [r7, #8]
 800914c:	e7fe      	b.n	800914c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	4b11      	ldr	r3, [pc, #68]	; (8009198 <vPortFree+0xb0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d019      	beq.n	8009190 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d115      	bne.n	8009190 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <vPortFree+0xb0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	43db      	mvns	r3, r3
 800916e:	401a      	ands	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009174:	f7ff f85e 	bl	8008234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	4b07      	ldr	r3, [pc, #28]	; (800919c <vPortFree+0xb4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4413      	add	r3, r2
 8009182:	4a06      	ldr	r2, [pc, #24]	; (800919c <vPortFree+0xb4>)
 8009184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009186:	6938      	ldr	r0, [r7, #16]
 8009188:	f000 f86c 	bl	8009264 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800918c:	f7ff f860 	bl	8008250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009190:	bf00      	nop
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20003f38 	.word	0x20003f38
 800919c:	20003f30 	.word	0x20003f30

080091a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091ac:	4b27      	ldr	r3, [pc, #156]	; (800924c <prvHeapInit+0xac>)
 80091ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00c      	beq.n	80091d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3307      	adds	r3, #7
 80091be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	4a1f      	ldr	r2, [pc, #124]	; (800924c <prvHeapInit+0xac>)
 80091d0:	4413      	add	r3, r2
 80091d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091d8:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <prvHeapInit+0xb0>)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091de:	4b1c      	ldr	r3, [pc, #112]	; (8009250 <prvHeapInit+0xb0>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091ec:	2208      	movs	r2, #8
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <prvHeapInit+0xb4>)
 8009200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009202:	4b14      	ldr	r3, [pc, #80]	; (8009254 <prvHeapInit+0xb4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <prvHeapInit+0xb4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	1ad2      	subs	r2, r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009220:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <prvHeapInit+0xb4>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <prvHeapInit+0xb8>)
 800922e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4a09      	ldr	r2, [pc, #36]	; (800925c <prvHeapInit+0xbc>)
 8009236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <prvHeapInit+0xc0>)
 800923a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	20000324 	.word	0x20000324
 8009250:	20003f24 	.word	0x20003f24
 8009254:	20003f2c 	.word	0x20003f2c
 8009258:	20003f34 	.word	0x20003f34
 800925c:	20003f30 	.word	0x20003f30
 8009260:	20003f38 	.word	0x20003f38

08009264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800926c:	4b28      	ldr	r3, [pc, #160]	; (8009310 <prvInsertBlockIntoFreeList+0xac>)
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e002      	b.n	8009278 <prvInsertBlockIntoFreeList+0x14>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d8f7      	bhi.n	8009272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d108      	bne.n	80092a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	441a      	add	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d118      	bne.n	80092ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b15      	ldr	r3, [pc, #84]	; (8009314 <prvInsertBlockIntoFreeList+0xb0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d00d      	beq.n	80092e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	441a      	add	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e008      	b.n	80092f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <prvInsertBlockIntoFreeList+0xb0>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e003      	b.n	80092f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d002      	beq.n	8009302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009302:	bf00      	nop
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20003f24 	.word	0x20003f24
 8009314:	20003f2c 	.word	0x20003f2c

08009318 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800931c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009320:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <SCB_EnableICache+0x3c>)
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800932c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009330:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009334:	4b07      	ldr	r3, [pc, #28]	; (8009354 <SCB_EnableICache+0x3c>)
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	4a06      	ldr	r2, [pc, #24]	; (8009354 <SCB_EnableICache+0x3c>)
 800933a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800933e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009344:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	e000ed00 	.word	0xe000ed00

08009358 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <SCB_EnableDCache+0x7c>)
 8009360:	2200      	movs	r2, #0
 8009362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009366:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800936a:	4b1a      	ldr	r3, [pc, #104]	; (80093d4 <SCB_EnableDCache+0x7c>)
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009370:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	0b5b      	lsrs	r3, r3, #13
 8009376:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800937a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009384:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800938e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009394:	490f      	ldr	r1, [pc, #60]	; (80093d4 <SCB_EnableDCache+0x7c>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	1e5a      	subs	r2, r3, #1
 80093a0:	60ba      	str	r2, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ef      	bne.n	8009386 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1e5a      	subs	r2, r3, #1
 80093aa:	60fa      	str	r2, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e5      	bne.n	800937c <SCB_EnableDCache+0x24>
 80093b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80093b4:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <SCB_EnableDCache+0x7c>)
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	4a06      	ldr	r2, [pc, #24]	; (80093d4 <SCB_EnableDCache+0x7c>)
 80093ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093be:	6153      	str	r3, [r2, #20]
 80093c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80093c4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	e000ed00 	.word	0xe000ed00

080093d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80093de:	f7ff ff9b 	bl	8009318 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80093e2:	f7ff ffb9 	bl	8009358 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093e6:	f7f8 f839 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093ea:	f000 f887 	bl	80094fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093ee:	f000 fc2b 	bl	8009c48 <MX_GPIO_Init>
  MX_DMA_Init();
 80093f2:	f000 fbad 	bl	8009b50 <MX_DMA_Init>
  MX_DMA2D_Init();
 80093f6:	f000 f995 	bl	8009724 <MX_DMA2D_Init>
  MX_FMC_Init();
 80093fa:	f000 fbd7 	bl	8009bac <MX_FMC_Init>
  MX_LTDC_Init();
 80093fe:	f000 fabd 	bl	800997c <MX_LTDC_Init>
  MX_DSIHOST_DSI_Init();
 8009402:	f000 f9c7 	bl	8009794 <MX_DSIHOST_DSI_Init>
  MX_ADC1_Init();
 8009406:	f000 f915 	bl	8009634 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800940a:	f000 fb69 	bl	8009ae0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED1);
 800940e:	2000      	movs	r0, #0
 8009410:	f7f7 faec 	bl	80009ec <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8009414:	2001      	movs	r0, #1
 8009416:	f7f7 fae9 	bl	80009ec <BSP_LED_Init>
//  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);




  LCD_Config();
 800941a:	f000 fcb3 	bl	8009d84 <LCD_Config>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueue_joy_slave = xQueueCreate(10, sizeof(Joystick));
 800941e:	2200      	movs	r2, #0
 8009420:	2102      	movs	r1, #2
 8009422:	200a      	movs	r0, #10
 8009424:	f7fe f98c 	bl	8007740 <xQueueGenericCreate>
 8009428:	4602      	mov	r2, r0
 800942a:	4b28      	ldr	r3, [pc, #160]	; (80094cc <main+0xf4>)
 800942c:	601a      	str	r2, [r3, #0]
  xQueue_joy_slave_1 = xQueueCreate(10, sizeof(Joystick));
 800942e:	2200      	movs	r2, #0
 8009430:	2102      	movs	r1, #2
 8009432:	200a      	movs	r0, #10
 8009434:	f7fe f984 	bl	8007740 <xQueueGenericCreate>
 8009438:	4602      	mov	r2, r0
 800943a:	4b25      	ldr	r3, [pc, #148]	; (80094d0 <main+0xf8>)
 800943c:	601a      	str	r2, [r3, #0]
  xQueue_joy_slave_2  = xQueueCreate(10, sizeof(Joystick));
 800943e:	2200      	movs	r2, #0
 8009440:	2102      	movs	r1, #2
 8009442:	200a      	movs	r0, #10
 8009444:	f7fe f97c 	bl	8007740 <xQueueGenericCreate>
 8009448:	4602      	mov	r2, r0
 800944a:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <main+0xfc>)
 800944c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of IdleTask */
  osThreadDef(IdleTask, StartIdleTask, osPriorityIdle, 0, 128);
 800944e:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <main+0x100>)
 8009450:	1d3c      	adds	r4, r7, #4
 8009452:	461d      	mov	r5, r3
 8009454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	6023      	str	r3, [r4, #0]
  IdleTaskHandle = osThreadCreate(osThread(IdleTask), NULL);
 800945c:	1d3b      	adds	r3, r7, #4
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f7fe f814 	bl	800748e <osThreadCreate>
 8009466:	4602      	mov	r2, r0
 8009468:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <main+0x104>)
 800946a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //if (xQueue_joy_slave != NULL) {
	  xTaskCreate(get_x_joystick_ADC, "Get X-joystick ADC", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 800946c:	2300      	movs	r3, #0
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	2302      	movs	r3, #2
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	2300      	movs	r3, #0
 8009476:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800947a:	4919      	ldr	r1, [pc, #100]	; (80094e0 <main+0x108>)
 800947c:	4819      	ldr	r0, [pc, #100]	; (80094e4 <main+0x10c>)
 800947e:	f7fe fcad 	bl	8007ddc <xTaskCreate>
	  xTaskCreate(get_button_joystick_PIN, "Get A-joystick", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 8009482:	2300      	movs	r3, #0
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	2302      	movs	r3, #2
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	2300      	movs	r3, #0
 800948c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009490:	4915      	ldr	r1, [pc, #84]	; (80094e8 <main+0x110>)
 8009492:	4816      	ldr	r0, [pc, #88]	; (80094ec <main+0x114>)
 8009494:	f7fe fca2 	bl	8007ddc <xTaskCreate>
	  xTaskCreate(send_master_UART, "UART send X-joystick", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 8009498:	2300      	movs	r3, #0
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	2302      	movs	r3, #2
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80094a6:	4912      	ldr	r1, [pc, #72]	; (80094f0 <main+0x118>)
 80094a8:	4812      	ldr	r0, [pc, #72]	; (80094f4 <main+0x11c>)
 80094aa:	f7fe fc97 	bl	8007ddc <xTaskCreate>
	  xTaskCreate(receive_master_UART, "UART send X-joystick", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 80094ae:	2300      	movs	r3, #0
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	2302      	movs	r3, #2
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2300      	movs	r3, #0
 80094b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80094bc:	490c      	ldr	r1, [pc, #48]	; (80094f0 <main+0x118>)
 80094be:	480e      	ldr	r0, [pc, #56]	; (80094f8 <main+0x120>)
 80094c0:	f7fe fc8c 	bl	8007ddc <xTaskCreate>
//	  xTaskCreate(invaders_sdr, "cannon_slave_rcv", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80094c4:	f7fd ffdc 	bl	8007480 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //}

  while (1)
 80094c8:	e7fe      	b.n	80094c8 <main+0xf0>
 80094ca:	bf00      	nop
 80094cc:	20004444 	.word	0x20004444
 80094d0:	20004398 	.word	0x20004398
 80094d4:	200042a8 	.word	0x200042a8
 80094d8:	0800a924 	.word	0x0800a924
 80094dc:	200042b0 	.word	0x200042b0
 80094e0:	0800a8dc 	.word	0x0800a8dc
 80094e4:	08009dc1 	.word	0x08009dc1
 80094e8:	0800a8f0 	.word	0x0800a8f0
 80094ec:	08009e19 	.word	0x08009e19
 80094f0:	0800a900 	.word	0x0800a900
 80094f4:	08009e91 	.word	0x08009e91
 80094f8:	08009f3d 	.word	0x08009f3d

080094fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b0b8      	sub	sp, #224	; 0xe0
 8009500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009502:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009506:	2234      	movs	r2, #52	; 0x34
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f001 f9cd 	bl	800a8aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009510:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	60da      	str	r2, [r3, #12]
 800951e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	2290      	movs	r2, #144	; 0x90
 8009526:	2100      	movs	r1, #0
 8009528:	4618      	mov	r0, r3
 800952a:	f001 f9be 	bl	800a8aa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800952e:	4b3f      	ldr	r3, [pc, #252]	; (800962c <SystemClock_Config+0x130>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	4a3e      	ldr	r2, [pc, #248]	; (800962c <SystemClock_Config+0x130>)
 8009534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009538:	6413      	str	r3, [r2, #64]	; 0x40
 800953a:	4b3c      	ldr	r3, [pc, #240]	; (800962c <SystemClock_Config+0x130>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009542:	607b      	str	r3, [r7, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009546:	4b3a      	ldr	r3, [pc, #232]	; (8009630 <SystemClock_Config+0x134>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a39      	ldr	r2, [pc, #228]	; (8009630 <SystemClock_Config+0x134>)
 800954c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	4b37      	ldr	r3, [pc, #220]	; (8009630 <SystemClock_Config+0x134>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800955e:	2301      	movs	r3, #1
 8009560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800956c:	2302      	movs	r3, #2
 800956e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800957a:	2319      	movs	r3, #25
 800957c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8009580:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009588:	2302      	movs	r3, #2
 800958a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800958e:	2302      	movs	r3, #2
 8009590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009594:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009598:	4618      	mov	r0, r3
 800959a:	f7fb fb5b 	bl	8004c54 <HAL_RCC_OscConfig>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80095a4:	f000 fda8 	bl	800a0f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80095a8:	f7fb fb04 	bl	8004bb4 <HAL_PWREx_EnableOverDrive>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80095b2:	f000 fda1 	bl	800a0f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80095b6:	230f      	movs	r3, #15
 80095b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80095bc:	2302      	movs	r3, #2
 80095be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80095c2:	2300      	movs	r3, #0
 80095c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80095c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80095cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80095d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80095d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80095dc:	2106      	movs	r1, #6
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fb fdaa 	bl	8005138 <HAL_RCC_ClockConfig>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80095ea:	f000 fd85 	bl	800a0f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART6;
 80095ee:	f640 0308 	movw	r3, #2056	; 0x808
 80095f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80095f4:	23c0      	movs	r3, #192	; 0xc0
 80095f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80095f8:	2302      	movs	r3, #2
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80095fc:	2302      	movs	r3, #2
 80095fe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8009600:	2300      	movs	r3, #0
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009604:	2301      	movs	r3, #1
 8009606:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009608:	2300      	movs	r3, #0
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800960c:	2300      	movs	r3, #0
 800960e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009610:	f107 0308 	add.w	r3, r7, #8
 8009614:	4618      	mov	r0, r3
 8009616:	f7fb ff8f 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8009620:	f000 fd6a 	bl	800a0f8 <Error_Handler>
  }
}
 8009624:	bf00      	nop
 8009626:	37e0      	adds	r7, #224	; 0xe0
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40023800 	.word	0x40023800
 8009630:	40007000 	.word	0x40007000

08009634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08c      	sub	sp, #48	; 0x30
 8009638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800963a:	f107 0320 	add.w	r3, r7, #32
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	605a      	str	r2, [r3, #4]
 8009644:	609a      	str	r2, [r3, #8]
 8009646:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009648:	463b      	mov	r3, r7
 800964a:	2220      	movs	r2, #32
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f001 f92b 	bl	800a8aa <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009654:	4b2f      	ldr	r3, [pc, #188]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009656:	4a30      	ldr	r2, [pc, #192]	; (8009718 <MX_ADC1_Init+0xe4>)
 8009658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800965a:	4b2e      	ldr	r3, [pc, #184]	; (8009714 <MX_ADC1_Init+0xe0>)
 800965c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009662:	4b2c      	ldr	r3, [pc, #176]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009664:	2200      	movs	r2, #0
 8009666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009668:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <MX_ADC1_Init+0xe0>)
 800966a:	2200      	movs	r2, #0
 800966c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800966e:	4b29      	ldr	r3, [pc, #164]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009670:	2201      	movs	r2, #1
 8009672:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009674:	4b27      	ldr	r3, [pc, #156]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800967c:	4b25      	ldr	r3, [pc, #148]	; (8009714 <MX_ADC1_Init+0xe0>)
 800967e:	2200      	movs	r2, #0
 8009680:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009682:	4b24      	ldr	r3, [pc, #144]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009684:	4a25      	ldr	r2, [pc, #148]	; (800971c <MX_ADC1_Init+0xe8>)
 8009686:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009688:	4b22      	ldr	r3, [pc, #136]	; (8009714 <MX_ADC1_Init+0xe0>)
 800968a:	2200      	movs	r2, #0
 800968c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800968e:	4b21      	ldr	r3, [pc, #132]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009690:	2201      	movs	r2, #1
 8009692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009694:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <MX_ADC1_Init+0xe0>)
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800969c:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <MX_ADC1_Init+0xe0>)
 800969e:	2201      	movs	r2, #1
 80096a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80096a2:	481c      	ldr	r0, [pc, #112]	; (8009714 <MX_ADC1_Init+0xe0>)
 80096a4:	f7f7 ff2a 	bl	80014fc <HAL_ADC_Init>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80096ae:	f000 fd23 	bl	800a0f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80096b2:	2304      	movs	r3, #4
 80096b4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80096ba:	2303      	movs	r3, #3
 80096bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096be:	f107 0320 	add.w	r3, r7, #32
 80096c2:	4619      	mov	r1, r3
 80096c4:	4813      	ldr	r0, [pc, #76]	; (8009714 <MX_ADC1_Init+0xe0>)
 80096c6:	f7f8 f869 	bl	800179c <HAL_ADC_ConfigChannel>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80096d0:	f000 fd12 	bl	800a0f8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80096d4:	2304      	movs	r3, #4
 80096d6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80096d8:	2301      	movs	r3, #1
 80096da:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80096dc:	2301      	movs	r3, #1
 80096de:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80096e0:	2303      	movs	r3, #3
 80096e2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80096e8:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <MX_ADC1_Init+0xec>)
 80096ea:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80096f8:	463b      	mov	r3, r7
 80096fa:	4619      	mov	r1, r3
 80096fc:	4805      	ldr	r0, [pc, #20]	; (8009714 <MX_ADC1_Init+0xe0>)
 80096fe:	f7f8 fafd 	bl	8001cfc <HAL_ADCEx_InjectedConfigChannel>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8009708:	f000 fcf6 	bl	800a0f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800970c:	bf00      	nop
 800970e:	3730      	adds	r7, #48	; 0x30
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200044a8 	.word	0x200044a8
 8009718:	40012000 	.word	0x40012000
 800971c:	0f000001 	.word	0x0f000001
 8009720:	000f0001 	.word	0x000f0001

08009724 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009728:	4b18      	ldr	r3, [pc, #96]	; (800978c <MX_DMA2D_Init+0x68>)
 800972a:	4a19      	ldr	r2, [pc, #100]	; (8009790 <MX_DMA2D_Init+0x6c>)
 800972c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800972e:	4b17      	ldr	r3, [pc, #92]	; (800978c <MX_DMA2D_Init+0x68>)
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <MX_DMA2D_Init+0x68>)
 8009736:	2200      	movs	r2, #0
 8009738:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800973a:	4b14      	ldr	r3, [pc, #80]	; (800978c <MX_DMA2D_Init+0x68>)
 800973c:	2200      	movs	r2, #0
 800973e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009740:	4b12      	ldr	r3, [pc, #72]	; (800978c <MX_DMA2D_Init+0x68>)
 8009742:	2200      	movs	r2, #0
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <MX_DMA2D_Init+0x68>)
 8009748:	2200      	movs	r2, #0
 800974a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800974c:	4b0f      	ldr	r3, [pc, #60]	; (800978c <MX_DMA2D_Init+0x68>)
 800974e:	2200      	movs	r2, #0
 8009750:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8009752:	4b0e      	ldr	r3, [pc, #56]	; (800978c <MX_DMA2D_Init+0x68>)
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8009758:	4b0c      	ldr	r3, [pc, #48]	; (800978c <MX_DMA2D_Init+0x68>)
 800975a:	2200      	movs	r2, #0
 800975c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800975e:	4b0b      	ldr	r3, [pc, #44]	; (800978c <MX_DMA2D_Init+0x68>)
 8009760:	2200      	movs	r2, #0
 8009762:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009764:	4809      	ldr	r0, [pc, #36]	; (800978c <MX_DMA2D_Init+0x68>)
 8009766:	f7f9 f92f 	bl	80029c8 <HAL_DMA2D_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009770:	f000 fcc2 	bl	800a0f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009774:	2101      	movs	r1, #1
 8009776:	4805      	ldr	r0, [pc, #20]	; (800978c <MX_DMA2D_Init+0x68>)
 8009778:	f7f9 fa94 	bl	8002ca4 <HAL_DMA2D_ConfigLayer>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8009782:	f000 fcb9 	bl	800a0f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8009786:	bf00      	nop
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20004640 	.word	0x20004640
 8009790:	4002b000 	.word	0x4002b000

08009794 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b0aa      	sub	sp, #168	; 0xa8
 8009798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800979a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	605a      	str	r2, [r3, #4]
 80097a4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80097a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80097aa:	2224      	movs	r2, #36	; 0x24
 80097ac:	2100      	movs	r1, #0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 f87b 	bl	800a8aa <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80097b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80097b8:	2200      	movs	r2, #0
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	605a      	str	r2, [r3, #4]
 80097be:	609a      	str	r2, [r3, #8]
 80097c0:	60da      	str	r2, [r3, #12]
 80097c2:	611a      	str	r2, [r3, #16]
 80097c4:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80097c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ca:	2234      	movs	r2, #52	; 0x34
 80097cc:	2100      	movs	r1, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 f86b 	bl	800a8aa <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80097d4:	463b      	mov	r3, r7
 80097d6:	222c      	movs	r2, #44	; 0x2c
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f001 f865 	bl	800a8aa <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80097e0:	4b64      	ldr	r3, [pc, #400]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097e2:	4a65      	ldr	r2, [pc, #404]	; (8009978 <MX_DSIHOST_DSI_Init+0x1e4>)
 80097e4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80097e6:	4b63      	ldr	r3, [pc, #396]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80097ec:	4b61      	ldr	r3, [pc, #388]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097ee:	2204      	movs	r2, #4
 80097f0:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80097f2:	4b60      	ldr	r3, [pc, #384]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80097f8:	2314      	movs	r3, #20
 80097fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80097fe:	2301      	movs	r3, #1
 8009800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8009804:	2300      	movs	r3, #0
 8009806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800980a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800980e:	4619      	mov	r1, r3
 8009810:	4858      	ldr	r0, [pc, #352]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009812:	f7f9 fbc9 	bl	8002fa8 <HAL_DSI_Init>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800981c:	f000 fc6c 	bl	800a0f8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8009820:	2301      	movs	r3, #1
 8009822:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8009840:	2300      	movs	r3, #0
 8009842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8009852:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009856:	4619      	mov	r1, r3
 8009858:	4846      	ldr	r0, [pc, #280]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 800985a:	f7fa f9e1 	bl	8003c20 <HAL_DSI_ConfigHostTimeouts>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8009864:	f000 fc48 	bl	800a0f8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8009868:	231c      	movs	r3, #28
 800986a:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800986c:	2321      	movs	r3, #33	; 0x21
 800986e:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8009870:	230f      	movs	r3, #15
 8009872:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8009874:	2319      	movs	r3, #25
 8009876:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8009880:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009884:	4619      	mov	r1, r3
 8009886:	483b      	ldr	r0, [pc, #236]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009888:	f7fa f960 	bl	8003b4c <HAL_DSI_ConfigPhyTimer>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8009892:	f000 fc31 	bl	800a0f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8009896:	2104      	movs	r1, #4
 8009898:	4836      	ldr	r0, [pc, #216]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 800989a:	f7fa f92f 	bl	8003afc <HAL_DSI_ConfigFlowControl>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80098a4:	f000 fc28 	bl	800a0f8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80098a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80098ac:	4831      	ldr	r0, [pc, #196]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80098ae:	f7fa fb75 	bl	8003f9c <HAL_DSI_SetLowPowerRXFilter>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80098b8:	f000 fc1e 	bl	800a0f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80098bc:	2100      	movs	r1, #0
 80098be:	482d      	ldr	r0, [pc, #180]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 80098c0:	f7f9 fd00 	bl	80032c4 <HAL_DSI_ConfigErrorMonitor>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80098ca:	f000 fc15 	bl	800a0f8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80098da:	2300      	movs	r3, #0
 80098dc:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80098fe:	2300      	movs	r3, #0
 8009900:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8009902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009906:	4619      	mov	r1, r3
 8009908:	481a      	ldr	r0, [pc, #104]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 800990a:	f7fa f899 	bl	8003a40 <HAL_DSI_ConfigCommand>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8009914:	f000 fbf0 	bl	800a0f8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800991c:	2305      	movs	r3, #5
 800991e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8009920:	f44f 7320 	mov.w	r3, #640	; 0x280
 8009924:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8009926:	2310      	movs	r3, #16
 8009928:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800992a:	2300      	movs	r3, #0
 800992c:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800992e:	2304      	movs	r3, #4
 8009930:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8009932:	2302      	movs	r3, #2
 8009934:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8009936:	2300      	movs	r3, #0
 8009938:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800993a:	2300      	movs	r3, #0
 800993c:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8009942:	2300      	movs	r3, #0
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8009946:	463b      	mov	r3, r7
 8009948:	4619      	mov	r1, r3
 800994a:	480a      	ldr	r0, [pc, #40]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 800994c:	f7f9 ff9e 	bl	800388c <HAL_DSI_ConfigAdaptedCommandMode>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8009956:	f000 fbcf 	bl	800a0f8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800995a:	2100      	movs	r1, #0
 800995c:	4805      	ldr	r0, [pc, #20]	; (8009974 <MX_DSIHOST_DSI_Init+0x1e0>)
 800995e:	f7f9 fd6d 	bl	800343c <HAL_DSI_SetGenericVCID>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8009968:	f000 fbc6 	bl	800a0f8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800996c:	bf00      	nop
 800996e:	37a8      	adds	r7, #168	; 0xa8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	2000437c 	.word	0x2000437c
 8009978:	40016c00 	.word	0x40016c00

0800997c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b09a      	sub	sp, #104	; 0x68
 8009980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009982:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009986:	2234      	movs	r2, #52	; 0x34
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f000 ff8d 	bl	800a8aa <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8009990:	463b      	mov	r3, r7
 8009992:	2234      	movs	r2, #52	; 0x34
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f000 ff87 	bl	800a8aa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800999c:	4b4e      	ldr	r3, [pc, #312]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 800999e:	4a4f      	ldr	r2, [pc, #316]	; (8009adc <MX_LTDC_Init+0x160>)
 80099a0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80099a2:	4b4d      	ldr	r3, [pc, #308]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80099a8:	4b4b      	ldr	r3, [pc, #300]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80099ae:	4b4a      	ldr	r3, [pc, #296]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80099b4:	4b48      	ldr	r3, [pc, #288]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80099ba:	4b47      	ldr	r3, [pc, #284]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099bc:	2207      	movs	r2, #7
 80099be:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80099c0:	4b45      	ldr	r3, [pc, #276]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099c2:	2203      	movs	r2, #3
 80099c4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80099c6:	4b44      	ldr	r3, [pc, #272]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099c8:	220e      	movs	r2, #14
 80099ca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80099cc:	4b42      	ldr	r3, [pc, #264]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099ce:	2205      	movs	r2, #5
 80099d0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80099d2:	4b41      	ldr	r3, [pc, #260]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099d4:	f240 228e 	movw	r2, #654	; 0x28e
 80099d8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80099da:	4b3f      	ldr	r3, [pc, #252]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099dc:	f240 12e5 	movw	r2, #485	; 0x1e5
 80099e0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80099e2:	4b3d      	ldr	r3, [pc, #244]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099e4:	f44f 7225 	mov.w	r2, #660	; 0x294
 80099e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80099ea:	4b3b      	ldr	r3, [pc, #236]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099ec:	f240 12e7 	movw	r2, #487	; 0x1e7
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80099f2:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80099fa:	4b37      	ldr	r3, [pc, #220]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009a02:	4b35      	ldr	r3, [pc, #212]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009a0a:	4833      	ldr	r0, [pc, #204]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 8009a0c:	f7fa fdda 	bl	80045c4 <HAL_LTDC_Init>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8009a16:	f000 fb6f 	bl	800a0f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009a3c:	2305      	movs	r3, #5
 8009a3e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a62:	2200      	movs	r2, #0
 8009a64:	4619      	mov	r1, r3
 8009a66:	481c      	ldr	r0, [pc, #112]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 8009a68:	f7fa fe7c 	bl	8004764 <HAL_LTDC_ConfigLayer>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8009a72:	f000 fb41 	bl	800a0f8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a96:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009a98:	2305      	movs	r3, #5
 8009a9a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009aba:	463b      	mov	r3, r7
 8009abc:	2201      	movs	r2, #1
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <MX_LTDC_Init+0x15c>)
 8009ac2:	f7fa fe4f 	bl	8004764 <HAL_LTDC_ConfigLayer>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8009acc:	f000 fb14 	bl	800a0f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009ad0:	bf00      	nop
 8009ad2:	3768      	adds	r7, #104	; 0x68
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	2000439c 	.word	0x2000439c
 8009adc:	40016800 	.word	0x40016800

08009ae0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009ae4:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009ae6:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <MX_USART6_UART_Init+0x6c>)
 8009ae8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009aea:	4b17      	ldr	r3, [pc, #92]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009af0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009af8:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009afe:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009b04:	4b10      	ldr	r3, [pc, #64]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b06:	220c      	movs	r2, #12
 8009b08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b10:	4b0d      	ldr	r3, [pc, #52]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b1e:	2230      	movs	r2, #48	; 0x30
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8009b2a:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009b30:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009b32:	4805      	ldr	r0, [pc, #20]	; (8009b48 <MX_USART6_UART_Init+0x68>)
 8009b34:	f7fc fc0a 	bl	800634c <HAL_UART_Init>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_USART6_UART_Init+0x62>
  {
    Error_Handler();
 8009b3e:	f000 fadb 	bl	800a0f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009b42:	bf00      	nop
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200045c0 	.word	0x200045c0
 8009b4c:	40011400 	.word	0x40011400

08009b50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <MX_DMA_Init+0x58>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	4a13      	ldr	r2, [pc, #76]	; (8009ba8 <MX_DMA_Init+0x58>)
 8009b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b60:	6313      	str	r3, [r2, #48]	; 0x30
 8009b62:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <MX_DMA_Init+0x58>)
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b6a:	607b      	str	r3, [r7, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2105      	movs	r1, #5
 8009b72:	2039      	movs	r0, #57	; 0x39
 8009b74:	f7f8 fb08 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009b78:	2039      	movs	r0, #57	; 0x39
 8009b7a:	f7f8 fb21 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2105      	movs	r1, #5
 8009b82:	203c      	movs	r0, #60	; 0x3c
 8009b84:	f7f8 fb00 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8009b88:	203c      	movs	r0, #60	; 0x3c
 8009b8a:	f7f8 fb19 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2105      	movs	r1, #5
 8009b92:	2045      	movs	r0, #69	; 0x45
 8009b94:	f7f8 faf8 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8009b98:	2045      	movs	r0, #69	; 0x45
 8009b9a:	f7f8 fb11 	bl	80021c0 <HAL_NVIC_EnableIRQ>

}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40023800 	.word	0x40023800

08009bac <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8009bb2:	1d3b      	adds	r3, r7, #4
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	605a      	str	r2, [r3, #4]
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	60da      	str	r2, [r3, #12]
 8009bbe:	611a      	str	r2, [r3, #16]
 8009bc0:	615a      	str	r2, [r3, #20]
 8009bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009bc4:	4b1e      	ldr	r3, [pc, #120]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bc6:	4a1f      	ldr	r2, [pc, #124]	; (8009c44 <MX_FMC_Init+0x98>)
 8009bc8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8009bca:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009bd0:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bd8:	2208      	movs	r2, #8
 8009bda:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009bdc:	4b18      	ldr	r3, [pc, #96]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bde:	2220      	movs	r2, #32
 8009be0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009be2:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <MX_FMC_Init+0x94>)
 8009be4:	2240      	movs	r2, #64	; 0x40
 8009be6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bea:	2280      	movs	r2, #128	; 0x80
 8009bec:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009bee:	4b14      	ldr	r3, [pc, #80]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8009bf4:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <MX_FMC_Init+0x94>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009c00:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <MX_FMC_Init+0x94>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8009c06:	2310      	movs	r3, #16
 8009c08:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8009c0a:	2310      	movs	r3, #16
 8009c0c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8009c0e:	2310      	movs	r3, #16
 8009c10:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8009c12:	2310      	movs	r3, #16
 8009c14:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8009c16:	2310      	movs	r3, #16
 8009c18:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8009c1a:	2310      	movs	r3, #16
 8009c1c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8009c1e:	2310      	movs	r3, #16
 8009c20:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009c22:	1d3b      	adds	r3, r7, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4806      	ldr	r0, [pc, #24]	; (8009c40 <MX_FMC_Init+0x94>)
 8009c28:	f7fc f8ac 	bl	8005d84 <HAL_SDRAM_Init>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8009c32:	f000 fa61 	bl	800a0f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009c36:	bf00      	nop
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200046fc 	.word	0x200046fc
 8009c44:	a0000140 	.word	0xa0000140

08009c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b090      	sub	sp, #64	; 0x40
 8009c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	605a      	str	r2, [r3, #4]
 8009c58:	609a      	str	r2, [r3, #8]
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009c5e:	4b47      	ldr	r3, [pc, #284]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	4a46      	ldr	r2, [pc, #280]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c64:	f043 0310 	orr.w	r3, r3, #16
 8009c68:	6313      	str	r3, [r2, #48]	; 0x30
 8009c6a:	4b44      	ldr	r3, [pc, #272]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c76:	4b41      	ldr	r3, [pc, #260]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	4a40      	ldr	r2, [pc, #256]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c7c:	f043 0302 	orr.w	r3, r3, #2
 8009c80:	6313      	str	r3, [r2, #48]	; 0x30
 8009c82:	4b3e      	ldr	r3, [pc, #248]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009c8e:	4b3b      	ldr	r3, [pc, #236]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	4a3a      	ldr	r2, [pc, #232]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c98:	6313      	str	r3, [r2, #48]	; 0x30
 8009c9a:	4b38      	ldr	r3, [pc, #224]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	623b      	str	r3, [r7, #32]
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ca6:	4b35      	ldr	r3, [pc, #212]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009caa:	4a34      	ldr	r2, [pc, #208]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cac:	f043 0308 	orr.w	r3, r3, #8
 8009cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8009cb2:	4b32      	ldr	r3, [pc, #200]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	61fb      	str	r3, [r7, #28]
 8009cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009cbe:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc2:	4a2e      	ldr	r2, [pc, #184]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8009cca:	4b2c      	ldr	r3, [pc, #176]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd2:	61bb      	str	r3, [r7, #24]
 8009cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009cd6:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	4a28      	ldr	r2, [pc, #160]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009cee:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8009cfa:	4b20      	ldr	r3, [pc, #128]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	613b      	str	r3, [r7, #16]
 8009d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d06:	4b1d      	ldr	r3, [pc, #116]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d0c:	f043 0304 	orr.w	r3, r3, #4
 8009d10:	6313      	str	r3, [r2, #48]	; 0x30
 8009d12:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d1e:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d22:	4a16      	ldr	r2, [pc, #88]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	6313      	str	r3, [r2, #48]	; 0x30
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	60bb      	str	r3, [r7, #8]
 8009d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009d36:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d40:	6313      	str	r3, [r2, #48]	; 0x30
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <MX_GPIO_Init+0x134>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d4a:	607b      	str	r3, [r7, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_Button_GPIO_Port, A_Button_Pin, GPIO_PIN_RESET);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2108      	movs	r1, #8
 8009d52:	480b      	ldr	r0, [pc, #44]	; (8009d80 <MX_GPIO_Init+0x138>)
 8009d54:	f7fa fc1c 	bl	8004590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_Button_Pin */
  GPIO_InitStruct.Pin = A_Button_Pin;
 8009d58:	2308      	movs	r3, #8
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d60:	2300      	movs	r3, #0
 8009d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(A_Button_GPIO_Port, &GPIO_InitStruct);
 8009d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4804      	ldr	r0, [pc, #16]	; (8009d80 <MX_GPIO_Init+0x138>)
 8009d70:	f7fa f942 	bl	8003ff8 <HAL_GPIO_Init>

}
 8009d74:	bf00      	nop
 8009d76:	3740      	adds	r7, #64	; 0x40
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	40023800 	.word	0x40023800
 8009d80:	40022400 	.word	0x40022400

08009d84 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
	uint32_t  lcd_status = LCD_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	607b      	str	r3, [r7, #4]

	lcd_status = BSP_LCD_Init();
 8009d8e:	f7f6 fe82 	bl	8000a96 <BSP_LCD_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1fc      	bne.n	8009d96 <LCD_Config+0x12>

	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8009d9c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7f7 f815 	bl	8000dd0 <BSP_LCD_LayerDefaultInit>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8009da6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009daa:	f7f7 f8a3 	bl	8000ef4 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	f7f7 f86d 	bl	8000e90 <BSP_LCD_SetTextColor>
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <get_x_joystick_ADC>:

void get_x_joystick_ADC (void* parameters) {
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	Joystick joy_input;
	joy_input.id = X_AXIS;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	753b      	strb	r3, [r7, #20]
	uint32_t ADC_buffer [1];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_buffer, 1);
 8009dcc:	f107 0310 	add.w	r3, r7, #16
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	480e      	ldr	r0, [pc, #56]	; (8009e10 <get_x_joystick_ADC+0x50>)
 8009dd6:	f7f7 fbd5 	bl	8001584 <HAL_ADC_Start_DMA>
	portTickType xNextWakeTime;
	const portTickType xTicksToWait = 0 / portTICK_RATE_MS;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	61fb      	str	r3, [r7, #28]
	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 8009dde:	2314      	movs	r3, #20
 8009de0:	61bb      	str	r3, [r7, #24]
	xNextWakeTime = xTaskGetTickCount ();
 8009de2:	f7fe fad3 	bl	800838c <xTaskGetTickCount>
 8009de6:	4603      	mov	r3, r0
 8009de8:	60fb      	str	r3, [r7, #12]

	for (;;){
		joy_input.val = (ADC_buffer[0] >> 6);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	099b      	lsrs	r3, r3, #6
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	757b      	strb	r3, [r7, #21]

		xQueueSendToBack(xQueue_joy_slave, &joy_input, xTicksToWait);
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <get_x_joystick_ADC+0x54>)
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f107 0114 	add.w	r1, r7, #20
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	69fa      	ldr	r2, [r7, #28]
 8009dfe:	f7fd fcf9 	bl	80077f4 <xQueueGenericSend>
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	69b9      	ldr	r1, [r7, #24]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe f913 	bl	8008034 <vTaskDelayUntil>
		joy_input.val = (ADC_buffer[0] >> 6);
 8009e0e:	e7ec      	b.n	8009dea <get_x_joystick_ADC+0x2a>
 8009e10:	200044a8 	.word	0x200044a8
 8009e14:	20004444 	.word	0x20004444

08009e18 <get_button_joystick_PIN>:
	}
}

void get_button_joystick_PIN (void* parameters) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	Joystick joy_input;
	joy_input.id = A_BUTTON;
 8009e20:	2301      	movs	r3, #1
 8009e22:	733b      	strb	r3, [r7, #12]
	GPIO_PinState status_A_Button;
	portTickType xNextWakeTime;
	const portTickType xTicksToWait = 0 / portTICK_RATE_MS;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 8009e28:	2314      	movs	r3, #20
 8009e2a:	613b      	str	r3, [r7, #16]
	xNextWakeTime = xTaskGetTickCount ();
 8009e2c:	f7fe faae 	bl	800838c <xTaskGetTickCount>
 8009e30:	4603      	mov	r3, r0
 8009e32:	60bb      	str	r3, [r7, #8]

	for (;;){
		HAL_GPIO_WritePin(A_Button_GPIO_Port, A_Button_Pin, GPIO_PIN_SET);
 8009e34:	2201      	movs	r2, #1
 8009e36:	2108      	movs	r1, #8
 8009e38:	4813      	ldr	r0, [pc, #76]	; (8009e88 <get_button_joystick_PIN+0x70>)
 8009e3a:	f7fa fba9 	bl	8004590 <HAL_GPIO_WritePin>
		status_A_Button=HAL_GPIO_ReadPin(A_Button_GPIO_Port, A_Button_Pin);
 8009e3e:	2108      	movs	r1, #8
 8009e40:	4811      	ldr	r0, [pc, #68]	; (8009e88 <get_button_joystick_PIN+0x70>)
 8009e42:	f7fa fb8d 	bl	8004560 <HAL_GPIO_ReadPin>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(A_Button_GPIO_Port, A_Button_Pin, GPIO_PIN_RESET);
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2108      	movs	r1, #8
 8009e4e:	480e      	ldr	r0, [pc, #56]	; (8009e88 <get_button_joystick_PIN+0x70>)
 8009e50:	f7fa fb9e 	bl	8004590 <HAL_GPIO_WritePin>

		if (status_A_Button == 0) { 	//  ON
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <get_button_joystick_PIN+0x46>
			joy_input.val = 1;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	737b      	strb	r3, [r7, #13]

		}
		if (status_A_Button == 1) { 	// OFF
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <get_button_joystick_PIN+0x50>
			joy_input.val = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	737b      	strb	r3, [r7, #13]

		}
		xQueueSendToBack(xQueue_joy_slave_1, &joy_input, xTicksToWait);
 8009e68:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <get_button_joystick_PIN+0x74>)
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	f107 010c 	add.w	r1, r7, #12
 8009e70:	2300      	movs	r3, #0
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	f7fd fcbe 	bl	80077f4 <xQueueGenericSend>
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	6939      	ldr	r1, [r7, #16]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe f8d8 	bl	8008034 <vTaskDelayUntil>
		HAL_GPIO_WritePin(A_Button_GPIO_Port, A_Button_Pin, GPIO_PIN_SET);
 8009e84:	e7d6      	b.n	8009e34 <get_button_joystick_PIN+0x1c>
 8009e86:	bf00      	nop
 8009e88:	40022400 	.word	0x40022400
 8009e8c:	20004398 	.word	0x20004398

08009e90 <send_master_UART>:
	}
}

void send_master_UART(void * parameters) { /* Enviar Joystick Slave para ARM Master */
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]

	Joystick joy_input;
	Joystick _joy_input;
	for (int i = 0; i < 4; i++) {
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e007      	b.n	8009eae <send_master_UART+0x1e>
		data2send[i] = ' ';
 8009e9e:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <send_master_UART+0x94>)
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	ddf4      	ble.n	8009e9e <send_master_UART+0xe>
	}
	HAL_UART_Transmit_DMA(&huart6, data2send, 4);
 8009eb4:	2204      	movs	r2, #4
 8009eb6:	491b      	ldr	r1, [pc, #108]	; (8009f24 <send_master_UART+0x94>)
 8009eb8:	481b      	ldr	r0, [pc, #108]	; (8009f28 <send_master_UART+0x98>)
 8009eba:	f7fc fa95 	bl	80063e8 <HAL_UART_Transmit_DMA>
	for (;;){
		xQueueReceive(xQueue_joy_slave, &joy_input, portMAX_DELAY);
 8009ebe:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <send_master_UART+0x9c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f107 0110 	add.w	r1, r7, #16
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd fd94 	bl	80079f8 <xQueueReceive>
		xQueueReceive(xQueue_joy_slave_1, &_joy_input, portMAX_DELAY);
 8009ed0:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <send_master_UART+0xa0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f107 010c 	add.w	r1, r7, #12
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fd fd8b 	bl	80079f8 <xQueueReceive>
				if (flag_half_tx_DMA == true) {
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <send_master_UART+0xa4>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00b      	beq.n	8009f02 <send_master_UART+0x72>
					flag_half_tx_DMA = false;
 8009eea:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <send_master_UART+0xa4>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	701a      	strb	r2, [r3, #0]
					if (joy_input.id == X_AXIS) {
 8009ef0:	7c3b      	ldrb	r3, [r7, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d105      	bne.n	8009f02 <send_master_UART+0x72>
						data2send[0] = 'x';
 8009ef6:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <send_master_UART+0x94>)
 8009ef8:	2278      	movs	r2, #120	; 0x78
 8009efa:	701a      	strb	r2, [r3, #0]
						data2send[1] = joy_input.val;
 8009efc:	7c7a      	ldrb	r2, [r7, #17]
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <send_master_UART+0x94>)
 8009f00:	705a      	strb	r2, [r3, #1]
					}
				}
				if (flag_tx_DMA == true) {
 8009f02:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <send_master_UART+0xa8>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0d9      	beq.n	8009ebe <send_master_UART+0x2e>
					flag_tx_DMA = false;
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <send_master_UART+0xa8>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]

					if (_joy_input.id == A_BUTTON) {
 8009f10:	7b3b      	ldrb	r3, [r7, #12]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d1d3      	bne.n	8009ebe <send_master_UART+0x2e>
						data2send[2] = 'a';
 8009f16:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <send_master_UART+0x94>)
 8009f18:	2261      	movs	r2, #97	; 0x61
 8009f1a:	709a      	strb	r2, [r3, #2]
						data2send[3] = _joy_input.val;
 8009f1c:	7b7a      	ldrb	r2, [r7, #13]
 8009f1e:	4b01      	ldr	r3, [pc, #4]	; (8009f24 <send_master_UART+0x94>)
 8009f20:	70da      	strb	r2, [r3, #3]
		xQueueReceive(xQueue_joy_slave, &joy_input, portMAX_DELAY);
 8009f22:	e7cc      	b.n	8009ebe <send_master_UART+0x2e>
 8009f24:	200042ac 	.word	0x200042ac
 8009f28:	200045c0 	.word	0x200045c0
 8009f2c:	20004444 	.word	0x20004444
 8009f30:	20004398 	.word	0x20004398
 8009f34:	20003f3c 	.word	0x20003f3c
 8009f38:	20003f3d 	.word	0x20003f3d

08009f3c <receive_master_UART>:
//		}
	}
}


void receive_master_UART(void * parameters) { /* Receber X de Joystick de ARM Slave*/
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 200; i++) { // 2nd and 3rd row of invaders
 8009f44:	2300      	movs	r3, #0
 8009f46:	61fb      	str	r3, [r7, #28]
 8009f48:	e007      	b.n	8009f5a <receive_master_UART+0x1e>
			data2receive[i] = '0';
 8009f4a:	4a3b      	ldr	r2, [pc, #236]	; (800a038 <receive_master_UART+0xfc>)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4413      	add	r3, r2
 8009f50:	2230      	movs	r2, #48	; 0x30
 8009f52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 200; i++) { // 2nd and 3rd row of invaders
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	3301      	adds	r3, #1
 8009f58:	61fb      	str	r3, [r7, #28]
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	2bc7      	cmp	r3, #199	; 0xc7
 8009f5e:	ddf4      	ble.n	8009f4a <receive_master_UART+0xe>
		}
	portTickType xNextWakeTime;
	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 8009f60:	2314      	movs	r3, #20
 8009f62:	613b      	str	r3, [r7, #16]
	xNextWakeTime = xTaskGetTickCount ();
 8009f64:	f7fe fa12 	bl	800838c <xTaskGetTickCount>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Receive_DMA(&huart6, data2receive, 200);
 8009f6c:	22c8      	movs	r2, #200	; 0xc8
 8009f6e:	4932      	ldr	r1, [pc, #200]	; (800a038 <receive_master_UART+0xfc>)
 8009f70:	4832      	ldr	r0, [pc, #200]	; (800a03c <receive_master_UART+0x100>)
 8009f72:	f7fc fab5 	bl	80064e0 <HAL_UART_Receive_DMA>

	for (;;){
		if (flag_half_rx_DMA == true) {
 8009f76:	4b32      	ldr	r3, [pc, #200]	; (800a040 <receive_master_UART+0x104>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d025      	beq.n	8009fca <receive_master_UART+0x8e>
			flag_half_rx_DMA = false;
 8009f7e:	4b30      	ldr	r3, [pc, #192]	; (800a040 <receive_master_UART+0x104>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 100; i++) {
 8009f84:	2300      	movs	r3, #0
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e01c      	b.n	8009fc4 <receive_master_UART+0x88>
				if (data2receive[i] == 'x') {
 8009f8a:	4a2b      	ldr	r2, [pc, #172]	; (800a038 <receive_master_UART+0xfc>)
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	4413      	add	r3, r2
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b78      	cmp	r3, #120	; 0x78
 8009f94:	d106      	bne.n	8009fa4 <receive_master_UART+0x68>
					x_master = data2receive[i+1];
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	4a27      	ldr	r2, [pc, #156]	; (800a038 <receive_master_UART+0xfc>)
 8009f9c:	5cd3      	ldrb	r3, [r2, r3]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	4b28      	ldr	r3, [pc, #160]	; (800a044 <receive_master_UART+0x108>)
 8009fa2:	801a      	strh	r2, [r3, #0]

				}
				if (data2receive[i] == 'y') {
 8009fa4:	4a24      	ldr	r2, [pc, #144]	; (800a038 <receive_master_UART+0xfc>)
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	4413      	add	r3, r2
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b79      	cmp	r3, #121	; 0x79
 8009fae:	d106      	bne.n	8009fbe <receive_master_UART+0x82>
					y_master = data2receive[i+1];
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	4a20      	ldr	r2, [pc, #128]	; (800a038 <receive_master_UART+0xfc>)
 8009fb6:	5cd3      	ldrb	r3, [r2, r3]
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	4b23      	ldr	r3, [pc, #140]	; (800a048 <receive_master_UART+0x10c>)
 8009fbc:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 100; i++) {
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	61bb      	str	r3, [r7, #24]
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b63      	cmp	r3, #99	; 0x63
 8009fc8:	dddf      	ble.n	8009f8a <receive_master_UART+0x4e>

				}
			}
		}
		if (flag_rx_DMA == true) {
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <receive_master_UART+0x110>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d02a      	beq.n	800a028 <receive_master_UART+0xec>
			flag_rx_DMA = false;
 8009fd2:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <receive_master_UART+0x110>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart6, data2receive, 200);
 8009fd8:	22c8      	movs	r2, #200	; 0xc8
 8009fda:	4917      	ldr	r1, [pc, #92]	; (800a038 <receive_master_UART+0xfc>)
 8009fdc:	4817      	ldr	r0, [pc, #92]	; (800a03c <receive_master_UART+0x100>)
 8009fde:	f7fc fa7f 	bl	80064e0 <HAL_UART_Receive_DMA>
			for (int i = 100; i < 200; i++) { // 2nd and 3rd row of invaders
 8009fe2:	2364      	movs	r3, #100	; 0x64
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e01c      	b.n	800a022 <receive_master_UART+0xe6>
				if (data2receive[i] == 'x') {
 8009fe8:	4a13      	ldr	r2, [pc, #76]	; (800a038 <receive_master_UART+0xfc>)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b78      	cmp	r3, #120	; 0x78
 8009ff2:	d106      	bne.n	800a002 <receive_master_UART+0xc6>
					x_laser = data2receive[i+1];
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	4a0f      	ldr	r2, [pc, #60]	; (800a038 <receive_master_UART+0xfc>)
 8009ffa:	5cd3      	ldrb	r3, [r2, r3]
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	4b14      	ldr	r3, [pc, #80]	; (800a050 <receive_master_UART+0x114>)
 800a000:	801a      	strh	r2, [r3, #0]
				}
				if (data2receive[i] == 'y') {
 800a002:	4a0d      	ldr	r2, [pc, #52]	; (800a038 <receive_master_UART+0xfc>)
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	4413      	add	r3, r2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b79      	cmp	r3, #121	; 0x79
 800a00c:	d106      	bne.n	800a01c <receive_master_UART+0xe0>
					y_laser = data2receive[i+1];
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	3301      	adds	r3, #1
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <receive_master_UART+0xfc>)
 800a014:	5cd3      	ldrb	r3, [r2, r3]
 800a016:	b29a      	uxth	r2, r3
 800a018:	4b0e      	ldr	r3, [pc, #56]	; (800a054 <receive_master_UART+0x118>)
 800a01a:	801a      	strh	r2, [r3, #0]
			for (int i = 100; i < 200; i++) { // 2nd and 3rd row of invaders
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	3301      	adds	r3, #1
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2bc7      	cmp	r3, #199	; 0xc7
 800a026:	dddf      	ble.n	8009fe8 <receive_master_UART+0xac>
				}
			}
		}
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	6939      	ldr	r1, [r7, #16]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe f800 	bl	8008034 <vTaskDelayUntil>
		if (flag_half_rx_DMA == true) {
 800a034:	e79f      	b.n	8009f76 <receive_master_UART+0x3a>
 800a036:	bf00      	nop
 800a038:	200042b4 	.word	0x200042b4
 800a03c:	200045c0 	.word	0x200045c0
 800a040:	20003f3e 	.word	0x20003f3e
 800a044:	20000028 	.word	0x20000028
 800a048:	2000002a 	.word	0x2000002a
 800a04c:	20003f3f 	.word	0x20003f3f
 800a050:	20004554 	.word	0x20004554
 800a054:	200044f0 	.word	0x200044f0

0800a058 <DMA1_Stream6_IRQHandler>:
	}
}


void DMA1_Stream6_IRQHandler(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800a05c:	4802      	ldr	r0, [pc, #8]	; (800a068 <DMA1_Stream6_IRQHandler+0x10>)
 800a05e:	f7f8 fa4b 	bl	80024f8 <HAL_DMA_IRQHandler>
}
 800a062:	bf00      	nop
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20004448 	.word	0x20004448

0800a06c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a06      	ldr	r2, [pc, #24]	; (800a090 <HAL_UART_TxCpltCallback+0x24>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d102      	bne.n	800a082 <HAL_UART_TxCpltCallback+0x16>
		flag_tx_DMA = true;
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <HAL_UART_TxCpltCallback+0x28>)
 800a07e:	2201      	movs	r2, #1
 800a080:	701a      	strb	r2, [r3, #0]
	}
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	200045c0 	.word	0x200045c0
 800a094:	20003f3d 	.word	0x20003f3d

0800a098 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a06      	ldr	r2, [pc, #24]	; (800a0bc <HAL_UART_TxHalfCpltCallback+0x24>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d102      	bne.n	800a0ae <HAL_UART_TxHalfCpltCallback+0x16>
		flag_half_tx_DMA = true;
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_UART_TxHalfCpltCallback+0x28>)
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	701a      	strb	r2, [r3, #0]
	}
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	200045c0 	.word	0x200045c0
 800a0c0:	20003f3c 	.word	0x20003f3c

0800a0c4 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f7fd fa05 	bl	80074dc <osDelay>
 800a0d2:	e7fb      	b.n	800a0cc <StartIdleTask+0x8>

0800a0d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d101      	bne.n	800a0ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a0e6:	f7f7 f9c7 	bl	8001478 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	40001400 	.word	0x40001400

0800a0f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_On(LED2);
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f7f6 fca5 	bl	8000a4c <BSP_LED_On>
  /* USER CODE END Error_Handler_Debug */
}
 800a102:	bf00      	nop
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <HAL_MspInit+0x4c>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	4a10      	ldr	r2, [pc, #64]	; (800a154 <HAL_MspInit+0x4c>)
 800a114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a118:	6413      	str	r3, [r2, #64]	; 0x40
 800a11a:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <HAL_MspInit+0x4c>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a122:	607b      	str	r3, [r7, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a126:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <HAL_MspInit+0x4c>)
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	4a0a      	ldr	r2, [pc, #40]	; (800a154 <HAL_MspInit+0x4c>)
 800a12c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a130:	6453      	str	r3, [r2, #68]	; 0x44
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <HAL_MspInit+0x4c>)
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	210f      	movs	r1, #15
 800a142:	f06f 0001 	mvn.w	r0, #1
 800a146:	f7f8 f81f 	bl	8002188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	40023800 	.word	0x40023800

0800a158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	; 0x28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a160:	f107 0314 	add.w	r3, r7, #20
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	609a      	str	r2, [r3, #8]
 800a16c:	60da      	str	r2, [r3, #12]
 800a16e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a2d      	ldr	r2, [pc, #180]	; (800a22c <HAL_ADC_MspInit+0xd4>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d153      	bne.n	800a222 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a17a:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	4a2c      	ldr	r2, [pc, #176]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a184:	6453      	str	r3, [r2, #68]	; 0x44
 800a186:	4b2a      	ldr	r3, [pc, #168]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18e:	613b      	str	r3, [r7, #16]
 800a190:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a192:	4b27      	ldr	r3, [pc, #156]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	4a26      	ldr	r2, [pc, #152]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	6313      	str	r3, [r2, #48]	; 0x30
 800a19e:	4b24      	ldr	r3, [pc, #144]	; (800a230 <HAL_ADC_MspInit+0xd8>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = Y___Analog_Joystick_Pin|X__Analog_Joystick_Pin;
 800a1aa:	2350      	movs	r3, #80	; 0x50
 800a1ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1b6:	f107 0314 	add.w	r3, r7, #20
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	481d      	ldr	r0, [pc, #116]	; (800a234 <HAL_ADC_MspInit+0xdc>)
 800a1be:	f7f9 ff1b 	bl	8003ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1c4:	4a1d      	ldr	r2, [pc, #116]	; (800a23c <HAL_ADC_MspInit+0xe4>)
 800a1c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a1c8:	4b1b      	ldr	r3, [pc, #108]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1d4:	4b18      	ldr	r3, [pc, #96]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a1da:	4b17      	ldr	r3, [pc, #92]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a1f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a1f2:	4b11      	ldr	r3, [pc, #68]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a200:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a202:	2200      	movs	r2, #0
 800a204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a206:	480c      	ldr	r0, [pc, #48]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a208:	f7f7 ffe8 	bl	80021dc <HAL_DMA_Init>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800a212:	f7ff ff71 	bl	800a0f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a07      	ldr	r2, [pc, #28]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38
 800a21c:	4a06      	ldr	r2, [pc, #24]	; (800a238 <HAL_ADC_MspInit+0xe0>)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a222:	bf00      	nop
 800a224:	3728      	adds	r7, #40	; 0x28
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	40012000 	.word	0x40012000
 800a230:	40023800 	.word	0x40023800
 800a234:	40020000 	.word	0x40020000
 800a238:	200044f4 	.word	0x200044f4
 800a23c:	40026470 	.word	0x40026470

0800a240 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <HAL_DMA2D_MspInit+0x38>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d10b      	bne.n	800a26a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a252:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <HAL_DMA2D_MspInit+0x3c>)
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	4a09      	ldr	r2, [pc, #36]	; (800a27c <HAL_DMA2D_MspInit+0x3c>)
 800a258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a25c:	6313      	str	r3, [r2, #48]	; 0x30
 800a25e:	4b07      	ldr	r3, [pc, #28]	; (800a27c <HAL_DMA2D_MspInit+0x3c>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	4002b000 	.word	0x4002b000
 800a27c:	40023800 	.word	0x40023800

0800a280 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	; 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a288:	f107 0314 	add.w	r3, r7, #20
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	605a      	str	r2, [r3, #4]
 800a292:	609a      	str	r2, [r3, #8]
 800a294:	60da      	str	r2, [r3, #12]
 800a296:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a17      	ldr	r2, [pc, #92]	; (800a2fc <HAL_DSI_MspInit+0x7c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d127      	bne.n	800a2f2 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800a2a2:	4b17      	ldr	r3, [pc, #92]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	4a16      	ldr	r2, [pc, #88]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ae:	4b14      	ldr	r3, [pc, #80]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2be:	4a10      	ldr	r2, [pc, #64]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <HAL_DSI_MspInit+0x80>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800a2e2:	230d      	movs	r3, #13
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4805      	ldr	r0, [pc, #20]	; (800a304 <HAL_DSI_MspInit+0x84>)
 800a2ee:	f7f9 fe83 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800a2f2:	bf00      	nop
 800a2f4:	3728      	adds	r7, #40	; 0x28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40016c00 	.word	0x40016c00
 800a300:	40023800 	.word	0x40023800
 800a304:	40022400 	.word	0x40022400

0800a308 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a08      	ldr	r2, [pc, #32]	; (800a338 <HAL_DSI_MspDeInit+0x30>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d109      	bne.n	800a32e <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <HAL_DSI_MspDeInit+0x34>)
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	4a07      	ldr	r2, [pc, #28]	; (800a33c <HAL_DSI_MspDeInit+0x34>)
 800a320:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a324:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800a326:	2104      	movs	r1, #4
 800a328:	4805      	ldr	r0, [pc, #20]	; (800a340 <HAL_DSI_MspDeInit+0x38>)
 800a32a:	f7fa f80f 	bl	800434c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	40016c00 	.word	0x40016c00
 800a33c:	40023800 	.word	0x40023800
 800a340:	40022400 	.word	0x40022400

0800a344 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <HAL_LTDC_MspInit+0x38>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d10b      	bne.n	800a36e <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a356:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <HAL_LTDC_MspInit+0x3c>)
 800a358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a35a:	4a09      	ldr	r2, [pc, #36]	; (800a380 <HAL_LTDC_MspInit+0x3c>)
 800a35c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a360:	6453      	str	r3, [r2, #68]	; 0x44
 800a362:	4b07      	ldr	r3, [pc, #28]	; (800a380 <HAL_LTDC_MspInit+0x3c>)
 800a364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	40016800 	.word	0x40016800
 800a380:	40023800 	.word	0x40023800

0800a384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08a      	sub	sp, #40	; 0x28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a38c:	f107 0314 	add.w	r3, r7, #20
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a4a      	ldr	r2, [pc, #296]	; (800a4cc <HAL_UART_MspInit+0x148>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	f040 808e 	bne.w	800a4c4 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800a3a8:	4b49      	ldr	r3, [pc, #292]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ac:	4a48      	ldr	r2, [pc, #288]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3ae:	f043 0320 	orr.w	r3, r3, #32
 800a3b2:	6453      	str	r3, [r2, #68]	; 0x44
 800a3b4:	4b46      	ldr	r3, [pc, #280]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3c0:	4b43      	ldr	r3, [pc, #268]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	4a42      	ldr	r2, [pc, #264]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3c6:	f043 0304 	orr.w	r3, r3, #4
 800a3ca:	6313      	str	r3, [r2, #48]	; 0x30
 800a3cc:	4b40      	ldr	r3, [pc, #256]	; (800a4d0 <HAL_UART_MspInit+0x14c>)
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800a3d8:	23c0      	movs	r3, #192	; 0xc0
 800a3da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3ec:	f107 0314 	add.w	r3, r7, #20
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4838      	ldr	r0, [pc, #224]	; (800a4d4 <HAL_UART_MspInit+0x150>)
 800a3f4:	f7f9 fe00 	bl	8003ff8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800a3f8:	4b37      	ldr	r3, [pc, #220]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a3fa:	4a38      	ldr	r2, [pc, #224]	; (800a4dc <HAL_UART_MspInit+0x158>)
 800a3fc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800a3fe:	4b36      	ldr	r3, [pc, #216]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a400:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800a404:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a406:	4b34      	ldr	r3, [pc, #208]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a408:	2240      	movs	r2, #64	; 0x40
 800a40a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a40c:	4b32      	ldr	r3, [pc, #200]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a40e:	2200      	movs	r2, #0
 800a410:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a412:	4b31      	ldr	r3, [pc, #196]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a418:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a41a:	4b2f      	ldr	r3, [pc, #188]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a420:	4b2d      	ldr	r3, [pc, #180]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a422:	2200      	movs	r2, #0
 800a424:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800a426:	4b2c      	ldr	r3, [pc, #176]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a42c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a42e:	4b2a      	ldr	r3, [pc, #168]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a430:	2200      	movs	r2, #0
 800a432:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a434:	4b28      	ldr	r3, [pc, #160]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a436:	2200      	movs	r2, #0
 800a438:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800a43a:	4827      	ldr	r0, [pc, #156]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a43c:	f7f7 fece 	bl	80021dc <HAL_DMA_Init>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800a446:	f7ff fe57 	bl	800a0f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a22      	ldr	r2, [pc, #136]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a44e:	669a      	str	r2, [r3, #104]	; 0x68
 800a450:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <HAL_UART_MspInit+0x154>)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800a456:	4b22      	ldr	r3, [pc, #136]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a458:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <HAL_UART_MspInit+0x160>)
 800a45a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800a45c:	4b20      	ldr	r3, [pc, #128]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a45e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800a462:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a464:	4b1e      	ldr	r3, [pc, #120]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a466:	2200      	movs	r2, #0
 800a468:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a46a:	4b1d      	ldr	r3, [pc, #116]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a470:	4b1b      	ldr	r3, [pc, #108]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a476:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a478:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a47e:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a480:	2200      	movs	r2, #0
 800a482:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800a484:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a48a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a48c:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a48e:	2200      	movs	r2, #0
 800a490:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a492:	4b13      	ldr	r3, [pc, #76]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a494:	2200      	movs	r2, #0
 800a496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800a498:	4811      	ldr	r0, [pc, #68]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a49a:	f7f7 fe9f 	bl	80021dc <HAL_DMA_Init>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800a4a4:	f7ff fe28 	bl	800a0f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a4ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <HAL_UART_MspInit+0x15c>)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2105      	movs	r1, #5
 800a4b8:	2047      	movs	r0, #71	; 0x47
 800a4ba:	f7f7 fe65 	bl	8002188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a4be:	2047      	movs	r0, #71	; 0x47
 800a4c0:	f7f7 fe7e 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a4c4:	bf00      	nop
 800a4c6:	3728      	adds	r7, #40	; 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	40011400 	.word	0x40011400
 800a4d0:	40023800 	.word	0x40023800
 800a4d4:	40020800 	.word	0x40020800
 800a4d8:	20004448 	.word	0x20004448
 800a4dc:	400264a0 	.word	0x400264a0
 800a4e0:	200041e4 	.word	0x200041e4
 800a4e4:	40026428 	.word	0x40026428

0800a4e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	605a      	str	r2, [r3, #4]
 800a4f6:	609a      	str	r2, [r3, #8]
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a4fc:	4b43      	ldr	r3, [pc, #268]	; (800a60c <HAL_FMC_MspInit+0x124>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d17e      	bne.n	800a602 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800a504:	4b41      	ldr	r3, [pc, #260]	; (800a60c <HAL_FMC_MspInit+0x124>)
 800a506:	2201      	movs	r2, #1
 800a508:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a50a:	4b41      	ldr	r3, [pc, #260]	; (800a610 <HAL_FMC_MspInit+0x128>)
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	4a40      	ldr	r2, [pc, #256]	; (800a610 <HAL_FMC_MspInit+0x128>)
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	6393      	str	r3, [r2, #56]	; 0x38
 800a516:	4b3e      	ldr	r3, [pc, #248]	; (800a610 <HAL_FMC_MspInit+0x128>)
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800a522:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a526:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a528:	2302      	movs	r3, #2
 800a52a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a530:	2303      	movs	r3, #3
 800a532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a534:	230c      	movs	r3, #12
 800a536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a538:	1d3b      	adds	r3, r7, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4835      	ldr	r0, [pc, #212]	; (800a614 <HAL_FMC_MspInit+0x12c>)
 800a53e:	f7f9 fd5b 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a542:	2360      	movs	r3, #96	; 0x60
 800a544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a546:	2302      	movs	r3, #2
 800a548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a54e:	2303      	movs	r3, #3
 800a550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a552:	230c      	movs	r3, #12
 800a554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a556:	1d3b      	adds	r3, r7, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	482f      	ldr	r0, [pc, #188]	; (800a618 <HAL_FMC_MspInit+0x130>)
 800a55c:	f7f9 fd4c 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800a560:	f248 1337 	movw	r3, #33079	; 0x8137
 800a564:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a566:	2302      	movs	r3, #2
 800a568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a56e:	2303      	movs	r3, #3
 800a570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a572:	230c      	movs	r3, #12
 800a574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a576:	1d3b      	adds	r3, r7, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	4828      	ldr	r0, [pc, #160]	; (800a61c <HAL_FMC_MspInit+0x134>)
 800a57c:	f7f9 fd3c 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800a580:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a584:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a586:	2302      	movs	r3, #2
 800a588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a58e:	2303      	movs	r3, #3
 800a590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a592:	230c      	movs	r3, #12
 800a594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a596:	1d3b      	adds	r3, r7, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4821      	ldr	r0, [pc, #132]	; (800a620 <HAL_FMC_MspInit+0x138>)
 800a59c:	f7f9 fd2c 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800a5a0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800a5a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a5b2:	230c      	movs	r3, #12
 800a5b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a5b6:	1d3b      	adds	r3, r7, #4
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	481a      	ldr	r0, [pc, #104]	; (800a624 <HAL_FMC_MspInit+0x13c>)
 800a5bc:	f7f9 fd1c 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a5c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a5c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4813      	ldr	r0, [pc, #76]	; (800a628 <HAL_FMC_MspInit+0x140>)
 800a5dc:	f7f9 fd0c 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800a5e0:	f64f 7320 	movw	r3, #65312	; 0xff20
 800a5e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a5f6:	1d3b      	adds	r3, r7, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	480c      	ldr	r0, [pc, #48]	; (800a62c <HAL_FMC_MspInit+0x144>)
 800a5fc:	f7f9 fcfc 	bl	8003ff8 <HAL_GPIO_Init>
 800a600:	e000      	b.n	800a604 <HAL_FMC_MspInit+0x11c>
    return;
 800a602:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20003f40 	.word	0x20003f40
 800a610:	40023800 	.word	0x40023800
 800a614:	40021000 	.word	0x40021000
 800a618:	40020400 	.word	0x40020400
 800a61c:	40021800 	.word	0x40021800
 800a620:	40020c00 	.word	0x40020c00
 800a624:	40022000 	.word	0x40022000
 800a628:	40021400 	.word	0x40021400
 800a62c:	40021c00 	.word	0x40021c00

0800a630 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a638:	f7ff ff56 	bl	800a4e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08c      	sub	sp, #48	; 0x30
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 800a654:	2200      	movs	r2, #0
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	2037      	movs	r0, #55	; 0x37
 800a65a:	f7f7 fd95 	bl	8002188 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 800a65e:	2037      	movs	r0, #55	; 0x37
 800a660:	f7f7 fdae 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800a664:	4b1f      	ldr	r3, [pc, #124]	; (800a6e4 <HAL_InitTick+0xa0>)
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	4a1e      	ldr	r2, [pc, #120]	; (800a6e4 <HAL_InitTick+0xa0>)
 800a66a:	f043 0320 	orr.w	r3, r3, #32
 800a66e:	6413      	str	r3, [r2, #64]	; 0x40
 800a670:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <HAL_InitTick+0xa0>)
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	f003 0320 	and.w	r3, r3, #32
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a67c:	f107 0210 	add.w	r2, r7, #16
 800a680:	f107 0314 	add.w	r3, r7, #20
 800a684:	4611      	mov	r1, r2
 800a686:	4618      	mov	r0, r3
 800a688:	f7fa ff24 	bl	80054d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a68c:	f7fa fefa 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 800a690:	4603      	mov	r3, r0
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	4a13      	ldr	r2, [pc, #76]	; (800a6e8 <HAL_InitTick+0xa4>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	0c9b      	lsrs	r3, r3, #18
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800a6a4:	4b11      	ldr	r3, [pc, #68]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6a6:	4a12      	ldr	r2, [pc, #72]	; (800a6f0 <HAL_InitTick+0xac>)
 800a6a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6b0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800a6b2:	4a0e      	ldr	r2, [pc, #56]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800a6c4:	4809      	ldr	r0, [pc, #36]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6c6:	f7fb fbdc 	bl	8005e82 <HAL_TIM_Base_Init>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d104      	bne.n	800a6da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800a6d0:	4806      	ldr	r0, [pc, #24]	; (800a6ec <HAL_InitTick+0xa8>)
 800a6d2:	f7fb fc0b 	bl	8005eec <HAL_TIM_Base_Start_IT>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	e000      	b.n	800a6dc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3730      	adds	r7, #48	; 0x30
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	40023800 	.word	0x40023800
 800a6e8:	431bde83 	.word	0x431bde83
 800a6ec:	20004730 	.word	0x20004730
 800a6f0:	40001400 	.word	0x40001400

0800a6f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a6f8:	bf00      	nop
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a702:	b480      	push	{r7}
 800a704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a706:	e7fe      	b.n	800a706 <HardFault_Handler+0x4>

0800a708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a70c:	e7fe      	b.n	800a70c <MemManage_Handler+0x4>

0800a70e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a70e:	b480      	push	{r7}
 800a710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a712:	e7fe      	b.n	800a712 <BusFault_Handler+0x4>

0800a714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a718:	e7fe      	b.n	800a718 <UsageFault_Handler+0x4>

0800a71a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a71a:	b480      	push	{r7}
 800a71c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a71e:	bf00      	nop
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a72c:	4802      	ldr	r0, [pc, #8]	; (800a738 <TIM7_IRQHandler+0x10>)
 800a72e:	f7fb fc07 	bl	8005f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a732:	bf00      	nop
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20004730 	.word	0x20004730

0800a73c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800a740:	4802      	ldr	r0, [pc, #8]	; (800a74c <DMA2_Stream1_IRQHandler+0x10>)
 800a742:	f7f7 fed9 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800a746:	bf00      	nop
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200041e4 	.word	0x200041e4

0800a750 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a754:	4802      	ldr	r0, [pc, #8]	; (800a760 <DMA2_Stream4_IRQHandler+0x10>)
 800a756:	f7f7 fecf 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800a75a:	bf00      	nop
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	200044f4 	.word	0x200044f4

0800a764 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800a768:	4802      	ldr	r0, [pc, #8]	; (800a774 <DMA2_Stream6_IRQHandler+0x10>)
 800a76a:	f7f7 fec5 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a76e:	bf00      	nop
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20004448 	.word	0x20004448

0800a778 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a77c:	4802      	ldr	r0, [pc, #8]	; (800a788 <USART6_IRQHandler+0x10>)
 800a77e:	f7fb ff33 	bl	80065e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800a782:	bf00      	nop
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	200045c0 	.word	0x200045c0

0800a78c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a790:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <SystemInit+0x5c>)
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a796:	4a14      	ldr	r2, [pc, #80]	; (800a7e8 <SystemInit+0x5c>)
 800a798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a79c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a7a0:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <SystemInit+0x60>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a11      	ldr	r2, [pc, #68]	; (800a7ec <SystemInit+0x60>)
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a7ac:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <SystemInit+0x60>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a7b2:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <SystemInit+0x60>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	490d      	ldr	r1, [pc, #52]	; (800a7ec <SystemInit+0x60>)
 800a7b8:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <SystemInit+0x64>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <SystemInit+0x60>)
 800a7c0:	4a0c      	ldr	r2, [pc, #48]	; (800a7f4 <SystemInit+0x68>)
 800a7c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <SystemInit+0x60>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <SystemInit+0x60>)
 800a7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <SystemInit+0x60>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a7d6:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <SystemInit+0x5c>)
 800a7d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7dc:	609a      	str	r2, [r3, #8]
#endif
}
 800a7de:	bf00      	nop
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	e000ed00 	.word	0xe000ed00
 800a7ec:	40023800 	.word	0x40023800
 800a7f0:	fef6ffff 	.word	0xfef6ffff
 800a7f4:	24003010 	.word	0x24003010

0800a7f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a7f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a7fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a7fe:	e003      	b.n	800a808 <LoopCopyDataInit>

0800a800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a800:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a806:	3104      	adds	r1, #4

0800a808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a808:	480b      	ldr	r0, [pc, #44]	; (800a838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a80a:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a80c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a80e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a810:	d3f6      	bcc.n	800a800 <CopyDataInit>
  ldr  r2, =_sbss
 800a812:	4a0b      	ldr	r2, [pc, #44]	; (800a840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a814:	e002      	b.n	800a81c <LoopFillZerobss>

0800a816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a818:	f842 3b04 	str.w	r3, [r2], #4

0800a81c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a81e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a820:	d3f9      	bcc.n	800a816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a822:	f7ff ffb3 	bl	800a78c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a826:	f000 f811 	bl	800a84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a82a:	f7fe fdd5 	bl	80093d8 <main>
  bx  lr    
 800a82e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a830:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800a834:	0800c634 	.word	0x0800c634
  ldr  r0, =_sdata
 800a838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a83c:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 800a840:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 800a844:	20004770 	.word	0x20004770

0800a848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a848:	e7fe      	b.n	800a848 <ADC_IRQHandler>
	...

0800a84c <__libc_init_array>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	4e0d      	ldr	r6, [pc, #52]	; (800a884 <__libc_init_array+0x38>)
 800a850:	4c0d      	ldr	r4, [pc, #52]	; (800a888 <__libc_init_array+0x3c>)
 800a852:	1ba4      	subs	r4, r4, r6
 800a854:	10a4      	asrs	r4, r4, #2
 800a856:	2500      	movs	r5, #0
 800a858:	42a5      	cmp	r5, r4
 800a85a:	d109      	bne.n	800a870 <__libc_init_array+0x24>
 800a85c:	4e0b      	ldr	r6, [pc, #44]	; (800a88c <__libc_init_array+0x40>)
 800a85e:	4c0c      	ldr	r4, [pc, #48]	; (800a890 <__libc_init_array+0x44>)
 800a860:	f000 f82c 	bl	800a8bc <_init>
 800a864:	1ba4      	subs	r4, r4, r6
 800a866:	10a4      	asrs	r4, r4, #2
 800a868:	2500      	movs	r5, #0
 800a86a:	42a5      	cmp	r5, r4
 800a86c:	d105      	bne.n	800a87a <__libc_init_array+0x2e>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a874:	4798      	blx	r3
 800a876:	3501      	adds	r5, #1
 800a878:	e7ee      	b.n	800a858 <__libc_init_array+0xc>
 800a87a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a87e:	4798      	blx	r3
 800a880:	3501      	adds	r5, #1
 800a882:	e7f2      	b.n	800a86a <__libc_init_array+0x1e>
 800a884:	0800c62c 	.word	0x0800c62c
 800a888:	0800c62c 	.word	0x0800c62c
 800a88c:	0800c62c 	.word	0x0800c62c
 800a890:	0800c630 	.word	0x0800c630

0800a894 <memcpy>:
 800a894:	b510      	push	{r4, lr}
 800a896:	1e43      	subs	r3, r0, #1
 800a898:	440a      	add	r2, r1
 800a89a:	4291      	cmp	r1, r2
 800a89c:	d100      	bne.n	800a8a0 <memcpy+0xc>
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a8:	e7f7      	b.n	800a89a <memcpy+0x6>

0800a8aa <memset>:
 800a8aa:	4402      	add	r2, r0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d100      	bne.n	800a8b4 <memset+0xa>
 800a8b2:	4770      	bx	lr
 800a8b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b8:	e7f9      	b.n	800a8ae <memset+0x4>
	...

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
