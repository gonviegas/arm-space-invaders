
Space_Invaders_Master_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b330  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d90  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c0  0800d2c0  00024074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2c8  0800d2c8  00024074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2c8  0800d2c8  0001d2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2cc  0800d2cc  0001d2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004074  20000000  0800d2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046f4  20004074  08011344  00024074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008768  08011344  00028768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00024074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ced  00000000  00000000  000240a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044d0  00000000  00000000  00049d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e50  00000000  00000000  0004e260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c48  00000000  00000000  000500b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000309b3  00000000  00000000  00051cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018291  00000000  00000000  000826ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012b62a  00000000  00000000  0009a93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008044  00000000  00000000  001c5fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20004074 	.word	0x20004074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b518 	.word	0x0800b518

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20004078 	.word	0x20004078
 800023c:	0800b518 	.word	0x0800b518

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800054a:	49be      	ldr	r1, [pc, #760]	; (8000844 <OTM8009A_Init+0x304>)
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fe1d 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000552:	49bd      	ldr	r1, [pc, #756]	; (8000848 <OTM8009A_Init+0x308>)
 8000554:	2003      	movs	r0, #3
 8000556:	f000 fe19 	bl	800118c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800055a:	49bc      	ldr	r1, [pc, #752]	; (800084c <OTM8009A_Init+0x30c>)
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fe15 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000562:	49bb      	ldr	r1, [pc, #748]	; (8000850 <OTM8009A_Init+0x310>)
 8000564:	2002      	movs	r0, #2
 8000566:	f000 fe11 	bl	800118c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800056a:	49b8      	ldr	r1, [pc, #736]	; (800084c <OTM8009A_Init+0x30c>)
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fe0d 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000572:	49b8      	ldr	r1, [pc, #736]	; (8000854 <OTM8009A_Init+0x314>)
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fe09 	bl	800118c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800057a:	200a      	movs	r0, #10
 800057c:	f000 fa80 	bl	8000a80 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000580:	49b5      	ldr	r1, [pc, #724]	; (8000858 <OTM8009A_Init+0x318>)
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fe02 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000588:	49b4      	ldr	r1, [pc, #720]	; (800085c <OTM8009A_Init+0x31c>)
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fdfe 	bl	800118c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fa75 	bl	8000a80 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000596:	49b2      	ldr	r1, [pc, #712]	; (8000860 <OTM8009A_Init+0x320>)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fdf7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800059e:	49b1      	ldr	r1, [pc, #708]	; (8000864 <OTM8009A_Init+0x324>)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fdf3 	bl	800118c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80005a6:	49b0      	ldr	r1, [pc, #704]	; (8000868 <OTM8009A_Init+0x328>)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fdef 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80005ae:	49af      	ldr	r1, [pc, #700]	; (800086c <OTM8009A_Init+0x32c>)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fdeb 	bl	800118c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80005b6:	49ae      	ldr	r1, [pc, #696]	; (8000870 <OTM8009A_Init+0x330>)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fde7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80005be:	49ad      	ldr	r1, [pc, #692]	; (8000874 <OTM8009A_Init+0x334>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fde3 	bl	800118c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005c6:	499f      	ldr	r1, [pc, #636]	; (8000844 <OTM8009A_Init+0x304>)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fddf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80005ce:	49aa      	ldr	r1, [pc, #680]	; (8000878 <OTM8009A_Init+0x338>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fddb 	bl	800118c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80005d6:	49a9      	ldr	r1, [pc, #676]	; (800087c <OTM8009A_Init+0x33c>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fdd7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80005de:	49a8      	ldr	r1, [pc, #672]	; (8000880 <OTM8009A_Init+0x340>)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fdd3 	bl	800118c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80005e6:	49a7      	ldr	r1, [pc, #668]	; (8000884 <OTM8009A_Init+0x344>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fdcf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80005ee:	49a6      	ldr	r1, [pc, #664]	; (8000888 <OTM8009A_Init+0x348>)
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fdcb 	bl	800118c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80005f6:	49a5      	ldr	r1, [pc, #660]	; (800088c <OTM8009A_Init+0x34c>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fdc7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80005fe:	49a4      	ldr	r1, [pc, #656]	; (8000890 <OTM8009A_Init+0x350>)
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fdc3 	bl	800118c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000606:	49a3      	ldr	r1, [pc, #652]	; (8000894 <OTM8009A_Init+0x354>)
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fdbf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800060e:	4997      	ldr	r1, [pc, #604]	; (800086c <OTM8009A_Init+0x32c>)
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fdbb 	bl	800118c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000616:	498b      	ldr	r1, [pc, #556]	; (8000844 <OTM8009A_Init+0x304>)
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fdb7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800061e:	499e      	ldr	r1, [pc, #632]	; (8000898 <OTM8009A_Init+0x358>)
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fdb3 	bl	800118c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000626:	499d      	ldr	r1, [pc, #628]	; (800089c <OTM8009A_Init+0x35c>)
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fdaf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800062e:	499c      	ldr	r1, [pc, #624]	; (80008a0 <OTM8009A_Init+0x360>)
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fdab 	bl	800118c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000636:	499b      	ldr	r1, [pc, #620]	; (80008a4 <OTM8009A_Init+0x364>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fda7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800063e:	499a      	ldr	r1, [pc, #616]	; (80008a8 <OTM8009A_Init+0x368>)
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fda3 	bl	800118c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000646:	4999      	ldr	r1, [pc, #612]	; (80008ac <OTM8009A_Init+0x36c>)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fd9f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800064e:	4998      	ldr	r1, [pc, #608]	; (80008b0 <OTM8009A_Init+0x370>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fd9b 	bl	800118c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000656:	4989      	ldr	r1, [pc, #548]	; (800087c <OTM8009A_Init+0x33c>)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fd97 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800065e:	4995      	ldr	r1, [pc, #596]	; (80008b4 <OTM8009A_Init+0x374>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fd93 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000666:	4987      	ldr	r1, [pc, #540]	; (8000884 <OTM8009A_Init+0x344>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fd8f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800066e:	4992      	ldr	r1, [pc, #584]	; (80008b8 <OTM8009A_Init+0x378>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fd8b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000676:	4991      	ldr	r1, [pc, #580]	; (80008bc <OTM8009A_Init+0x37c>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fd87 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800067e:	4990      	ldr	r1, [pc, #576]	; (80008c0 <OTM8009A_Init+0x380>)
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fd83 	bl	800118c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000686:	4971      	ldr	r1, [pc, #452]	; (800084c <OTM8009A_Init+0x30c>)
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fd7f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800068e:	498d      	ldr	r1, [pc, #564]	; (80008c4 <OTM8009A_Init+0x384>)
 8000690:	2006      	movs	r0, #6
 8000692:	f000 fd7b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000696:	498c      	ldr	r1, [pc, #560]	; (80008c8 <OTM8009A_Init+0x388>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fd77 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800069e:	498b      	ldr	r1, [pc, #556]	; (80008cc <OTM8009A_Init+0x38c>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f000 fd73 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80006a6:	498a      	ldr	r1, [pc, #552]	; (80008d0 <OTM8009A_Init+0x390>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fd6f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80006ae:	4989      	ldr	r1, [pc, #548]	; (80008d4 <OTM8009A_Init+0x394>)
 80006b0:	200e      	movs	r0, #14
 80006b2:	f000 fd6b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80006b6:	4988      	ldr	r1, [pc, #544]	; (80008d8 <OTM8009A_Init+0x398>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fd67 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80006be:	4987      	ldr	r1, [pc, #540]	; (80008dc <OTM8009A_Init+0x39c>)
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fd63 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80006c6:	4986      	ldr	r1, [pc, #536]	; (80008e0 <OTM8009A_Init+0x3a0>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fd5f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80006ce:	4985      	ldr	r1, [pc, #532]	; (80008e4 <OTM8009A_Init+0x3a4>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fd5b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80006d6:	495d      	ldr	r1, [pc, #372]	; (800084c <OTM8009A_Init+0x30c>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fd57 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80006de:	4982      	ldr	r1, [pc, #520]	; (80008e8 <OTM8009A_Init+0x3a8>)
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 fd53 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80006e6:	4981      	ldr	r1, [pc, #516]	; (80008ec <OTM8009A_Init+0x3ac>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fd4f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80006ee:	4980      	ldr	r1, [pc, #512]	; (80008f0 <OTM8009A_Init+0x3b0>)
 80006f0:	200f      	movs	r0, #15
 80006f2:	f000 fd4b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80006f6:	4974      	ldr	r1, [pc, #464]	; (80008c8 <OTM8009A_Init+0x388>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fd47 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80006fe:	497d      	ldr	r1, [pc, #500]	; (80008f4 <OTM8009A_Init+0x3b4>)
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fd43 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000706:	4972      	ldr	r1, [pc, #456]	; (80008d0 <OTM8009A_Init+0x390>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fd3f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800070e:	497a      	ldr	r1, [pc, #488]	; (80008f8 <OTM8009A_Init+0x3b8>)
 8000710:	200a      	movs	r0, #10
 8000712:	f000 fd3b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000716:	4970      	ldr	r1, [pc, #448]	; (80008d8 <OTM8009A_Init+0x398>)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fd37 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800071e:	4977      	ldr	r1, [pc, #476]	; (80008fc <OTM8009A_Init+0x3bc>)
 8000720:	200f      	movs	r0, #15
 8000722:	f000 fd33 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000726:	496e      	ldr	r1, [pc, #440]	; (80008e0 <OTM8009A_Init+0x3a0>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fd2f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800072e:	4974      	ldr	r1, [pc, #464]	; (8000900 <OTM8009A_Init+0x3c0>)
 8000730:	200f      	movs	r0, #15
 8000732:	f000 fd2b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000736:	4973      	ldr	r1, [pc, #460]	; (8000904 <OTM8009A_Init+0x3c4>)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fd27 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800073e:	4972      	ldr	r1, [pc, #456]	; (8000908 <OTM8009A_Init+0x3c8>)
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fd23 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000746:	4971      	ldr	r1, [pc, #452]	; (800090c <OTM8009A_Init+0x3cc>)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fd1f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800074e:	4970      	ldr	r1, [pc, #448]	; (8000910 <OTM8009A_Init+0x3d0>)
 8000750:	200a      	movs	r0, #10
 8000752:	f000 fd1b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000756:	493d      	ldr	r1, [pc, #244]	; (800084c <OTM8009A_Init+0x30c>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fd17 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800075e:	496d      	ldr	r1, [pc, #436]	; (8000914 <OTM8009A_Init+0x3d4>)
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fd13 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000766:	4961      	ldr	r1, [pc, #388]	; (80008ec <OTM8009A_Init+0x3ac>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fd0f 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800076e:	496a      	ldr	r1, [pc, #424]	; (8000918 <OTM8009A_Init+0x3d8>)
 8000770:	200f      	movs	r0, #15
 8000772:	f000 fd0b 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000776:	4954      	ldr	r1, [pc, #336]	; (80008c8 <OTM8009A_Init+0x388>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fd07 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800077e:	4967      	ldr	r1, [pc, #412]	; (800091c <OTM8009A_Init+0x3dc>)
 8000780:	200f      	movs	r0, #15
 8000782:	f000 fd03 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000786:	4952      	ldr	r1, [pc, #328]	; (80008d0 <OTM8009A_Init+0x390>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fcff 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800078e:	4964      	ldr	r1, [pc, #400]	; (8000920 <OTM8009A_Init+0x3e0>)
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fcfb 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000796:	4950      	ldr	r1, [pc, #320]	; (80008d8 <OTM8009A_Init+0x398>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fcf7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800079e:	4961      	ldr	r1, [pc, #388]	; (8000924 <OTM8009A_Init+0x3e4>)
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fcf3 	bl	800118c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80007a6:	494e      	ldr	r1, [pc, #312]	; (80008e0 <OTM8009A_Init+0x3a0>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fcef 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80007ae:	495e      	ldr	r1, [pc, #376]	; (8000928 <OTM8009A_Init+0x3e8>)
 80007b0:	200f      	movs	r0, #15
 80007b2:	f000 fceb 	bl	800118c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80007b6:	4931      	ldr	r1, [pc, #196]	; (800087c <OTM8009A_Init+0x33c>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fce7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80007be:	495b      	ldr	r1, [pc, #364]	; (800092c <OTM8009A_Init+0x3ec>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fce3 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80007c6:	495a      	ldr	r1, [pc, #360]	; (8000930 <OTM8009A_Init+0x3f0>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fcdf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80007ce:	4959      	ldr	r1, [pc, #356]	; (8000934 <OTM8009A_Init+0x3f4>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fcdb 	bl	800118c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80007d6:	4958      	ldr	r1, [pc, #352]	; (8000938 <OTM8009A_Init+0x3f8>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fcd7 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80007de:	4957      	ldr	r1, [pc, #348]	; (800093c <OTM8009A_Init+0x3fc>)
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fcd3 	bl	800118c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007e6:	4917      	ldr	r1, [pc, #92]	; (8000844 <OTM8009A_Init+0x304>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fccf 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80007ee:	4954      	ldr	r1, [pc, #336]	; (8000940 <OTM8009A_Init+0x400>)
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 fccb 	bl	800118c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007f6:	4913      	ldr	r1, [pc, #76]	; (8000844 <OTM8009A_Init+0x304>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fcc7 	bl	800118c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007fe:	4911      	ldr	r1, [pc, #68]	; (8000844 <OTM8009A_Init+0x304>)
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fcc3 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000806:	494f      	ldr	r1, [pc, #316]	; (8000944 <OTM8009A_Init+0x404>)
 8000808:	2010      	movs	r0, #16
 800080a:	f000 fcbf 	bl	800118c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <OTM8009A_Init+0x304>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fcbb 	bl	800118c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000816:	494c      	ldr	r1, [pc, #304]	; (8000948 <OTM8009A_Init+0x408>)
 8000818:	2010      	movs	r0, #16
 800081a:	f000 fcb7 	bl	800118c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800081e:	494b      	ldr	r1, [pc, #300]	; (800094c <OTM8009A_Init+0x40c>)
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fcb3 	bl	800118c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000826:	2078      	movs	r0, #120	; 0x78
 8000828:	f000 f92a 	bl	8000a80 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 8090 	beq.w	8000954 <OTM8009A_Init+0x414>
 8000834:	2b02      	cmp	r3, #2
 8000836:	d000      	beq.n	800083a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000838:	e091      	b.n	800095e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800083a:	4945      	ldr	r1, [pc, #276]	; (8000950 <OTM8009A_Init+0x410>)
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fca5 	bl	800118c <DSI_IO_WriteCmd>
    break;
 8000842:	e08c      	b.n	800095e <OTM8009A_Init+0x41e>
 8000844:	0800b71c 	.word	0x0800b71c
 8000848:	0800b5d4 	.word	0x0800b5d4
 800084c:	0800b720 	.word	0x0800b720
 8000850:	0800b5d8 	.word	0x0800b5d8
 8000854:	0800b724 	.word	0x0800b724
 8000858:	0800b728 	.word	0x0800b728
 800085c:	0800b72c 	.word	0x0800b72c
 8000860:	0800b730 	.word	0x0800b730
 8000864:	0800b734 	.word	0x0800b734
 8000868:	0800b738 	.word	0x0800b738
 800086c:	0800b73c 	.word	0x0800b73c
 8000870:	0800b740 	.word	0x0800b740
 8000874:	0800b744 	.word	0x0800b744
 8000878:	0800b748 	.word	0x0800b748
 800087c:	0800b74c 	.word	0x0800b74c
 8000880:	0800b750 	.word	0x0800b750
 8000884:	0800b754 	.word	0x0800b754
 8000888:	0800b758 	.word	0x0800b758
 800088c:	0800b75c 	.word	0x0800b75c
 8000890:	0800b760 	.word	0x0800b760
 8000894:	0800b764 	.word	0x0800b764
 8000898:	0800b604 	.word	0x0800b604
 800089c:	0800b768 	.word	0x0800b768
 80008a0:	0800b76c 	.word	0x0800b76c
 80008a4:	0800b770 	.word	0x0800b770
 80008a8:	0800b774 	.word	0x0800b774
 80008ac:	0800b778 	.word	0x0800b778
 80008b0:	0800b77c 	.word	0x0800b77c
 80008b4:	0800b780 	.word	0x0800b780
 80008b8:	0800b784 	.word	0x0800b784
 80008bc:	0800b788 	.word	0x0800b788
 80008c0:	0800b608 	.word	0x0800b608
 80008c4:	0800b60c 	.word	0x0800b60c
 80008c8:	0800b78c 	.word	0x0800b78c
 80008cc:	0800b614 	.word	0x0800b614
 80008d0:	0800b790 	.word	0x0800b790
 80008d4:	0800b624 	.word	0x0800b624
 80008d8:	0800b794 	.word	0x0800b794
 80008dc:	0800b634 	.word	0x0800b634
 80008e0:	0800b798 	.word	0x0800b798
 80008e4:	0800b7d0 	.word	0x0800b7d0
 80008e8:	0800b640 	.word	0x0800b640
 80008ec:	0800b79c 	.word	0x0800b79c
 80008f0:	0800b64c 	.word	0x0800b64c
 80008f4:	0800b65c 	.word	0x0800b65c
 80008f8:	0800b66c 	.word	0x0800b66c
 80008fc:	0800b678 	.word	0x0800b678
 8000900:	0800b688 	.word	0x0800b688
 8000904:	0800b7a0 	.word	0x0800b7a0
 8000908:	0800b698 	.word	0x0800b698
 800090c:	0800b7a4 	.word	0x0800b7a4
 8000910:	0800b6a4 	.word	0x0800b6a4
 8000914:	0800b6b0 	.word	0x0800b6b0
 8000918:	0800b6bc 	.word	0x0800b6bc
 800091c:	0800b6cc 	.word	0x0800b6cc
 8000920:	0800b6dc 	.word	0x0800b6dc
 8000924:	0800b6e8 	.word	0x0800b6e8
 8000928:	0800b6f8 	.word	0x0800b6f8
 800092c:	0800b7d4 	.word	0x0800b7d4
 8000930:	0800b7d8 	.word	0x0800b7d8
 8000934:	0800b7dc 	.word	0x0800b7dc
 8000938:	0800b7e0 	.word	0x0800b7e0
 800093c:	0800b7e4 	.word	0x0800b7e4
 8000940:	0800b708 	.word	0x0800b708
 8000944:	0800b5dc 	.word	0x0800b5dc
 8000948:	0800b5f0 	.word	0x0800b5f0
 800094c:	0800b7a8 	.word	0x0800b7a8
 8000950:	0800b7ac 	.word	0x0800b7ac
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000954:	491a      	ldr	r1, [pc, #104]	; (80009c0 <OTM8009A_Init+0x480>)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 fc18 	bl	800118c <DSI_IO_WriteCmd>
    break;
 800095c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10b      	bne.n	800097c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000964:	4917      	ldr	r1, [pc, #92]	; (80009c4 <OTM8009A_Init+0x484>)
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fc10 	bl	800118c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800096c:	4916      	ldr	r1, [pc, #88]	; (80009c8 <OTM8009A_Init+0x488>)
 800096e:	2004      	movs	r0, #4
 8000970:	f000 fc0c 	bl	800118c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000974:	4915      	ldr	r1, [pc, #84]	; (80009cc <OTM8009A_Init+0x48c>)
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fc08 	bl	800118c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800097c:	4914      	ldr	r1, [pc, #80]	; (80009d0 <OTM8009A_Init+0x490>)
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fc04 	bl	800118c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <OTM8009A_Init+0x494>)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fc00 	bl	800118c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800098c:	4912      	ldr	r1, [pc, #72]	; (80009d8 <OTM8009A_Init+0x498>)
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fbfc 	bl	800118c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000994:	4911      	ldr	r1, [pc, #68]	; (80009dc <OTM8009A_Init+0x49c>)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fbf8 	bl	800118c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800099c:	4910      	ldr	r1, [pc, #64]	; (80009e0 <OTM8009A_Init+0x4a0>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 fbf4 	bl	800118c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <OTM8009A_Init+0x4a4>)
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbf0 	bl	800118c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80009ac:	490e      	ldr	r1, [pc, #56]	; (80009e8 <OTM8009A_Init+0x4a8>)
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fbec 	bl	800118c <DSI_IO_WriteCmd>

  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	0800b7b0 	.word	0x0800b7b0
 80009c4:	0800b7b4 	.word	0x0800b7b4
 80009c8:	0800b70c 	.word	0x0800b70c
 80009cc:	0800b714 	.word	0x0800b714
 80009d0:	0800b7b8 	.word	0x0800b7b8
 80009d4:	0800b7bc 	.word	0x0800b7bc
 80009d8:	0800b7c0 	.word	0x0800b7c0
 80009dc:	0800b7c4 	.word	0x0800b7c4
 80009e0:	0800b7c8 	.word	0x0800b7c8
 80009e4:	0800b71c 	.word	0x0800b71c
 80009e8:	0800b7cc 	.word	0x0800b7cc

080009ec <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <BSP_LED_Init+0x54>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <BSP_LED_Init+0x54>)
 80009fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <BSP_LED_Init+0x54>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <BSP_LED_Init+0x58>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <BSP_LED_Init+0x5c>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 feba 	bl	80037ac <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008

08000a4c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <BSP_LED_On+0x2c>)
 8000a5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <BSP_LED_On+0x30>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f003 f952 	bl	8003d14 <HAL_GPIO_WritePin>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000000 	.word	0x20000000

08000a80 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fe7d 	bl	8001788 <HAL_Delay>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f804 	bl	8000aa8 <BSP_LCD_InitEx>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000ab2:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000ac0:	f000 f936 	bl	8000d30 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000ac4:	f000 fb8c 	bl	80011e0 <LCD_IO_GetID>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ace:	2b11      	cmp	r3, #17
 8000ad0:	d001      	beq.n	8000ad6 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e113      	b.n	8000cfe <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000ad6:	f000 fb8b 	bl	80011f0 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8000ada:	4b8b      	ldr	r3, [pc, #556]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000adc:	4a8b      	ldr	r2, [pc, #556]	; (8000d0c <BSP_LCD_InitEx+0x264>)
 8000ade:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000ae0:	4889      	ldr	r0, [pc, #548]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000ae2:	f001 ff55 	bl	8002990 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000aea:	2305      	movs	r3, #5
 8000aec:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000af2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000af8:	4b83      	ldr	r3, [pc, #524]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	4a83      	ldr	r2, [pc, #524]	; (8000d10 <BSP_LCD_InitEx+0x268>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	0a9b      	lsrs	r3, r3, #10
 8000b0a:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000b0c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	487c      	ldr	r0, [pc, #496]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000b16:	f001 fe21 	bl	800275c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d108      	bne.n	8000b32 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000b20:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b26:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b28:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b2a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b38:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000b3a:	4b77      	ldr	r3, [pc, #476]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b40:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000b42:	4b74      	ldr	r3, [pc, #464]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8000b48:	4b73      	ldr	r3, [pc, #460]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000b52:	230f      	movs	r3, #15
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8000b56:	2310      	movs	r3, #16
 8000b58:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000b5e:	2322      	movs	r3, #34	; 0x22
 8000b60:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000b62:	2322      	movs	r3, #34	; 0x22
 8000b64:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000b66:	4b6d      	ldr	r3, [pc, #436]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b6c:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b6e:	2205      	movs	r2, #5
 8000b70:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b78:	4b68      	ldr	r3, [pc, #416]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000b7e:	4b67      	ldr	r3, [pc, #412]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000b84:	4b65      	ldr	r3, [pc, #404]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b8c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b90:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000b92:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000b98:	4a60      	ldr	r2, [pc, #384]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba2:	fb02 f203 	mul.w	r2, r2, r3
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4a5b      	ldr	r2, [pc, #364]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bae:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bb4:	fb02 f203 	mul.w	r2, r2, r3
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	441a      	add	r2, r3
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	441a      	add	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	4413      	add	r3, r2
 8000bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd2:	fb02 f203 	mul.w	r2, r2, r3
 8000bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000be0:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000be6:	4a4d      	ldr	r2, [pc, #308]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000bec:	4a4b      	ldr	r2, [pc, #300]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000bfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c06:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c22:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000c3c:	4937      	ldr	r1, [pc, #220]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000c3e:	4832      	ldr	r0, [pc, #200]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000c40:	f001 fffe 	bl	8002c40 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c4a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c56:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	441a      	add	r2, r3
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4413      	add	r3, r2
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c68:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	441a      	add	r2, r3
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	441a      	add	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <BSP_LCD_InitEx+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c86:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <BSP_LCD_InitEx+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000c8e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000c98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c9c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <BSP_LCD_InitEx+0x27c>)
 8000cac:	f004 f806 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <BSP_LCD_InitEx+0x280>)
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <BSP_LCD_InitEx+0x274>)
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cd8:	f003 fade 	bl	8004298 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <BSP_LCD_InitEx+0x278>)
 8000cde:	f003 f833 	bl	8003d48 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <BSP_LCD_InitEx+0x260>)
 8000ce4:	f002 fc3e 	bl	8003564 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000ce8:	f000 fb68 	bl	80013bc <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <BSP_LCD_InitEx+0x284>)
 8000cee:	f000 f901 	bl	8000ef4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fc22 	bl	8000540 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3740      	adds	r7, #64	; 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20008088 	.word	0x20008088
 8000d0c:	40016c00 	.word	0x40016c00
 8000d10:	43215e57 	.word	0x43215e57
 8000d14:	20000018 	.word	0x20000018
 8000d18:	2000001c 	.word	0x2000001c
 8000d1c:	20004090 	.word	0x20004090
 8000d20:	20007fe0 	.word	0x20007fe0
 8000d24:	20004118 	.word	0x20004118
 8000d28:	40016800 	.word	0x40016800
 8000d2c:	20000010 	.word	0x20000010

08000d30 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <BSP_LCD_Reset+0x68>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d52:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d66:	f002 fd21 	bl	80037ac <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d72:	f002 ffcf 	bl	8003d14 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000d76:	2014      	movs	r0, #20
 8000d78:	f000 fd06 	bl	8001788 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <BSP_LCD_Reset+0x6c>)
 8000d84:	f002 ffc6 	bl	8003d14 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f000 fcfd 	bl	8001788 <HAL_Delay>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40022400 	.word	0x40022400

08000da0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <BSP_LCD_GetXSize+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000018 	.word	0x20000018

08000db8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <BSP_LCD_GetYSize+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000001c 	.word	0x2000001c

08000dd0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000de0:	f7ff ffde 	bl	8000da0 <BSP_LCD_GetXSize>
 8000de4:	4603      	mov	r3, r0
 8000de6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000dec:	f7ff ffe4 	bl	8000db8 <BSP_LCD_GetYSize>
 8000df0:	4603      	mov	r3, r0
 8000df2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000dfc:	23ff      	movs	r3, #255	; 0xff
 8000dfe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000e20:	f7ff ffbe 	bl	8000da0 <BSP_LCD_GetXSize>
 8000e24:	4603      	mov	r3, r0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000e28:	f7ff ffc6 	bl	8000db8 <BSP_LCD_GetYSize>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000e30:	88fa      	ldrh	r2, [r7, #6]
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000e3a:	f003 f855 	bl	8003ee8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	490c      	ldr	r1, [pc, #48]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3308      	adds	r3, #8
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000e66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	4907      	ldr	r1, [pc, #28]	; (8000e88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3740      	adds	r7, #64	; 0x40
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20007fe0 	.word	0x20007fe0
 8000e88:	20004100 	.word	0x20004100
 8000e8c:	20000010 	.word	0x20000010

08000e90 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <BSP_LCD_SetTextColor+0x28>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <BSP_LCD_SetTextColor+0x2c>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200040fc 	.word	0x200040fc
 8000ebc:	20004100 	.word	0x20004100

08000ec0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <BSP_LCD_SetBackColor+0x2c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <BSP_LCD_SetBackColor+0x30>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200040fc 	.word	0x200040fc
 8000ef0:	20004100 	.word	0x20004100

08000ef4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <BSP_LCD_SetFont+0x2c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4908      	ldr	r1, [pc, #32]	; (8000f24 <BSP_LCD_SetFont+0x30>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200040fc 	.word	0x200040fc
 8000f24:	20004100 	.word	0x20004100

08000f28 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <BSP_LCD_Clear+0x48>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <BSP_LCD_Clear+0x48>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <BSP_LCD_Clear+0x4c>)
 8000f3a:	2134      	movs	r1, #52	; 0x34
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	335c      	adds	r3, #92	; 0x5c
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461d      	mov	r5, r3
 8000f48:	f7ff ff2a 	bl	8000da0 <BSP_LCD_GetXSize>
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	f7ff ff33 	bl	8000db8 <BSP_LCD_GetYSize>
 8000f52:	4602      	mov	r2, r0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	4632      	mov	r2, r6
 8000f60:	4629      	mov	r1, r5
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 f9ae 	bl	80012c4 <LL_FillBuffer>
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f70:	200040fc 	.word	0x200040fc
 8000f74:	20007fe0 	.word	0x20007fe0

08000f78 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	; 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	330a      	adds	r3, #10
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	330b      	adds	r3, #11
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	441a      	add	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330c      	adds	r3, #12
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	441a      	add	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	330d      	adds	r3, #13
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	061b      	lsls	r3, r3, #24
 8000fbc:	4413      	add	r3, r2
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3312      	adds	r3, #18
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3313      	adds	r3, #19
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	441a      	add	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3314      	adds	r3, #20
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	041b      	lsls	r3, r3, #16
 8000fda:	441a      	add	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3315      	adds	r3, #21
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	061b      	lsls	r3, r3, #24
 8000fe4:	4413      	add	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3316      	adds	r3, #22
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3317      	adds	r3, #23
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	441a      	add	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3319      	adds	r3, #25
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	061b      	lsls	r3, r3, #24
 800100c:	4413      	add	r3, r2
 800100e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	331c      	adds	r3, #28
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	331d      	adds	r3, #29
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	4413      	add	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <BSP_LCD_DrawBitmap+0x158>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <BSP_LCD_DrawBitmap+0x15c>)
 800102a:	2134      	movs	r1, #52	; 0x34
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	4413      	add	r3, r2
 8001032:	335c      	adds	r3, #92	; 0x5c
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	f7ff feb3 	bl	8000da0 <BSP_LCD_GetXSize>
 800103a:	4602      	mov	r2, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	fb03 f202 	mul.w	r2, r3, r2
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4423      	add	r3, r4
 800104a:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	3b20      	subs	r3, #32
 8001050:	2b07      	cmp	r3, #7
 8001052:	d802      	bhi.n	800105a <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e008      	b.n	800106c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	3b10      	subs	r3, #16
 800105e:	2b07      	cmp	r3, #7
 8001060:	d802      	bhi.n	8001068 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e001      	b.n	800106c <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3b01      	subs	r3, #1
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	08d2      	lsrs	r2, r2, #3
 800107a:	fb02 f203 	mul.w	r2, r2, r3
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	4413      	add	r3, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
 800108c:	e018      	b.n	80010c0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 800108e:	6a39      	ldr	r1, [r7, #32]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f94d 	bl	8001334 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 800109a:	f7ff fe81 	bl	8000da0 <BSP_LCD_GetXSize>
 800109e:	4603      	mov	r3, r0
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	6a3a      	ldr	r2, [r7, #32]
 80010a4:	4413      	add	r3, r2
 80010a6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	425b      	negs	r3, r3
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3e2      	bcc.n	800108e <BSP_LCD_DrawBitmap+0x116>
  }
}
 80010c8:	bf00      	nop
 80010ca:	372c      	adds	r7, #44	; 0x2c
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	200040fc 	.word	0x200040fc
 80010d4:	20007fe0 	.word	0x20007fe0

080010d8 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af02      	add	r7, sp, #8
 80010e0:	4604      	mov	r4, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4623      	mov	r3, r4
 80010ea:	80fb      	strh	r3, [r7, #6]
 80010ec:	4603      	mov	r3, r0
 80010ee:	80bb      	strh	r3, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <BSP_LCD_FillRect+0xa8>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4920      	ldr	r1, [pc, #128]	; (8001184 <BSP_LCD_FillRect+0xac>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff febe 	bl	8000e90 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <BSP_LCD_FillRect+0xa8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <BSP_LCD_FillRect+0xb0>)
 800111a:	2134      	movs	r1, #52	; 0x34
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	335c      	adds	r3, #92	; 0x5c
 8001124:	681c      	ldr	r4, [r3, #0]
 8001126:	f7ff fe3b 	bl	8000da0 <BSP_LCD_GetXSize>
 800112a:	4602      	mov	r2, r0
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	fb03 f202 	mul.w	r2, r3, r2
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4423      	add	r3, r4
 800113a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <BSP_LCD_FillRect+0xa8>)
 800113e:	681c      	ldr	r4, [r3, #0]
 8001140:	68fd      	ldr	r5, [r7, #12]
 8001142:	887e      	ldrh	r6, [r7, #2]
 8001144:	f8b7 8000 	ldrh.w	r8, [r7]
 8001148:	f7ff fe2a 	bl	8000da0 <BSP_LCD_GetXSize>
 800114c:	4602      	mov	r2, r0
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	1ad1      	subs	r1, r2, r3
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <BSP_LCD_FillRect+0xa8>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <BSP_LCD_FillRect+0xac>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4403      	add	r3, r0
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	9100      	str	r1, [sp, #0]
 8001168:	4643      	mov	r3, r8
 800116a:	4632      	mov	r2, r6
 800116c:	4629      	mov	r1, r5
 800116e:	4620      	mov	r0, r4
 8001170:	f000 f8a8 	bl	80012c4 <LL_FillBuffer>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800117e:	bf00      	nop
 8001180:	200040fc 	.word	0x200040fc
 8001184:	20004100 	.word	0x20004100
 8001188:	20007fe0 	.word	0x20007fe0

0800118c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d80d      	bhi.n	80011b8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	2215      	movs	r2, #21
 80011ae:	2100      	movs	r1, #0
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <DSI_IO_WriteCmd+0x50>)
 80011b2:	f002 fa13 	bl	80035dc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80011b6:	e00d      	b.n	80011d4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2239      	movs	r2, #57	; 0x39
 80011cc:	2100      	movs	r1, #0
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <DSI_IO_WriteCmd+0x50>)
 80011d0:	f002 fa26 	bl	8003620 <HAL_DSI_LongWrite>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20008088 	.word	0x20008088

080011e0 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80011e4:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 80011fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001218:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001224:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 800122c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001248:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001254:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 800125c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001278:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <BSP_LCD_MspInit+0xd0>)
 8001280:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001284:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2103      	movs	r1, #3
 800128a:	2058      	movs	r0, #88	; 0x58
 800128c:	f000 fb56 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001290:	2058      	movs	r0, #88	; 0x58
 8001292:	f000 fb6f 	bl	8001974 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2103      	movs	r1, #3
 800129a:	205a      	movs	r0, #90	; 0x5a
 800129c:	f000 fb4e 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012a0:	205a      	movs	r0, #90	; 0x5a
 80012a2:	f000 fb67 	bl	8001974 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2103      	movs	r1, #3
 80012aa:	2062      	movs	r0, #98	; 0x62
 80012ac:	f000 fb46 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80012b0:	2062      	movs	r0, #98	; 0x62
 80012b2:	f000 fb5f 	bl	8001974 <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <LL_FillBuffer+0x68>)
 80012d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012d8:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <LL_FillBuffer+0x68>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <LL_FillBuffer+0x68>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <LL_FillBuffer+0x68>)
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <LL_FillBuffer+0x6c>)
 80012ea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <LL_FillBuffer+0x68>)
 80012ee:	f000 ff45 	bl	800217c <HAL_DMA2D_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d115      	bne.n	8001324 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <LL_FillBuffer+0x68>)
 80012fc:	f001 f8ac 	bl	8002458 <HAL_DMA2D_ConfigLayer>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10e      	bne.n	8001324 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <LL_FillBuffer+0x68>)
 8001312:	f000 ff8d 	bl	8002230 <HAL_DMA2D_Start>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800131c:	210a      	movs	r1, #10
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <LL_FillBuffer+0x68>)
 8001320:	f000 ffb1 	bl	8002286 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20007f88 	.word	0x20007f88
 8001330:	4002b000 	.word	0x4002b000

08001334 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001348:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001358:	2200      	movs	r2, #0
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800136a:	2200      	movs	r2, #0
 800136c:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <LL_ConvertLineToARGB8888+0x84>)
 8001372:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001376:	f000 ff01 	bl	800217c <HAL_DMA2D_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d115      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8001380:	2101      	movs	r1, #1
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001384:	f001 f868 	bl	8002458 <HAL_DMA2D_ConfigLayer>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10e      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800139a:	f000 ff49 	bl	8002230 <HAL_DMA2D_Start>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80013a4:	210a      	movs	r1, #10
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 80013a8:	f000 ff6d 	bl	8002286 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20007f88 	.word	0x20007f88
 80013b8:	4002b000 	.word	0x4002b000

080013bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <BSP_SDRAM_Init+0xac>)
 80013c2:	4a2a      	ldr	r2, [pc, #168]	; (800146c <BSP_SDRAM_Init+0xb0>)
 80013c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013da:	2207      	movs	r2, #7
 80013dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <BSP_SDRAM_Init+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <BSP_SDRAM_Init+0xac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <BSP_SDRAM_Init+0xac>)
 80013fe:	2204      	movs	r2, #4
 8001400:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <BSP_SDRAM_Init+0xac>)
 8001404:	2220      	movs	r2, #32
 8001406:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <BSP_SDRAM_Init+0xac>)
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <BSP_SDRAM_Init+0xac>)
 8001410:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001414:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <BSP_SDRAM_Init+0xac>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <BSP_SDRAM_Init+0xac>)
 800141e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001422:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <BSP_SDRAM_Init+0xac>)
 8001426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <BSP_SDRAM_Init+0xac>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001432:	2100      	movs	r1, #0
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <BSP_SDRAM_Init+0xac>)
 8001436:	f000 f87f 	bl	8001538 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <BSP_SDRAM_Init+0xb4>)
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <BSP_SDRAM_Init+0xac>)
 800143e:	f004 f863 	bl	8005508 <HAL_SDRAM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <BSP_SDRAM_Init+0xb8>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e002      	b.n	8001456 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <BSP_SDRAM_Init+0xb8>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001456:	f240 6003 	movw	r0, #1539	; 0x603
 800145a:	f000 f80d 	bl	8001478 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <BSP_SDRAM_Init+0xb8>)
 8001460:	781b      	ldrb	r3, [r3, #0]
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200080a4 	.word	0x200080a4
 800146c:	a0000140 	.word	0xa0000140
 8001470:	200041a8 	.word	0x200041a8
 8001474:	20000020 	.word	0x20000020

08001478 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800148c:	2210      	movs	r2, #16
 800148e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001492:	2201      	movs	r2, #1
 8001494:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a0:	4923      	ldr	r1, [pc, #140]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014a2:	4824      	ldr	r0, [pc, #144]	; (8001534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80014a4:	f004 f864 	bl	8005570 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f96d 	bl	8001788 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014b6:	2210      	movs	r2, #16
 80014b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014bc:	2201      	movs	r2, #1
 80014be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80014c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ca:	4919      	ldr	r1, [pc, #100]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80014ce:	f004 f84f 	bl	8005570 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014da:	2210      	movs	r2, #16
 80014dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80014f2:	f004 f83d 	bl	8005570 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80014f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80014fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80014fe:	2204      	movs	r2, #4
 8001500:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001504:	2210      	movs	r2, #16
 8001506:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800150a:	2201      	movs	r2, #1
 800150c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001512:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001518:	4905      	ldr	r1, [pc, #20]	; (8001530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800151c:	f004 f828 	bl	8005570 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001524:	f004 f84f 	bl	80055c6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200041c4 	.word	0x200041c4
 8001534:	200080a4 	.word	0x200080a4

08001538 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	4a70      	ldr	r2, [pc, #448]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6393      	str	r3, [r2, #56]	; 0x38
 800154e:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800155a:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b68      	ldr	r3, [pc, #416]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a64      	ldr	r2, [pc, #400]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	623b      	str	r3, [r7, #32]
 8001588:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a5e      	ldr	r2, [pc, #376]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <BSP_SDRAM_MspInit+0x1d0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800160e:	230c      	movs	r3, #12
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001612:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	483b      	ldr	r0, [pc, #236]	; (800170c <BSP_SDRAM_MspInit+0x1d4>)
 8001620:	f002 f8c4 	bl	80037ac <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001624:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800162a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	4837      	ldr	r0, [pc, #220]	; (8001710 <BSP_SDRAM_MspInit+0x1d8>)
 8001632:	f002 f8bb 	bl	80037ac <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001636:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	4619      	mov	r1, r3
 8001642:	4834      	ldr	r0, [pc, #208]	; (8001714 <BSP_SDRAM_MspInit+0x1dc>)
 8001644:	f002 f8b2 	bl	80037ac <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001648:	f248 1337 	movw	r3, #33079	; 0x8137
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800164e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	4830      	ldr	r0, [pc, #192]	; (8001718 <BSP_SDRAM_MspInit+0x1e0>)
 8001656:	f002 f8a9 	bl	80037ac <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800165a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <BSP_SDRAM_MspInit+0x1e4>)
 8001668:	f002 f8a0 	bl	80037ac <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800166c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001676:	4619      	mov	r1, r3
 8001678:	4829      	ldr	r0, [pc, #164]	; (8001720 <BSP_SDRAM_MspInit+0x1e8>)
 800167a:	f002 f897 	bl	80037ac <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 8001694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001698:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 800169c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016c0:	2203      	movs	r2, #3
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <BSP_SDRAM_MspInit+0x1f0>)
 80016d4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80016e2:	4810      	ldr	r0, [pc, #64]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016e4:	f000 fa02 	bl	8001aec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <BSP_SDRAM_MspInit+0x1ec>)
 80016ea:	f000 f951 	bl	8001990 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	2038      	movs	r0, #56	; 0x38
 80016f4:	f000 f922 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80016f8:	2038      	movs	r0, #56	; 0x38
 80016fa:	f000 f93b 	bl	8001974 <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3740      	adds	r7, #64	; 0x40
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40021400 	.word	0x40021400
 8001718:	40021800 	.word	0x40021800
 800171c:	40021c00 	.word	0x40021c00
 8001720:	40022000 	.word	0x40022000
 8001724:	200041d4 	.word	0x200041d4
 8001728:	40026410 	.word	0x40026410

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f8f8 	bl	8001926 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	2000      	movs	r0, #0
 8001738:	f009 fdbc 	bl	800b2b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f009 fb2c 	bl	800ad98 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000021 	.word	0x20000021
 800176c:	200080d8 	.word	0x200080d8

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200080d8 	.word	0x200080d8

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_Delay+0x40>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000021 	.word	0x20000021

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00
 8001810:	05fa0000 	.word	0x05fa0000

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff4c 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194e:	f7ff ff61 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001952:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	6978      	ldr	r0, [r7, #20]
 800195a:	f7ff ffb1 	bl	80018c0 <NVIC_EncodePriority>
 800195e:	4602      	mov	r2, r0
 8001960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff80 	bl	800186c <__NVIC_SetPriority>
}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff54 	bl	8001830 <__NVIC_EnableIRQ>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff fee8 	bl	8001770 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e099      	b.n	8001ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019cc:	e00f      	b.n	80019ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ce:	f7ff fecf 	bl	8001770 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d908      	bls.n	80019ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e078      	b.n	8001ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e8      	bne.n	80019ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_DMA_Init+0x158>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4313      	orrs	r3, r2
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f023 0307 	bic.w	r3, r3, #7
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d117      	bne.n	8001ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 faf7 	bl	8002088 <DMA_CheckFifoParam>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e016      	b.n	8001ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 faae 	bl	800201c <DMA_CalcBaseAndBitshift>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	223f      	movs	r2, #63	; 0x3f
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	e010803f 	.word	0xe010803f

08001aec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e050      	b.n	8001ba0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e048      	b.n	8001ba0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2221      	movs	r2, #33	; 0x21
 8001b4c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fa64 	bl	800201c <DMA_CalcBaseAndBitshift>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Start_IT+0x26>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e048      	b.n	8001c60 <HAL_DMA_Start_IT+0xb8>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d137      	bne.n	8001c52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f9e2 	bl	8001fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	223f      	movs	r2, #63	; 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0216 	orr.w	r2, r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d004      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00c      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cb8:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_DMA_IRQHandler+0x258>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a92      	ldr	r2, [pc, #584]	; (8001f08 <HAL_DMA_IRQHandler+0x25c>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2208      	movs	r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2204      	movs	r2, #4
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2204      	movs	r2, #4
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2210      	movs	r2, #16
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d043      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03c      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2210      	movs	r2, #16
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d018      	beq.n	8001dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
 8001dda:	e01f      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0208 	bic.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2220      	movs	r2, #32
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 808e 	beq.w	8001f4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8086 	beq.w	8001f4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2220      	movs	r2, #32
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d136      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0216 	bic.w	r2, r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x1da>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	223f      	movs	r2, #63	; 0x3f
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07d      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
        }
        return;
 8001ec2:	e078      	b.n	8001fb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01c      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d108      	bne.n	8001ef2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d030      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e02b      	b.n	8001f4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d027      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e022      	b.n	8001f4a <HAL_DMA_IRQHandler+0x29e>
 8001f04:	20004070 	.word	0x20004070
 8001f08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d032      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2205      	movs	r2, #5
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d307      	bcc.n	8001f92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f2      	bne.n	8001f76 <HAL_DMA_IRQHandler+0x2ca>
 8001f90:	e000      	b.n	8001f94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fb6:	bf00      	nop
    }
  }
}
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d108      	bne.n	8002000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ffe:	e007      	b.n	8002010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3b10      	subs	r3, #16
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <DMA_CalcBaseAndBitshift+0x60>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <DMA_CalcBaseAndBitshift+0x64>)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d908      	bls.n	800205c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <DMA_CalcBaseAndBitshift+0x68>)
 8002052:	4013      	ands	r3, r2
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	659a      	str	r2, [r3, #88]	; 0x58
 800205a:	e006      	b.n	800206a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <DMA_CalcBaseAndBitshift+0x68>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	aaaaaaab 	.word	0xaaaaaaab
 8002080:	0800d2a0 	.word	0x0800d2a0
 8002084:	fffffc00 	.word	0xfffffc00

08002088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11f      	bne.n	80020e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d855      	bhi.n	8002154 <DMA_CheckFifoParam+0xcc>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <DMA_CheckFifoParam+0x28>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	080020d3 	.word	0x080020d3
 80020b8:	080020c1 	.word	0x080020c1
 80020bc:	08002155 	.word	0x08002155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d045      	beq.n	8002158 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e042      	b.n	8002158 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020da:	d13f      	bne.n	800215c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e0:	e03c      	b.n	800215c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ea:	d121      	bne.n	8002130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d836      	bhi.n	8002160 <DMA_CheckFifoParam+0xd8>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <DMA_CheckFifoParam+0x70>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800210f 	.word	0x0800210f
 8002100:	08002109 	.word	0x08002109
 8002104:	08002121 	.word	0x08002121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	e02f      	b.n	800216e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211e:	e021      	b.n	8002164 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002128:	d11e      	bne.n	8002168 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800212e:	e01b      	b.n	8002168 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d902      	bls.n	800213c <DMA_CheckFifoParam+0xb4>
 8002136:	2b03      	cmp	r3, #3
 8002138:	d003      	beq.n	8002142 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800213a:	e018      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e015      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00e      	beq.n	800216c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      break;
 8002152:	e00b      	b.n	800216c <DMA_CheckFifoParam+0xe4>
      break;
 8002154:	bf00      	nop
 8002156:	e00a      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 8002158:	bf00      	nop
 800215a:	e008      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 800215c:	bf00      	nop
 800215e:	e006      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 8002160:	bf00      	nop
 8002162:	e004      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 8002164:	bf00      	nop
 8002166:	e002      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;   
 8002168:	bf00      	nop
 800216a:	e000      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 800216c:	bf00      	nop
    }
  } 
  
  return status; 
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e049      	b.n	8002222 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f008 fe20 	bl	800ade8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	f023 0107 	bic.w	r1, r3, #7
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_DMA2D_Init+0xb0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68d1      	ldr	r1, [r2, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	051a      	lsls	r2, r3, #20
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	055b      	lsls	r3, r3, #21
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	ffffc000 	.word	0xffffc000

08002230 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_DMA2D_Start+0x1c>
 8002248:	2302      	movs	r3, #2
 800224a:	e018      	b.n	800227e <HAL_DMA2D_Start+0x4e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f994 	bl	8002594 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d056      	beq.n	8002350 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80022a2:	f7ff fa65 	bl	8001770 <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80022a8:	e04b      	b.n	8002342 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d023      	beq.n	8002304 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0a5      	b.n	8002450 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d01a      	beq.n	8002342 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800230c:	f7ff fa30 	bl	8001770 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d302      	bcc.n	8002322 <HAL_DMA2D_PollForTransfer+0x9c>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e086      	b.n	8002450 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ac      	beq.n	80022aa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d061      	beq.n	8002436 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002372:	f7ff f9fd 	bl	8001770 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002378:	e056      	b.n	8002428 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02e      	beq.n	80023ea <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0204 	orr.w	r2, r3, #4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0202 	orr.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2229      	movs	r2, #41	; 0x29
 80023d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e032      	b.n	8002450 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d01a      	beq.n	8002428 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80023f2:	f7ff f9bd 	bl	8001770 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <HAL_DMA2D_PollForTransfer+0x182>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e013      	b.n	8002450 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0a1      	beq.n	800237a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2212      	movs	r2, #18
 800243c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_DMA2D_ConfigLayer+0x20>
 8002474:	2302      	movs	r3, #2
 8002476:	e084      	b.n	8002582 <HAL_DMA2D_ConfigLayer+0x12a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	3320      	adds	r3, #32
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80024ac:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_DMA2D_ConfigLayer+0x138>)
 80024ba:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b0a      	cmp	r3, #10
 80024c2:	d003      	beq.n	80024cc <HAL_DMA2D_ConfigLayer+0x74>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d107      	bne.n	80024dc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e005      	b.n	80024e8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d120      	bne.n	8002530 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	ea02 0103 	and.w	r1, r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	430a      	orrs	r2, r1
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b0a      	cmp	r3, #10
 8002516:	d003      	beq.n	8002520 <HAL_DMA2D_ConfigLayer+0xc8>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d127      	bne.n	8002570 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
 800252e:	e01f      	b.n	8002570 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	ea02 0103 	and.w	r1, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	430a      	orrs	r2, r1
 8002546:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d003      	beq.n	8002562 <HAL_DMA2D_ConfigLayer+0x10a>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b09      	cmp	r3, #9
 8002560:	d106      	bne.n	8002570 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800256e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	ff33000f 	.word	0xff33000f

08002594 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002594:	b480      	push	{r7}
 8002596:	b08b      	sub	sp, #44	; 0x2c
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025cc:	d174      	bne.n	80026b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
 8002604:	e053      	b.n	80026ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d106      	bne.n	800261c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e048      	b.n	80026ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d111      	bne.n	8002648 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	0cdb      	lsrs	r3, r3, #19
 8002628:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	0a9b      	lsrs	r3, r3, #10
 800262e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	02db      	lsls	r3, r3, #11
 800263e:	4313      	orrs	r3, r2
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e032      	b.n	80026ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d117      	bne.n	8002680 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	0fdb      	lsrs	r3, r3, #31
 8002654:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	0cdb      	lsrs	r3, r3, #19
 800265a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08db      	lsrs	r3, r3, #3
 8002666:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	431a      	orrs	r2, r3
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	03db      	lsls	r3, r3, #15
 8002676:	4313      	orrs	r3, r2
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e016      	b.n	80026ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	0f1b      	lsrs	r3, r3, #28
 8002684:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0d1b      	lsrs	r3, r3, #20
 800268a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	0b1b      	lsrs	r3, r3, #12
 8002690:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	011a      	lsls	r2, r3, #4
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	431a      	orrs	r2, r3
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	031b      	lsls	r3, r3, #12
 80026a6:	4313      	orrs	r3, r2
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80026b6:	e003      	b.n	80026c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	60da      	str	r2, [r3, #12]
}
 80026c0:	bf00      	nop
 80026c2:	372c      	adds	r7, #44	; 0x2c
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	019a      	lsls	r2, r3, #6
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	431a      	orrs	r2, r3
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800270c:	f7ff f830 	bl	8001770 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002712:	e009      	b.n	8002728 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002714:	f7ff f82c 	bl	8001770 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002722:	d901      	bls.n	8002728 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e015      	b.n	8002754 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	019a      	lsls	r2, r3, #6
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	ea42 0103 	orr.w	r1, r2, r3
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e106      	b.n	800297e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7c5b      	ldrb	r3, [r3, #17]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f008 fb54 	bl	800ae28 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800279a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ae:	f7fe ffdf 	bl	8001770 <HAL_GetTick>
 80027b2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80027b6:	f7fe ffdb 	bl	8001770 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	d901      	bls.n	80027ca <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0d9      	b.n	800297e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ed      	beq.n	80027b6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_DSI_Init+0x22c>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	02db      	lsls	r3, r3, #11
 8002802:	431a      	orrs	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283e:	f7fe ff97 	bl	8001770 <HAL_GetTick>
 8002842:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002844:	e009      	b.n	800285a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002846:	f7fe ff93 	bl	8001770 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002854:	d901      	bls.n	800285a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e091      	b.n	800297e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0ed      	beq.n	8002846 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0206 	orr.w	r2, r2, #6
 800287a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0203 	bic.w	r2, r2, #3
 800288e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0203 	bic.w	r2, r2, #3
 80028bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_DSI_Init+0x1aa>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	e000      	b.n	8002908 <HAL_DSI_Init+0x1ac>
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_DSI_Init+0x230>)
 800290e:	fb02 f203 	mul.w	r2, r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	409a      	lsls	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800293e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	430a      	orrs	r2, r1
 8002952:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	fffc8603 	.word	0xfffc8603
 800298c:	003d0900 	.word	0x003d0900

08002990 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e066      	b.n	8002a70 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0206 	bic.w	r2, r2, #6
 8002a02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002a42:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f008 fa2a 	bl	800aeb0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7c1b      	ldrb	r3, [r3, #16]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_DSI_ConfigErrorMonitor+0x16>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0aa      	b.n	8002be4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002ae8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0202 	orr.w	r2, r2, #2
 8002b24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 020c 	orr.w	r2, r2, #12
 8002b42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0210 	orr.w	r2, r2, #16
 8002b60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002bd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7c1b      	ldrb	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_DSI_SetGenericVCID+0x16>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e016      	b.n	8002c34 <HAL_DSI_SetGenericVCID+0x44>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0203 	bic.w	r2, r2, #3
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7c1b      	ldrb	r3, [r3, #16]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_DSI_ConfigVideoMode+0x16>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e1ee      	b.n	8003034 <HAL_DSI_ConfigVideoMode+0x3f4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0203 	bic.w	r2, r2, #3
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b8b      	ldr	r3, [pc, #556]	; (8002edc <HAL_DSI_ConfigVideoMode+0x29c>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0203 	bic.w	r2, r2, #3
 8002d16:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0207 	bic.w	r2, r2, #7
 8002d38:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6959      	ldr	r1, [r3, #20]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020f 	bic.w	r2, r2, #15
 8002d66:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005a      	lsls	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d110      	bne.n	8002dd0 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dbc:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002ddc:	400b      	ands	r3, r1
 8002dde:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8002e20:	400b      	ands	r3, r1
 8002e22:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002e42:	400b      	ands	r3, r1
 8002e44:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002e64:	400b      	ands	r3, r1
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_DSI_ConfigVideoMode+0x29c>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed8:	e00a      	b.n	8002ef0 <HAL_DSI_ConfigVideoMode+0x2b0>
 8002eda:	bf00      	nop
 8002edc:	ffffc000 	.word	0xffffc000
 8002ee0:	ffffe000 	.word	0xffffe000
 8002ee4:	fffff000 	.word	0xfffff000
 8002ee8:	ffff8000 	.word	0xffff8000
 8002eec:	fffffc00 	.word	0xfffffc00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002f06:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f2a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7c1b      	ldrb	r3, [r3, #16]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003052:	2302      	movs	r3, #2
 8003054:	e0c5      	b.n	80031e2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0203 	bic.w	r2, r2, #3
 80030a2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0207 	bic.w	r2, r2, #7
 80030c4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020f 	bic.w	r2, r2, #15
 80030f2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6919      	ldr	r1, [r3, #16]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 020e 	bic.w	r2, r2, #14
 8003116:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005a      	lsls	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800313e:	400b      	ands	r3, r1
 8003140:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003164:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0202 	orr.w	r2, r2, #2
 80031d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	ffff0000 	.word	0xffff0000

080031f4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7c1b      	ldrb	r3, [r3, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_DSI_ConfigCommand+0x16>
 8003206:	2302      	movs	r3, #2
 8003208:	e049      	b.n	800329e <HAL_DSI_ConfigCommand+0xaa>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_DSI_ConfigCommand+0xb8>)
 800321c:	400b      	ands	r3, r1
 800321e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800322e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003234:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800323a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003240:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003246:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800324c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003252:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003258:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800325e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003264:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800326a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0202 	bic.w	r2, r2, #2
 8003282:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	fef080ff 	.word	0xfef080ff

080032b0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7c1b      	ldrb	r3, [r3, #16]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_DSI_ConfigFlowControl+0x16>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e016      	b.n	80032f4 <HAL_DSI_ConfigFlowControl+0x44>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 021f 	bic.w	r2, r2, #31
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7c1b      	ldrb	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_DSI_ConfigPhyTimer+0x16>
 8003312:	2302      	movs	r3, #2
 8003314:	e058      	b.n	80033c8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4293      	cmp	r3, r2
 8003326:	bf38      	it	cc
 8003328:	4613      	movcc	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800333c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	041a      	lsls	r2, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800336a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80033a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DSI_ConfigHostTimeouts+0x16>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0b4      	b.n	8003554 <HAL_DSI_ConfigHostTimeouts+0x180>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80033fe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	b292      	uxth	r2, r2
 8003420:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003442:	400b      	ands	r3, r1
 8003444:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003464:	400b      	ands	r3, r1
 8003466:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003488:	400b      	ands	r3, r1
 800348a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003506:	400b      	ands	r3, r1
 8003508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003530:	400b      	ands	r3, r1
 8003532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	ffff0000 	.word	0xffff0000

08003564 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7c1b      	ldrb	r3, [r3, #16]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_DSI_Start+0x14>
 8003574:	2302      	movs	r3, #2
 8003576:	e02b      	b.n	80035d0 <HAL_DSI_Start+0x6c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0208 	orr.w	r2, r2, #8
 80035b4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	7c1b      	ldrb	r3, [r3, #16]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_DSI_ShortWrite+0x1a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e010      	b.n	8003618 <HAL_DSI_ShortWrite+0x3c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7ff f879 	bl	80026fe <DSI_ShortWrite>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	741a      	strb	r2, [r3, #16]

  return status;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	7c1b      	ldrb	r3, [r3, #16]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_DSI_LongWrite+0x1e>
 800363a:	2302      	movs	r3, #2
 800363c:	e084      	b.n	8003748 <HAL_DSI_LongWrite+0x128>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003644:	f7fe f894 	bl	8001770 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800364a:	e00c      	b.n	8003666 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800364c:	f7fe f890 	bl	8001770 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800365a:	d904      	bls.n	8003666 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e070      	b.n	8003748 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0eb      	beq.n	800364c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b03      	cmp	r3, #3
 800367c:	bf28      	it	cs
 800367e:	2303      	movcs	r3, #3
 8003680:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
 8003686:	e00f      	b.n	80036a8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	3301      	adds	r3, #1
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	3301      	adds	r3, #1
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3eb      	bcc.n	8003688 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80036c8:	e028      	b.n	800371c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	bf28      	it	cs
 80036d0:	2304      	movcs	r3, #4
 80036d2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	e00e      	b.n	80036fc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	3301      	adds	r3, #1
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3ec      	bcc.n	80036de <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1d3      	bne.n	80036ca <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800372a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003732:	b2db      	uxtb	r3, r3
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	f7fe ffc6 	bl	80026cc <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7c1b      	ldrb	r3, [r3, #16]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003762:	2302      	movs	r3, #2
 8003764:	e01b      	b.n	800379e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800377c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	065a      	lsls	r2, r3, #25
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e175      	b.n	8003ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8164 	bne.w	8003ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x4e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d123      	bne.n	8003842 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d00b      	beq.n	8003896 <HAL_GPIO_Init+0xea>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800388a:	2b11      	cmp	r3, #17
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b12      	cmp	r3, #18
 8003894:	d130      	bne.n	80038f8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 0201 	and.w	r2, r3, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80be 	beq.w	8003ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_GPIO_Init+0x320>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a64      	ldr	r2, [pc, #400]	; (8003acc <HAL_GPIO_Init+0x320>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_GPIO_Init+0x320>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800394e:	4a60      	ldr	r2, [pc, #384]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d037      	beq.n	80039ea <HAL_GPIO_Init+0x23e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_GPIO_Init+0x32c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_GPIO_Init+0x23a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a55      	ldr	r2, [pc, #340]	; (8003adc <HAL_GPIO_Init+0x330>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <HAL_GPIO_Init+0x236>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a54      	ldr	r2, [pc, #336]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x232>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <HAL_GPIO_Init+0x338>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x22e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_GPIO_Init+0x33c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x22a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a51      	ldr	r2, [pc, #324]	; (8003aec <HAL_GPIO_Init+0x340>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x226>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a50      	ldr	r2, [pc, #320]	; (8003af0 <HAL_GPIO_Init+0x344>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x222>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4f      	ldr	r2, [pc, #316]	; (8003af4 <HAL_GPIO_Init+0x348>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x21e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4e      	ldr	r2, [pc, #312]	; (8003af8 <HAL_GPIO_Init+0x34c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x21a>
 80039c2:	2309      	movs	r3, #9
 80039c4:	e012      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039c6:	230a      	movs	r3, #10
 80039c8:	e010      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039fc:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0a:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2e:	4a33      	ldr	r2, [pc, #204]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a34:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a58:	4a28      	ldr	r2, [pc, #160]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a82:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a88:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_GPIO_Init+0x350>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae86 	bls.w	80037cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3724      	adds	r7, #36	; 0x24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40021400 	.word	0x40021400
 8003aec:	40021800 	.word	0x40021800
 8003af0:	40021c00 	.word	0x40021c00
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022400 	.word	0x40022400
 8003afc:	40013c00 	.word	0x40013c00

08003b00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e0d9      	b.n	8003cd0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	f040 80c9 	bne.w	8003cca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_GPIO_DeInit+0x1e4>)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a62      	ldr	r2, [pc, #392]	; (8003ce8 <HAL_GPIO_DeInit+0x1e8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d037      	beq.n	8003bd2 <HAL_GPIO_DeInit+0xd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a61      	ldr	r2, [pc, #388]	; (8003cec <HAL_GPIO_DeInit+0x1ec>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d031      	beq.n	8003bce <HAL_GPIO_DeInit+0xce>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <HAL_GPIO_DeInit+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02b      	beq.n	8003bca <HAL_GPIO_DeInit+0xca>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a5f      	ldr	r2, [pc, #380]	; (8003cf4 <HAL_GPIO_DeInit+0x1f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d025      	beq.n	8003bc6 <HAL_GPIO_DeInit+0xc6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a5e      	ldr	r2, [pc, #376]	; (8003cf8 <HAL_GPIO_DeInit+0x1f8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <HAL_GPIO_DeInit+0xc2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a5d      	ldr	r2, [pc, #372]	; (8003cfc <HAL_GPIO_DeInit+0x1fc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_DeInit+0xbe>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a5c      	ldr	r2, [pc, #368]	; (8003d00 <HAL_GPIO_DeInit+0x200>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_DeInit+0xba>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <HAL_GPIO_DeInit+0x204>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_DeInit+0xb6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_GPIO_DeInit+0x208>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_DeInit+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a59      	ldr	r2, [pc, #356]	; (8003d0c <HAL_GPIO_DeInit+0x20c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_DeInit+0xae>
 8003baa:	2309      	movs	r3, #9
 8003bac:	e012      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bae:	230a      	movs	r3, #10
 8003bb0:	e010      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	e00e      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	e00c      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bba:	2306      	movs	r3, #6
 8003bbc:	e00a      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bbe:	2305      	movs	r3, #5
 8003bc0:	e008      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	e006      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e004      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e002      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_GPIO_DeInit+0xd4>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	f002 0203 	and.w	r2, r2, #3
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	4093      	lsls	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d132      	bne.n	8003c4a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003bf4:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_GPIO_DeInit+0x1e4>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	4837      	ldr	r0, [pc, #220]	; (8003ce4 <HAL_GPIO_DeInit+0x1e4>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c12:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	493d      	ldr	r1, [pc, #244]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	4939      	ldr	r1, [pc, #228]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c2e:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	4936      	ldr	r1, [pc, #216]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	4932      	ldr	r1, [pc, #200]	; (8003d10 <HAL_GPIO_DeInit+0x210>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2103      	movs	r1, #3
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	08da      	lsrs	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3208      	adds	r2, #8
 8003c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	220f      	movs	r2, #15
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	08d2      	lsrs	r2, r2, #3
 8003c80:	4019      	ands	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2103      	movs	r1, #3
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	f67f af22 	bls.w	8003b1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40021400 	.word	0x40021400
 8003d00:	40021800 	.word	0x40021800
 8003d04:	40021c00 	.word	0x40021c00
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40022400 	.word	0x40022400
 8003d10:	40013c00 	.word	0x40013c00

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0bf      	b.n	8003eda <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f007 f8bc 	bl	800aeec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003da0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6899      	ldr	r1, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68d9      	ldr	r1, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003dea:	400b      	ands	r3, r1
 8003dec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003e18:	400b      	ands	r3, r1
 8003e1a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6959      	ldr	r1, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6959      	ldr	r1, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0206 	orr.w	r2, r2, #6
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	f000f800 	.word	0xf000f800

08003ee8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ee8:	b5b0      	push	{r4, r5, r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_LTDC_ConfigLayer+0x1a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e02c      	b.n	8003f5c <HAL_LTDC_ConfigLayer+0x74>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2134      	movs	r1, #52	; 0x34
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f811 	bl	8003f64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2201      	movs	r2, #1
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bdb0      	pop	{r4, r5, r7, pc}

08003f64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	4413      	add	r3, r2
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4413      	add	r3, r2
 8003f92:	3384      	adds	r3, #132	; 0x84
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	01d2      	lsls	r2, r2, #7
 8003fa0:	440a      	add	r2, r1
 8003fa2:	3284      	adds	r2, #132	; 0x84
 8003fa4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fa8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fba:	4413      	add	r3, r2
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	01db      	lsls	r3, r3, #7
 8003fc8:	440b      	add	r3, r1
 8003fca:	3384      	adds	r3, #132	; 0x84
 8003fcc:	4619      	mov	r1, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe2:	4413      	add	r3, r2
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3384      	adds	r3, #132	; 0x84
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	01d2      	lsls	r2, r2, #7
 8004002:	440a      	add	r2, r1
 8004004:	3284      	adds	r2, #132	; 0x84
 8004006:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800400a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800401a:	4413      	add	r3, r2
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	440b      	add	r3, r1
 800402a:	3384      	adds	r3, #132	; 0x84
 800402c:	4619      	mov	r1, r3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	01db      	lsls	r3, r3, #7
 800403e:	4413      	add	r3, r2
 8004040:	3384      	adds	r3, #132	; 0x84
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	4611      	mov	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	01d2      	lsls	r2, r2, #7
 800404e:	440a      	add	r2, r1
 8004050:	3284      	adds	r2, #132	; 0x84
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	01db      	lsls	r3, r3, #7
 8004062:	4413      	add	r3, r2
 8004064:	3384      	adds	r3, #132	; 0x84
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	3384      	adds	r3, #132	; 0x84
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	01db      	lsls	r3, r3, #7
 80040a4:	4413      	add	r3, r2
 80040a6:	3384      	adds	r3, #132	; 0x84
 80040a8:	461a      	mov	r2, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040b4:	461a      	mov	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	440b      	add	r3, r1
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	4619      	mov	r1, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	01db      	lsls	r3, r3, #7
 80040de:	4413      	add	r3, r2
 80040e0:	3384      	adds	r3, #132	; 0x84
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	4611      	mov	r1, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	01d2      	lsls	r2, r2, #7
 80040ee:	440a      	add	r2, r1
 80040f0:	3284      	adds	r2, #132	; 0x84
 80040f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	01db      	lsls	r3, r3, #7
 8004102:	4413      	add	r3, r2
 8004104:	3384      	adds	r3, #132	; 0x84
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	4413      	add	r3, r2
 800411a:	3384      	adds	r3, #132	; 0x84
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	01db      	lsls	r3, r3, #7
 8004128:	440b      	add	r3, r1
 800412a:	3384      	adds	r3, #132	; 0x84
 800412c:	4619      	mov	r1, r3
 800412e:	4b58      	ldr	r3, [pc, #352]	; (8004290 <LTDC_SetConfig+0x32c>)
 8004130:	4013      	ands	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	6809      	ldr	r1, [r1, #0]
 8004140:	4608      	mov	r0, r1
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	01c9      	lsls	r1, r1, #7
 8004146:	4401      	add	r1, r0
 8004148:	3184      	adds	r1, #132	; 0x84
 800414a:	4313      	orrs	r3, r2
 800414c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	01db      	lsls	r3, r3, #7
 8004158:	4413      	add	r3, r2
 800415a:	3384      	adds	r3, #132	; 0x84
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4413      	add	r3, r2
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	01db      	lsls	r3, r3, #7
 800417c:	4413      	add	r3, r2
 800417e:	3384      	adds	r3, #132	; 0x84
 8004180:	461a      	mov	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004190:	2304      	movs	r3, #4
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e01b      	b.n	80041ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800419e:	2303      	movs	r3, #3
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e014      	b.n	80041ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d00b      	beq.n	80041c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d007      	beq.n	80041c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d003      	beq.n	80041c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041c0:	2b07      	cmp	r3, #7
 80041c2:	d102      	bne.n	80041ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80041c4:	2302      	movs	r3, #2
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e001      	b.n	80041ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	01db      	lsls	r3, r3, #7
 80041d8:	4413      	add	r3, r2
 80041da:	3384      	adds	r3, #132	; 0x84
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	4611      	mov	r1, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	01d2      	lsls	r2, r2, #7
 80041e8:	440a      	add	r2, r1
 80041ea:	3284      	adds	r2, #132	; 0x84
 80041ec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	041a      	lsls	r2, r3, #16
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	3303      	adds	r3, #3
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	6809      	ldr	r1, [r1, #0]
 8004214:	4608      	mov	r0, r1
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	01c9      	lsls	r1, r1, #7
 800421a:	4401      	add	r1, r0
 800421c:	3184      	adds	r1, #132	; 0x84
 800421e:	4313      	orrs	r3, r2
 8004220:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	01db      	lsls	r3, r3, #7
 800422c:	4413      	add	r3, r2
 800422e:	3384      	adds	r3, #132	; 0x84
 8004230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4619      	mov	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	440b      	add	r3, r1
 800423e:	3384      	adds	r3, #132	; 0x84
 8004240:	4619      	mov	r1, r3
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <LTDC_SetConfig+0x330>)
 8004244:	4013      	ands	r3, r2
 8004246:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	01db      	lsls	r3, r3, #7
 8004252:	4413      	add	r3, r2
 8004254:	3384      	adds	r3, #132	; 0x84
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	4413      	add	r3, r2
 800426a:	3384      	adds	r3, #132	; 0x84
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4611      	mov	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	01d2      	lsls	r2, r2, #7
 8004278:	440a      	add	r2, r1
 800427a:	3284      	adds	r2, #132	; 0x84
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6013      	str	r3, [r2, #0]
}
 8004282:	bf00      	nop
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	fffff8f8 	.word	0xfffff8f8
 8004294:	fffff800 	.word	0xfffff800

08004298 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80042aa:	2200      	movs	r2, #0
 80042ac:	e001      	b.n	80042b2 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80042ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80042be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042c2:	e000      	b.n	80042c6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80042c4:	2200      	movs	r2, #0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80042d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042d6:	e000      	b.n	80042da <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80042d8:	2200      	movs	r2, #0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	4413      	add	r3, r2
 80042f2:	1e5a      	subs	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	441a      	add	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4413      	add	r3, r2
 8004308:	1e5a      	subs	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	441a      	add	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	441a      	add	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	4413      	add	r3, r2
 8004324:	1e5a      	subs	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004366:	f7fd fa03 	bl	8001770 <HAL_GetTick>
 800436a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800436c:	e009      	b.n	8004382 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800436e:	f7fd f9ff 	bl	8001770 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800437c:	d901      	bls.n	8004382 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e022      	b.n	80043c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438e:	d1ee      	bne.n	800436e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800439c:	f7fd f9e8 	bl	8001770 <HAL_GetTick>
 80043a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043a2:	e009      	b.n	80043b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043a4:	f7fd f9e4 	bl	8001770 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043b2:	d901      	bls.n	80043b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e007      	b.n	80043c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c4:	d1ee      	bne.n	80043a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000

080043d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e25e      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8087 	beq.w	800450a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043fc:	4b96      	ldr	r3, [pc, #600]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00c      	beq.n	8004422 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004408:	4b93      	ldr	r3, [pc, #588]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d112      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
 8004414:	4b90      	ldr	r3, [pc, #576]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d10b      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	4b8d      	ldr	r3, [pc, #564]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06c      	beq.n	8004508 <HAL_RCC_OscConfig+0x130>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d168      	bne.n	8004508 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e238      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x7a>
 8004444:	4b84      	ldr	r3, [pc, #528]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a83      	ldr	r2, [pc, #524]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e02e      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x9c>
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b7c      	ldr	r3, [pc, #496]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7b      	ldr	r2, [pc, #492]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800446c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e01d      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0xc0>
 800447e:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b73      	ldr	r3, [pc, #460]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a72      	ldr	r2, [pc, #456]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6b      	ldr	r2, [pc, #428]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fd f95a 	bl	8001770 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fd f956 	bl	8001770 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1ec      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe8>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd f946 	bl	8001770 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fd f942 	bl	8001770 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1d8      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b57      	ldr	r3, [pc, #348]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x110>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d069      	beq.n	80045ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004516:	4b50      	ldr	r3, [pc, #320]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x190>
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x17a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1ac      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	493d      	ldr	r1, [pc, #244]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	e040      	b.n	80045ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d023      	beq.n	80045b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd f8f8 	bl	8001770 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd f8f4 	bl	8001770 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e18a      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4b30      	ldr	r3, [pc, #192]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4929      	ldr	r1, [pc, #164]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
 80045b6:	e018      	b.n	80045ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f8d4 	bl	8001770 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd f8d0 	bl	8001770 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e166      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d038      	beq.n	8004668 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d019      	beq.n	8004632 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd f8b1 	bl	8001770 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fd f8ad 	bl	8001770 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e143      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x23a>
 8004630:	e01a      	b.n	8004668 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd f897 	bl	8001770 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004646:	f7fd f893 	bl	8001770 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d903      	bls.n	800465c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e129      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
 8004658:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b95      	ldr	r3, [pc, #596]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a4 	beq.w	80047be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b8f      	ldr	r3, [pc, #572]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b8c      	ldr	r3, [pc, #560]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a8b      	ldr	r2, [pc, #556]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b89      	ldr	r3, [pc, #548]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469e:	4b86      	ldr	r3, [pc, #536]	; (80048b8 <HAL_RCC_OscConfig+0x4e0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046aa:	4b83      	ldr	r3, [pc, #524]	; (80048b8 <HAL_RCC_OscConfig+0x4e0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a82      	ldr	r2, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x4e0>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fd f85b 	bl	8001770 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fd f857 	bl	8001770 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b64      	cmp	r3, #100	; 0x64
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0ed      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d0:	4b79      	ldr	r3, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x4e0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x31a>
 80046e4:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a72      	ldr	r2, [pc, #456]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
 80046f0:	e02d      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x33c>
 80046fa:	4b6e      	ldr	r3, [pc, #440]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a6d      	ldr	r2, [pc, #436]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
 8004706:	4b6b      	ldr	r3, [pc, #428]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a6a      	ldr	r2, [pc, #424]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
 8004712:	e01c      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x35e>
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a64      	ldr	r2, [pc, #400]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a61      	ldr	r2, [pc, #388]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	e00b      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 8004736:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a5e      	ldr	r2, [pc, #376]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a5b      	ldr	r2, [pc, #364]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd f80b 	bl	8001770 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fd f807 	bl	8001770 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e09b      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCC_OscConfig+0x386>
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fc fff5 	bl	8001770 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fc fff1 	bl	8001770 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e085      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	4b44      	ldr	r3, [pc, #272]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ee      	bne.n	800478a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b2:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a3f      	ldr	r2, [pc, #252]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d071      	beq.n	80048aa <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d069      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d14b      	bne.n	8004872 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fc ffc3 	bl	8001770 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fc ffbf 	bl	8001770 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e055      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004800:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	019b      	lsls	r3, r3, #6
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	071b      	lsls	r3, r3, #28
 8004838:	491e      	ldr	r1, [pc, #120]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fc ff91 	bl	8001770 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004852:	f7fc ff8d 	bl	8001770 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e023      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x47a>
 8004870:	e01b      	b.n	80048aa <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 8004878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fc ff77 	bl	8001770 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004886:	f7fc ff73 	bl	8001770 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e009      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x4ae>
 80048a4:	e001      	b.n	80048aa <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40007000 	.word	0x40007000

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0ce      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d910      	bls.n	8004904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 020f 	bic.w	r2, r3, #15
 80048ea:	4964      	ldr	r1, [pc, #400]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b62      	ldr	r3, [pc, #392]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0b6      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800491c:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a57      	ldr	r2, [pc, #348]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004934:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a51      	ldr	r2, [pc, #324]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800493e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004940:	4b4f      	ldr	r3, [pc, #316]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	494c      	ldr	r1, [pc, #304]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d040      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07d      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e071      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	4b3c      	ldr	r3, [pc, #240]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e069      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b0:	f7fc fede 	bl	8001770 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fc feda 	bl	8001770 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e051      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 020c 	and.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1eb      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d210      	bcs.n	8004a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 020f 	bic.w	r2, r3, #15
 80049f6:	4921      	ldr	r1, [pc, #132]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e030      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4915      	ldr	r1, [pc, #84]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	490d      	ldr	r1, [pc, #52]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a4e:	f000 f81d 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a52:	4601      	mov	r1, r0
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	5cd3      	ldrb	r3, [r2, r3]
 8004a62:	fa21 f303 	lsr.w	r3, r1, r3
 8004a66:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <HAL_RCC_ClockConfig+0x1cc>)
 8004a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f006 fc22 	bl	800b2b4 <HAL_InitTick>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00
 8004a80:	40023800 	.word	0x40023800
 8004a84:	0800d2a8 	.word	0x0800d2a8
 8004a88:	20004070 	.word	0x20004070

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa2:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d007      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x32>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 808d 	bne.w	8004bd2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b4b      	ldr	r3, [pc, #300]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004aba:	60bb      	str	r3, [r7, #8]
       break;
 8004abc:	e08c      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004abe:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCC_GetSysClockFreq+0x160>)
 8004ac0:	60bb      	str	r3, [r7, #8]
      break;
 8004ac2:	e089      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac4:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ace:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d023      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ada:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	f04f 0400 	mov.w	r4, #0
 8004ae4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	ea03 0501 	and.w	r5, r3, r1
 8004af0:	ea04 0602 	and.w	r6, r4, r2
 8004af4:	4a3d      	ldr	r2, [pc, #244]	; (8004bec <HAL_RCC_GetSysClockFreq+0x160>)
 8004af6:	fb02 f106 	mul.w	r1, r2, r6
 8004afa:	2200      	movs	r2, #0
 8004afc:	fb02 f205 	mul.w	r2, r2, r5
 8004b00:	440a      	add	r2, r1
 8004b02:	493a      	ldr	r1, [pc, #232]	; (8004bec <HAL_RCC_GetSysClockFreq+0x160>)
 8004b04:	fba5 0101 	umull	r0, r1, r5, r1
 8004b08:	1853      	adds	r3, r2, r1
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f04f 0400 	mov.w	r4, #0
 8004b12:	461a      	mov	r2, r3
 8004b14:	4623      	mov	r3, r4
 8004b16:	f7fb fb93 	bl	8000240 <__aeabi_uldivmod>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e049      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	ea03 0501 	and.w	r5, r3, r1
 8004b38:	ea04 0602 	and.w	r6, r4, r2
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4632      	mov	r2, r6
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	0154      	lsls	r4, r2, #5
 8004b4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b4e:	014b      	lsls	r3, r1, #5
 8004b50:	4619      	mov	r1, r3
 8004b52:	4622      	mov	r2, r4
 8004b54:	1b49      	subs	r1, r1, r5
 8004b56:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	f04f 0400 	mov.w	r4, #0
 8004b62:	0194      	lsls	r4, r2, #6
 8004b64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b68:	018b      	lsls	r3, r1, #6
 8004b6a:	1a5b      	subs	r3, r3, r1
 8004b6c:	eb64 0402 	sbc.w	r4, r4, r2
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	00e2      	lsls	r2, r4, #3
 8004b7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b7e:	00d9      	lsls	r1, r3, #3
 8004b80:	460b      	mov	r3, r1
 8004b82:	4614      	mov	r4, r2
 8004b84:	195b      	adds	r3, r3, r5
 8004b86:	eb44 0406 	adc.w	r4, r4, r6
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	02a2      	lsls	r2, r4, #10
 8004b94:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b98:	0299      	lsls	r1, r3, #10
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f04f 0400 	mov.w	r4, #0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4623      	mov	r3, r4
 8004bac:	f7fb fb48 	bl	8000240 <__aeabi_uldivmod>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	60bb      	str	r3, [r7, #8]
      break;
 8004bd0:	e002      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bd4:	60bb      	str	r3, [r7, #8]
      break;
 8004bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	017d7840 	.word	0x017d7840

08004bf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20004070 	.word	0x20004070

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800d2b8 	.word	0x0800d2b8

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800d2b8 	.word	0x0800d2b8

08004c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	220f      	movs	r2, #15
 8004c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <HAL_RCC_GetClockConfig+0x60>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40023c00 	.word	0x40023c00

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ce4:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a68      	ldr	r2, [pc, #416]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cee:	6093      	str	r3, [r2, #8]
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	4964      	ldr	r1, [pc, #400]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d16:	4b5d      	ldr	r3, [pc, #372]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	4959      	ldr	r1, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d52:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	494a      	ldr	r1, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 808b 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4a39      	ldr	r2, [pc, #228]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dac:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a34      	ldr	r2, [pc, #208]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fc fcd4 	bl	8001770 <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dcc:	f7fc fcd0 	bl	8001770 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e38d      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dde:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d035      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d02e      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d114      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fc98 	bl	8001770 <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc fc94 	bl	8001770 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e34f      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ee      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d111      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	4901      	ldr	r1, [pc, #4]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40007000 	.word	0x40007000
 8004e94:	0ffffcff 	.word	0x0ffffcff
 8004e98:	4bb3      	ldr	r3, [pc, #716]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4ab2      	ldr	r2, [pc, #712]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ea2:	6093      	str	r3, [r2, #8]
 8004ea4:	4bb0      	ldr	r3, [pc, #704]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb0:	49ad      	ldr	r1, [pc, #692]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ec2:	4ba9      	ldr	r3, [pc, #676]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	4aa7      	ldr	r2, [pc, #668]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ed2:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	49a2      	ldr	r1, [pc, #648]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef0:	4b9d      	ldr	r3, [pc, #628]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efe:	499a      	ldr	r1, [pc, #616]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f12:	4b95      	ldr	r3, [pc, #596]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f20:	4991      	ldr	r1, [pc, #580]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f34:	4b8c      	ldr	r3, [pc, #560]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	4989      	ldr	r1, [pc, #548]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f56:	4b84      	ldr	r3, [pc, #528]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4980      	ldr	r1, [pc, #512]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f78:	4b7b      	ldr	r3, [pc, #492]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	4978      	ldr	r1, [pc, #480]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f023 020c 	bic.w	r2, r3, #12
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	496f      	ldr	r1, [pc, #444]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	4967      	ldr	r1, [pc, #412]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fde:	4b62      	ldr	r3, [pc, #392]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fec:	495e      	ldr	r1, [pc, #376]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	4956      	ldr	r1, [pc, #344]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005022:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	4945      	ldr	r1, [pc, #276]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005066:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	493c      	ldr	r1, [pc, #240]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005096:	4934      	ldr	r1, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d011      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b8:	492b      	ldr	r1, [pc, #172]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ea:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	491b      	ldr	r1, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511c:	4912      	ldr	r1, [pc, #72]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005130:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	4909      	ldr	r1, [pc, #36]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	e002      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800
 800516c:	4985      	ldr	r1, [pc, #532]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005180:	4b80      	ldr	r3, [pc, #512]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	497c      	ldr	r1, [pc, #496]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d005      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a6:	f040 80d6 	bne.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051aa:	4b76      	ldr	r3, [pc, #472]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a75      	ldr	r2, [pc, #468]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fc fadb 	bl	8001770 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051be:	f7fc fad7 	bl	8001770 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b64      	cmp	r3, #100	; 0x64
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e194      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d021      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11d      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051fe:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	071b      	lsls	r3, r3, #28
 8005224:	4957      	ldr	r1, [pc, #348]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d02e      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005256:	d129      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	0f1b      	lsrs	r3, r3, #28
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	019a      	lsls	r2, r3, #6
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	493d      	ldr	r1, [pc, #244]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005294:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f023 021f 	bic.w	r2, r3, #31
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4937      	ldr	r1, [pc, #220]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	0f1b      	lsrs	r3, r3, #28
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	019a      	lsls	r2, r3, #6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	431a      	orrs	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	4925      	ldr	r1, [pc, #148]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d011      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	019a      	lsls	r2, r3, #6
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	071b      	lsls	r3, r3, #28
 800531c:	4919      	ldr	r1, [pc, #100]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800532a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fc fa1e 	bl	8001770 <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005338:	f7fc fa1a 	bl	8001770 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0d7      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 80cd 	bne.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536a:	f7fc fa01 	bl	8001770 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005372:	f7fc f9fd 	bl	8001770 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b64      	cmp	r3, #100	; 0x64
 800537e:	d903      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0ba      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005384:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005388:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005394:	d0ed      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02e      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12a      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053cc:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	0f1b      	lsrs	r3, r3, #28
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	019a      	lsls	r2, r3, #6
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	071b      	lsls	r3, r3, #28
 80053f2:	4944      	ldr	r1, [pc, #272]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053fa:	4b42      	ldr	r3, [pc, #264]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005400:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	493d      	ldr	r1, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d022      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005428:	d11d      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	0e1b      	lsrs	r3, r3, #24
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	0f1b      	lsrs	r3, r3, #28
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	019a      	lsls	r2, r3, #6
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	061b      	lsls	r3, r3, #24
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	4929      	ldr	r1, [pc, #164]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d028      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	0e1b      	lsrs	r3, r3, #24
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	019a      	lsls	r2, r3, #6
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	4917      	ldr	r1, [pc, #92]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4911      	ldr	r1, [pc, #68]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc f94e 	bl	8001770 <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054d8:	f7fc f94a 	bl	8001770 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e007      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f6:	d1ef      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e025      	b.n	8005568 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f005 feb5 	bl	800b2a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f001 fdcb 	bl	80070e4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	461a      	mov	r2, r3
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	f001 fe35 	bl	80071c8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d101      	bne.n	800558c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	e018      	b.n	80055be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fe93 	bl	80072c8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d104      	bne.n	80055b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2205      	movs	r2, #5
 80055ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80055b2:	e003      	b.n	80055bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d101      	bne.n	80055e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	e00e      	b.n	80055fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fe8b 	bl	800730a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e084      	b.n	8005722 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f005 fc7a 	bl	800af2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005658:	d902      	bls.n	8005660 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e002      	b.n	8005666 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005664:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800566e:	d007      	beq.n	8005680 <HAL_SPI_Init+0x7a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005690:	d903      	bls.n	800569a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
 8005698:	e002      	b.n	80056a0 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	ea42 0103 	orr.w	r1, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	0c1b      	lsrs	r3, r3, #16
 80056e0:	f003 0204 	and.w	r2, r3, #4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	ea42 0103 	orr.w	r1, r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b08a      	sub	sp, #40	; 0x28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x26>
 800574c:	2302      	movs	r3, #2
 800574e:	e1fb      	b.n	8005b48 <HAL_SPI_TransmitReceive+0x41e>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005758:	f7fc f80a 	bl	8001770 <HAL_GetTick>
 800575c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005764:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005774:	7efb      	ldrb	r3, [r7, #27]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d00e      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x6e>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005780:	d106      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x66>
 800578a:	7efb      	ldrb	r3, [r7, #27]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d003      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005796:	e1cd      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x80>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x80>
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057b0:	e1c0      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2205      	movs	r2, #5
 80057c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	887a      	ldrh	r2, [r7, #2]
 80057d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	887a      	ldrh	r2, [r7, #2]
 80057de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	887a      	ldrh	r2, [r7, #2]
 80057f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005808:	d802      	bhi.n	8005810 <HAL_SPI_TransmitReceive+0xe6>
 800580a:	8a3b      	ldrh	r3, [r7, #16]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d908      	bls.n	8005822 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	e007      	b.n	8005832 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d007      	beq.n	8005850 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005858:	d97c      	bls.n	8005954 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x13e>
 8005862:	8a7b      	ldrh	r3, [r7, #18]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d169      	bne.n	800593c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	881a      	ldrh	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	1c9a      	adds	r2, r3, #2
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588c:	e056      	b.n	800593c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d11b      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x1aa>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x1aa>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d113      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d11c      	bne.n	800591c <HAL_SPI_TransmitReceive+0x1f2>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	b292      	uxth	r2, r2
 80058fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005918:	2301      	movs	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800591c:	f7fb ff28 	bl	8001770 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005928:	429a      	cmp	r2, r3
 800592a:	d807      	bhi.n	800593c <HAL_SPI_TransmitReceive+0x212>
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d003      	beq.n	800593c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800593a:	e0fb      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1a3      	bne.n	800588e <HAL_SPI_TransmitReceive+0x164>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d19d      	bne.n	800588e <HAL_SPI_TransmitReceive+0x164>
 8005952:	e0df      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_SPI_TransmitReceive+0x23a>
 800595c:	8a7b      	ldrh	r3, [r7, #18]
 800595e:	2b01      	cmp	r3, #1
 8005960:	f040 80cb 	bne.w	8005afa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d912      	bls.n	8005994 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	1c9a      	adds	r2, r3, #2
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b02      	subs	r3, #2
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005992:	e0b2      	b.n	8005afa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	7812      	ldrb	r2, [r2, #0]
 80059a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ba:	e09e      	b.n	8005afa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d134      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x30a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02f      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x30a>
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d12c      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d912      	bls.n	8005a0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b02      	subs	r3, #2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a08:	e012      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d148      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x3aa>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d042      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d923      	bls.n	8005aa2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	b292      	uxth	r2, r2
 8005a66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	1c9a      	adds	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b02      	subs	r3, #2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d81f      	bhi.n	8005ad0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	e016      	b.n	8005ad0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f103 020c 	add.w	r2, r3, #12
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad4:	f7fb fe4c 	bl	8001770 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d803      	bhi.n	8005aec <HAL_SPI_TransmitReceive+0x3c2>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x3c8>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005af8:	e01c      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af5b 	bne.w	80059bc <HAL_SPI_TransmitReceive+0x292>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f47f af54 	bne.w	80059bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f8f0 	bl	8005cfe <SPI_EndRxTxTransaction>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60
 8005b30:	e000      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b60:	e04c      	b.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d048      	beq.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b6a:	f7fb fe01 	bl	8001770 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d902      	bls.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d13d      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b98:	d111      	bne.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba2:	d004      	beq.n	8005bae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d107      	bne.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc6:	d10f      	bne.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005be6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e00f      	b.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d1a3      	bne.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c32:	e057      	b.n	8005ce4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c3a:	d106      	bne.n	8005c4a <SPI_WaitFifoStateUntilTimeout+0x26>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d048      	beq.n	8005ce4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c52:	f7fb fd8d 	bl	8001770 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d902      	bls.n	8005c68 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d13d      	bne.n	8005ce4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c80:	d111      	bne.n	8005ca6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8a:	d004      	beq.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c94:	d107      	bne.n	8005ca6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cae:	d10f      	bne.n	8005cd0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e008      	b.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d19f      	bne.n	8005c34 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff ff84 	bl	8005c24 <SPI_WaitFifoStateUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e027      	b.n	8005d82 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff ff07 	bl	8005b50 <SPI_WaitFlagStateUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e014      	b.n	8005d82 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff ff5d 	bl	8005c24 <SPI_WaitFifoStateUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e000      	b.n	8005d82 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e01d      	b.n	8005dd8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f815 	bl	8005de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f000 f985 	bl	80060d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <HAL_TIM_Base_Start_IT+0x50>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d00b      	beq.n	8005e36 <HAL_TIM_Base_Start_IT+0x42>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d007      	beq.n	8005e36 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	00010007 	.word	0x00010007

08005e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0202 	mvn.w	r2, #2
 8005e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f905 	bl	800609a <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f8f7 	bl	8006086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f908 	bl	80060ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0204 	mvn.w	r2, #4
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8db 	bl	800609a <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8cd 	bl	8006086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f8de 	bl	80060ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0208 	mvn.w	r2, #8
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2204      	movs	r2, #4
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8b1 	bl	800609a <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8a3 	bl	8006086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8b4 	bl	80060ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0210 	mvn.w	r2, #16
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2208      	movs	r2, #8
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f887 	bl	800609a <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f879 	bl	8006086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f88a 	bl	80060ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0201 	mvn.w	r2, #1
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f004 fecc 	bl	800ad64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	2b80      	cmp	r3, #128	; 0x80
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f91a 	bl	800622c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006006:	d10e      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d107      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f90d 	bl	8006240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d10e      	bne.n	8006052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d107      	bne.n	8006052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f838 	bl	80060c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b20      	cmp	r3, #32
 800605e:	d10e      	bne.n	800607e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b20      	cmp	r3, #32
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0220 	mvn.w	r2, #32
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8cd 	bl	8006218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a40      	ldr	r2, [pc, #256]	; (80061ec <TIM_Base_SetConfig+0x114>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f6:	d00f      	beq.n	8006118 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <TIM_Base_SetConfig+0x118>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00b      	beq.n	8006118 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3c      	ldr	r2, [pc, #240]	; (80061f4 <TIM_Base_SetConfig+0x11c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d007      	beq.n	8006118 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3b      	ldr	r2, [pc, #236]	; (80061f8 <TIM_Base_SetConfig+0x120>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a3a      	ldr	r2, [pc, #232]	; (80061fc <TIM_Base_SetConfig+0x124>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d108      	bne.n	800612a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <TIM_Base_SetConfig+0x114>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02b      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d027      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2c      	ldr	r2, [pc, #176]	; (80061f0 <TIM_Base_SetConfig+0x118>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d023      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2b      	ldr	r2, [pc, #172]	; (80061f4 <TIM_Base_SetConfig+0x11c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01f      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <TIM_Base_SetConfig+0x120>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01b      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a29      	ldr	r2, [pc, #164]	; (80061fc <TIM_Base_SetConfig+0x124>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d017      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a28      	ldr	r2, [pc, #160]	; (8006200 <TIM_Base_SetConfig+0x128>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <TIM_Base_SetConfig+0x12c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00f      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a26      	ldr	r2, [pc, #152]	; (8006208 <TIM_Base_SetConfig+0x130>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00b      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a25      	ldr	r2, [pc, #148]	; (800620c <TIM_Base_SetConfig+0x134>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d007      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a24      	ldr	r2, [pc, #144]	; (8006210 <TIM_Base_SetConfig+0x138>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a23      	ldr	r2, [pc, #140]	; (8006214 <TIM_Base_SetConfig+0x13c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d108      	bne.n	800619c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <TIM_Base_SetConfig+0x114>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_Base_SetConfig+0xf8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <TIM_Base_SetConfig+0x124>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d103      	bne.n	80061d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	615a      	str	r2, [r3, #20]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800
 800620c:	40001800 	.word	0x40001800
 8006210:	40001c00 	.word	0x40001c00
 8006214:	40002000 	.word	0x40002000

08006218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e040      	b.n	80062e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f004 febc 	bl	800aff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2224      	movs	r2, #36	; 0x24
 8006280:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa52 	bl	800673c <UART_SetConfig>
 8006298:	4603      	mov	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e022      	b.n	80062e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fcea 	bl	8006c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ce:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fd71 	bl	8006dc8 <UART_CheckIdleState>
 80062e6:	4603      	mov	r3, r0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006302:	2b20      	cmp	r3, #32
 8006304:	d164      	bne.n	80063d0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_UART_Transmit_DMA+0x22>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e05d      	b.n	80063d2 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_UART_Transmit_DMA+0x34>
 8006320:	2302      	movs	r3, #2
 8006322:	e056      	b.n	80063d2 <HAL_UART_Transmit_DMA+0xe2>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2221      	movs	r2, #33	; 0x21
 800634c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02a      	beq.n	80063ac <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635a:	4a20      	ldr	r2, [pc, #128]	; (80063dc <HAL_UART_Transmit_DMA+0xec>)
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006362:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_UART_Transmit_DMA+0xf0>)
 8006364:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_UART_Transmit_DMA+0xf4>)
 800636c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006372:	2200      	movs	r2, #0
 8006374:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637e:	4619      	mov	r1, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3328      	adds	r3, #40	; 0x28
 8006386:	461a      	mov	r2, r3
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	f7fb fc0d 	bl	8001ba8 <HAL_DMA_Start_IT>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2210      	movs	r2, #16
 8006398:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e012      	b.n	80063d2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2240      	movs	r2, #64	; 0x40
 80063b2:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e000      	b.n	80063d2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
  }
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	08006f21 	.word	0x08006f21
 80063e0:	08006f71 	.word	0x08006f71
 80063e4:	0800700d 	.word	0x0800700d

080063e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d16c      	bne.n	80064d8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_UART_Receive_DMA+0x22>
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e065      	b.n	80064da <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_UART_Receive_DMA+0x34>
 8006418:	2302      	movs	r3, #2
 800641a:	e05e      	b.n	80064da <HAL_UART_Receive_DMA+0xf2>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2222      	movs	r2, #34	; 0x22
 800643c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02a      	beq.n	800649c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644a:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <HAL_UART_Receive_DMA+0xfc>)
 800644c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	4a25      	ldr	r2, [pc, #148]	; (80064e8 <HAL_UART_Receive_DMA+0x100>)
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	4a24      	ldr	r2, [pc, #144]	; (80064ec <HAL_UART_Receive_DMA+0x104>)
 800645c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006462:	2200      	movs	r2, #0
 8006464:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	4619      	mov	r1, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	461a      	mov	r2, r3
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	f7fb fb95 	bl	8001ba8 <HAL_DMA_Start_IT>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2210      	movs	r2, #16
 8006488:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e01e      	b.n	80064da <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08006f8d 	.word	0x08006f8d
 80064e8:	08006ff1 	.word	0x08006ff1
 80064ec:	0800700d 	.word	0x0800700d

080064f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d113      	bne.n	8006546 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80eb 	beq.w	8006712 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
      }
      return;
 8006544:	e0e5      	b.n	8006712 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80c0 	beq.w	80066ce <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80b5 	beq.w	80066ce <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <HAL_UART_IRQHandler+0x9c>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <HAL_UART_IRQHandler+0xc4>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2202      	movs	r2, #2
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ac:	f043 0204 	orr.w	r2, r3, #4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <HAL_UART_IRQHandler+0xec>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2204      	movs	r2, #4
 80065ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d4:	f043 0202 	orr.w	r2, r3, #2
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d013      	beq.n	800660e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006606:	f043 0208 	orr.w	r2, r3, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d07f      	beq.n	8006716 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00c      	beq.n	800663a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d004      	beq.n	8006658 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006654:	2b00      	cmp	r3, #0
 8006656:	d031      	beq.n	80066bc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fc41 	bl	8006ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d123      	bne.n	80066b4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d013      	beq.n	80066ac <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	4a26      	ldr	r2, [pc, #152]	; (8006724 <HAL_UART_IRQHandler+0x234>)
 800668a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006690:	4618      	mov	r0, r3
 8006692:	f7fb fae9 	bl	8001c68 <HAL_DMA_Abort_IT>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d016      	beq.n	80066ca <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066a6:	4610      	mov	r0, r2
 80066a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066aa:	e00e      	b.n	80066ca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f83b 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	e00a      	b.n	80066ca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f837 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ba:	e006      	b.n	80066ca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f833 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80066c8:	e025      	b.n	8006716 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ca:	bf00      	nop
    return;
 80066cc:	e023      	b.n	8006716 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d017      	beq.n	800671a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    }
    return;
 80066f2:	e012      	b.n	800671a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <HAL_UART_IRQHandler+0x22c>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fcd1 	bl	80070b0 <UART_EndTransmit_IT>
    return;
 800670e:	bf00      	nop
 8006710:	e004      	b.n	800671c <HAL_UART_IRQHandler+0x22c>
      return;
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <HAL_UART_IRQHandler+0x22c>
    return;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HAL_UART_IRQHandler+0x22c>
    return;
 800671a:	bf00      	nop
  }

}
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	08007085 	.word	0x08007085

08006728 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4bb1      	ldr	r3, [pc, #708]	; (8006a30 <UART_SetConfig+0x2f4>)
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	6939      	ldr	r1, [r7, #16]
 8006774:	430b      	orrs	r3, r1
 8006776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a9f      	ldr	r2, [pc, #636]	; (8006a34 <UART_SetConfig+0x2f8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d121      	bne.n	8006800 <UART_SetConfig+0xc4>
 80067bc:	4b9e      	ldr	r3, [pc, #632]	; (8006a38 <UART_SetConfig+0x2fc>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d816      	bhi.n	80067f8 <UART_SetConfig+0xbc>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <UART_SetConfig+0x94>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067ed 	.word	0x080067ed
 80067d8:	080067e7 	.word	0x080067e7
 80067dc:	080067f3 	.word	0x080067f3
 80067e0:	2301      	movs	r3, #1
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e151      	b.n	8006a8a <UART_SetConfig+0x34e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e14e      	b.n	8006a8a <UART_SetConfig+0x34e>
 80067ec:	2304      	movs	r3, #4
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e14b      	b.n	8006a8a <UART_SetConfig+0x34e>
 80067f2:	2308      	movs	r3, #8
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e148      	b.n	8006a8a <UART_SetConfig+0x34e>
 80067f8:	2310      	movs	r3, #16
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	bf00      	nop
 80067fe:	e144      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a8d      	ldr	r2, [pc, #564]	; (8006a3c <UART_SetConfig+0x300>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d134      	bne.n	8006874 <UART_SetConfig+0x138>
 800680a:	4b8b      	ldr	r3, [pc, #556]	; (8006a38 <UART_SetConfig+0x2fc>)
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d829      	bhi.n	800686c <UART_SetConfig+0x130>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0xe4>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006855 	.word	0x08006855
 8006824:	0800686d 	.word	0x0800686d
 8006828:	0800686d 	.word	0x0800686d
 800682c:	0800686d 	.word	0x0800686d
 8006830:	08006861 	.word	0x08006861
 8006834:	0800686d 	.word	0x0800686d
 8006838:	0800686d 	.word	0x0800686d
 800683c:	0800686d 	.word	0x0800686d
 8006840:	0800685b 	.word	0x0800685b
 8006844:	0800686d 	.word	0x0800686d
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006867 	.word	0x08006867
 8006854:	2300      	movs	r3, #0
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e117      	b.n	8006a8a <UART_SetConfig+0x34e>
 800685a:	2302      	movs	r3, #2
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e114      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006860:	2304      	movs	r3, #4
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e111      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006866:	2308      	movs	r3, #8
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e10e      	b.n	8006a8a <UART_SetConfig+0x34e>
 800686c:	2310      	movs	r3, #16
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	bf00      	nop
 8006872:	e10a      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a71      	ldr	r2, [pc, #452]	; (8006a40 <UART_SetConfig+0x304>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d120      	bne.n	80068c0 <UART_SetConfig+0x184>
 800687e:	4b6e      	ldr	r3, [pc, #440]	; (8006a38 <UART_SetConfig+0x2fc>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006888:	2b10      	cmp	r3, #16
 800688a:	d00f      	beq.n	80068ac <UART_SetConfig+0x170>
 800688c:	2b10      	cmp	r3, #16
 800688e:	d802      	bhi.n	8006896 <UART_SetConfig+0x15a>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <UART_SetConfig+0x164>
 8006894:	e010      	b.n	80068b8 <UART_SetConfig+0x17c>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d005      	beq.n	80068a6 <UART_SetConfig+0x16a>
 800689a:	2b30      	cmp	r3, #48	; 0x30
 800689c:	d009      	beq.n	80068b2 <UART_SetConfig+0x176>
 800689e:	e00b      	b.n	80068b8 <UART_SetConfig+0x17c>
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e0f1      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068a6:	2302      	movs	r3, #2
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e0ee      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068ac:	2304      	movs	r3, #4
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e0eb      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068b2:	2308      	movs	r3, #8
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e0e8      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068b8:	2310      	movs	r3, #16
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	bf00      	nop
 80068be:	e0e4      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a5f      	ldr	r2, [pc, #380]	; (8006a44 <UART_SetConfig+0x308>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d120      	bne.n	800690c <UART_SetConfig+0x1d0>
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <UART_SetConfig+0x2fc>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d00f      	beq.n	80068f8 <UART_SetConfig+0x1bc>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d802      	bhi.n	80068e2 <UART_SetConfig+0x1a6>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <UART_SetConfig+0x1b0>
 80068e0:	e010      	b.n	8006904 <UART_SetConfig+0x1c8>
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d005      	beq.n	80068f2 <UART_SetConfig+0x1b6>
 80068e6:	2bc0      	cmp	r3, #192	; 0xc0
 80068e8:	d009      	beq.n	80068fe <UART_SetConfig+0x1c2>
 80068ea:	e00b      	b.n	8006904 <UART_SetConfig+0x1c8>
 80068ec:	2300      	movs	r3, #0
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e0cb      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068f2:	2302      	movs	r3, #2
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e0c8      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068f8:	2304      	movs	r3, #4
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e0c5      	b.n	8006a8a <UART_SetConfig+0x34e>
 80068fe:	2308      	movs	r3, #8
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e0c2      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006904:	2310      	movs	r3, #16
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	bf00      	nop
 800690a:	e0be      	b.n	8006a8a <UART_SetConfig+0x34e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a4d      	ldr	r2, [pc, #308]	; (8006a48 <UART_SetConfig+0x30c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d124      	bne.n	8006960 <UART_SetConfig+0x224>
 8006916:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <UART_SetConfig+0x2fc>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006924:	d012      	beq.n	800694c <UART_SetConfig+0x210>
 8006926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692a:	d802      	bhi.n	8006932 <UART_SetConfig+0x1f6>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <UART_SetConfig+0x204>
 8006930:	e012      	b.n	8006958 <UART_SetConfig+0x21c>
 8006932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006936:	d006      	beq.n	8006946 <UART_SetConfig+0x20a>
 8006938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693c:	d009      	beq.n	8006952 <UART_SetConfig+0x216>
 800693e:	e00b      	b.n	8006958 <UART_SetConfig+0x21c>
 8006940:	2300      	movs	r3, #0
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0a1      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006946:	2302      	movs	r3, #2
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e09e      	b.n	8006a8a <UART_SetConfig+0x34e>
 800694c:	2304      	movs	r3, #4
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e09b      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006952:	2308      	movs	r3, #8
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e098      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006958:	2310      	movs	r3, #16
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	bf00      	nop
 800695e:	e094      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a39      	ldr	r2, [pc, #228]	; (8006a4c <UART_SetConfig+0x310>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d124      	bne.n	80069b4 <UART_SetConfig+0x278>
 800696a:	4b33      	ldr	r3, [pc, #204]	; (8006a38 <UART_SetConfig+0x2fc>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006978:	d012      	beq.n	80069a0 <UART_SetConfig+0x264>
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	d802      	bhi.n	8006986 <UART_SetConfig+0x24a>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <UART_SetConfig+0x258>
 8006984:	e012      	b.n	80069ac <UART_SetConfig+0x270>
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d006      	beq.n	800699a <UART_SetConfig+0x25e>
 800698c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006990:	d009      	beq.n	80069a6 <UART_SetConfig+0x26a>
 8006992:	e00b      	b.n	80069ac <UART_SetConfig+0x270>
 8006994:	2301      	movs	r3, #1
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e077      	b.n	8006a8a <UART_SetConfig+0x34e>
 800699a:	2302      	movs	r3, #2
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e074      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069a0:	2304      	movs	r3, #4
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e071      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069a6:	2308      	movs	r3, #8
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e06e      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069ac:	2310      	movs	r3, #16
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	bf00      	nop
 80069b2:	e06a      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a25      	ldr	r2, [pc, #148]	; (8006a50 <UART_SetConfig+0x314>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d124      	bne.n	8006a08 <UART_SetConfig+0x2cc>
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <UART_SetConfig+0x2fc>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069cc:	d012      	beq.n	80069f4 <UART_SetConfig+0x2b8>
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d2:	d802      	bhi.n	80069da <UART_SetConfig+0x29e>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <UART_SetConfig+0x2ac>
 80069d8:	e012      	b.n	8006a00 <UART_SetConfig+0x2c4>
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069de:	d006      	beq.n	80069ee <UART_SetConfig+0x2b2>
 80069e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069e4:	d009      	beq.n	80069fa <UART_SetConfig+0x2be>
 80069e6:	e00b      	b.n	8006a00 <UART_SetConfig+0x2c4>
 80069e8:	2300      	movs	r3, #0
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e04d      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069ee:	2302      	movs	r3, #2
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e04a      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069f4:	2304      	movs	r3, #4
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	e047      	b.n	8006a8a <UART_SetConfig+0x34e>
 80069fa:	2308      	movs	r3, #8
 80069fc:	77fb      	strb	r3, [r7, #31]
 80069fe:	e044      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a00:	2310      	movs	r3, #16
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	bf00      	nop
 8006a06:	e040      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <UART_SetConfig+0x318>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d139      	bne.n	8006a86 <UART_SetConfig+0x34a>
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <UART_SetConfig+0x2fc>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d027      	beq.n	8006a72 <UART_SetConfig+0x336>
 8006a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a26:	d817      	bhi.n	8006a58 <UART_SetConfig+0x31c>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01c      	beq.n	8006a66 <UART_SetConfig+0x32a>
 8006a2c:	e027      	b.n	8006a7e <UART_SetConfig+0x342>
 8006a2e:	bf00      	nop
 8006a30:	efff69f3 	.word	0xefff69f3
 8006a34:	40011000 	.word	0x40011000
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40004400 	.word	0x40004400
 8006a40:	40004800 	.word	0x40004800
 8006a44:	40004c00 	.word	0x40004c00
 8006a48:	40005000 	.word	0x40005000
 8006a4c:	40011400 	.word	0x40011400
 8006a50:	40007800 	.word	0x40007800
 8006a54:	40007c00 	.word	0x40007c00
 8006a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5c:	d006      	beq.n	8006a6c <UART_SetConfig+0x330>
 8006a5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a62:	d009      	beq.n	8006a78 <UART_SetConfig+0x33c>
 8006a64:	e00b      	b.n	8006a7e <UART_SetConfig+0x342>
 8006a66:	2300      	movs	r3, #0
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e00e      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e00b      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a72:	2304      	movs	r3, #4
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e008      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	bf00      	nop
 8006a84:	e001      	b.n	8006a8a <UART_SetConfig+0x34e>
 8006a86:	2310      	movs	r3, #16
 8006a88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a92:	d17c      	bne.n	8006b8e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006a94:	7ffb      	ldrb	r3, [r7, #31]
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d859      	bhi.n	8006b4e <UART_SetConfig+0x412>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <UART_SetConfig+0x364>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b4f 	.word	0x08006b4f
 8006ab0:	08006b19 	.word	0x08006b19
 8006ab4:	08006b4f 	.word	0x08006b4f
 8006ab8:	08006b4f 	.word	0x08006b4f
 8006abc:	08006b4f 	.word	0x08006b4f
 8006ac0:	08006b37 	.word	0x08006b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ac4:	f7fe f8a0 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	005a      	lsls	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	441a      	add	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	61bb      	str	r3, [r7, #24]
        break;
 8006ae0:	e038      	b.n	8006b54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ae2:	f7fe f8a5 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	005a      	lsls	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	441a      	add	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	61bb      	str	r3, [r7, #24]
        break;
 8006afe:	e029      	b.n	8006b54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	085a      	lsrs	r2, r3, #1
 8006b06:	4b5d      	ldr	r3, [pc, #372]	; (8006c7c <UART_SetConfig+0x540>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6852      	ldr	r2, [r2, #4]
 8006b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	61bb      	str	r3, [r7, #24]
        break;
 8006b16:	e01d      	b.n	8006b54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b18:	f7fd ffb8 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	005a      	lsls	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	441a      	add	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	61bb      	str	r3, [r7, #24]
        break;
 8006b34:	e00e      	b.n	8006b54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	61bb      	str	r3, [r7, #24]
        break;
 8006b4c:	e002      	b.n	8006b54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
        break;
 8006b52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d916      	bls.n	8006b88 <UART_SetConfig+0x44c>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d212      	bcs.n	8006b88 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f023 030f 	bic.w	r3, r3, #15
 8006b6a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	89fa      	ldrh	r2, [r7, #14]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e06e      	b.n	8006c66 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
 8006b8c:	e06b      	b.n	8006c66 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006b8e:	7ffb      	ldrb	r3, [r7, #31]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d857      	bhi.n	8006c44 <UART_SetConfig+0x508>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x460>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bdd 	.word	0x08006bdd
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006c45 	.word	0x08006c45
 8006bac:	08006c11 	.word	0x08006c11
 8006bb0:	08006c45 	.word	0x08006c45
 8006bb4:	08006c45 	.word	0x08006c45
 8006bb8:	08006c45 	.word	0x08006c45
 8006bbc:	08006c2d 	.word	0x08006c2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006bc0:	f7fe f822 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	61bb      	str	r3, [r7, #24]
        break;
 8006bda:	e036      	b.n	8006c4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006bdc:	f7fe f828 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	441a      	add	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	61bb      	str	r3, [r7, #24]
        break;
 8006bf6:	e028      	b.n	8006c4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	085a      	lsrs	r2, r3, #1
 8006bfe:	4b20      	ldr	r3, [pc, #128]	; (8006c80 <UART_SetConfig+0x544>)
 8006c00:	4413      	add	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	61bb      	str	r3, [r7, #24]
        break;
 8006c0e:	e01c      	b.n	8006c4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c10:	f7fd ff3c 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	61bb      	str	r3, [r7, #24]
        break;
 8006c2a:	e00e      	b.n	8006c4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	61bb      	str	r3, [r7, #24]
        break;
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d908      	bls.n	8006c62 <UART_SetConfig+0x526>
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c56:	d204      	bcs.n	8006c62 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	e001      	b.n	8006c66 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	01e84800 	.word	0x01e84800
 8006c80:	00f42400 	.word	0x00f42400

08006c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01a      	beq.n	8006d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d82:	d10a      	bne.n	8006d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006dd6:	f7fa fccb 	bl	8001770 <HAL_GetTick>
 8006dda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d10e      	bne.n	8006e08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f814 	bl	8006e26 <UART_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e00a      	b.n	8006e1e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e36:	e02a      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d026      	beq.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e40:	f7fa fc96 	bl	8001770 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11b      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0201 	bic.w	r2, r2, #1
 8006e74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e00f      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d0c5      	beq.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ecc:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	d014      	beq.n	8006f62 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f60:	e002      	b.n	8006f68 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f003 fe9e 	bl	800aca4 <HAL_UART_TxCpltCallback>
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f003 fea6 	bl	800acd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d01e      	beq.n	8006fe2 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fda:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f003 fe8a 	bl	800acfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f003 fe92 	bl	800ad28 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007024:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d109      	bne.n	8007048 <UART_DMAError+0x3c>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b21      	cmp	r3, #33	; 0x21
 8007038:	d106      	bne.n	8007048 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f7ff ff37 	bl	8006eb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d109      	bne.n	800706a <UART_DMAError+0x5e>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b22      	cmp	r3, #34	; 0x22
 800705a:	d106      	bne.n	800706a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007064:	6978      	ldr	r0, [r7, #20]
 8007066:	f7ff ff3b 	bl	8006ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706e:	f043 0210 	orr.w	r2, r3, #16
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007076:	6978      	ldr	r0, [r7, #20]
 8007078:	f7ff fb56 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fb40 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f003 fde5 	bl	800aca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d027      	beq.n	800714e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4b2f      	ldr	r3, [pc, #188]	; (80071c4 <FMC_SDRAM_Init+0xe0>)
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007114:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800711a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007120:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007126:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800712c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007132:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007138:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800713e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e032      	b.n	80071b4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007164:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800716a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <FMC_SDRAM_Init+0xe0>)
 800717c:	4013      	ands	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007188:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800718e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007194:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800719a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80071a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	ffff8000 	.word	0xffff8000

080071c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d02e      	beq.n	8007240 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071ee:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80071fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	3b01      	subs	r3, #1
 8007206:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007208:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	3b01      	subs	r3, #1
 8007210:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007212:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	3b01      	subs	r3, #1
 800721a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800721c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	3b01      	subs	r3, #1
 8007224:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007226:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	3b01      	subs	r3, #1
 800722e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007230:	4313      	orrs	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	e039      	b.n	80072b4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <FMC_SDRAM_Timing_Init+0xfc>)
 800724a:	4013      	ands	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	3b01      	subs	r3, #1
 8007254:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	3b01      	subs	r3, #1
 800725c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800725e:	4313      	orrs	r3, r2
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007272:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	3b01      	subs	r3, #1
 8007280:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007282:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	3b01      	subs	r3, #1
 800728a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800728c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007296:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	3b01      	subs	r3, #1
 800729e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80072a0:	4313      	orrs	r3, r2
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	ff0f0fff 	.word	0xff0f0fff

080072c8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072e0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80072ea:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800733e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007342:	2b84      	cmp	r3, #132	; 0x84
 8007344:	d005      	beq.n	8007352 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007346:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	3303      	adds	r3, #3
 8007350:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007364:	f000 fe8c 	bl	8008080 <vTaskStartScheduler>
  
  return osOK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	bd80      	pop	{r7, pc}

0800736e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800736e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007370:	b087      	sub	sp, #28
 8007372:	af02      	add	r7, sp, #8
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685c      	ldr	r4, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007384:	b29e      	uxth	r6, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ffcf 	bl	8007330 <makeFreeRtosPriority>
 8007392:	4602      	mov	r2, r0
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	9200      	str	r2, [sp, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	4632      	mov	r2, r6
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fc8a 	bl	8007cbc <xTaskCreate>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d001      	beq.n	80073b2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	e000      	b.n	80073b4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <osDelay+0x16>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e000      	b.n	80073d4 <osDelay+0x18>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 fe1d 	bl	8008014 <vTaskDelay>
  
  return osOK;
 80073da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f103 0208 	add.w	r2, r3, #8
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f103 0208 	add.w	r2, r3, #8
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f103 0208 	add.w	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d103      	bne.n	80074a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e00c      	b.n	80074c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3308      	adds	r3, #8
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e002      	b.n	80074b4 <vListInsert+0x2e>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d2f6      	bcs.n	80074ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]
}
 80074ec:	bf00      	nop
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6892      	ldr	r2, [r2, #8]
 800750e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6852      	ldr	r2, [r2, #4]
 8007518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d103      	bne.n	800752c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	1e5a      	subs	r2, r3, #1
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	60bb      	str	r3, [r7, #8]
 8007576:	e7fe      	b.n	8007576 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007578:	f001 fb7e 	bl	8008c78 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	441a      	add	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	3b01      	subs	r3, #1
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	22ff      	movs	r2, #255	; 0xff
 80075bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22ff      	movs	r2, #255	; 0xff
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d114      	bne.n	80075f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3310      	adds	r3, #16
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 ff96 	bl	800850c <xTaskRemoveFromEventList>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d012      	beq.n	800760c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <xQueueGenericReset+0xd0>)
 80075e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	e009      	b.n	800760c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3310      	adds	r3, #16
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fef1 	bl	80073e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3324      	adds	r3, #36	; 0x24
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff feec 	bl	80073e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800760c:	f001 fb66 	bl	8008cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007610:	2301      	movs	r3, #1
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10b      	bne.n	800764c <xQueueGenericCreate+0x2c>
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	b672      	cpsid	i
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	b662      	cpsie	i
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	e7fe      	b.n	800764a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	e004      	b.n	8007662 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3348      	adds	r3, #72	; 0x48
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fbe6 	bl	8008e38 <pvPortMalloc>
 800766c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3348      	adds	r3, #72	; 0x48
 8007678:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800767a:	79fa      	ldrb	r2, [r7, #7]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f805 	bl	8007696 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800768c:	69bb      	ldr	r3, [r7, #24]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e002      	b.n	80076b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076c4:	2101      	movs	r1, #1
 80076c6:	69b8      	ldr	r0, [r7, #24]
 80076c8:	f7ff ff40 	bl	800754c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	; 0x38
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericSend+0x34>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
 8007706:	e7fe      	b.n	8007706 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <xQueueGenericSend+0x42>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <xQueueGenericSend+0x46>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericSend+0x48>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xQueueGenericSend+0x64>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	b672      	cpsid	i
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	b662      	cpsie	i
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
 8007736:	e7fe      	b.n	8007736 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d103      	bne.n	8007746 <xQueueGenericSend+0x72>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <xQueueGenericSend+0x76>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <xQueueGenericSend+0x78>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <xQueueGenericSend+0x94>
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	b672      	cpsid	i
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	b662      	cpsie	i
 8007764:	623b      	str	r3, [r7, #32]
 8007766:	e7fe      	b.n	8007766 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007768:	f001 f874 	bl	8008854 <xTaskGetSchedulerState>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <xQueueGenericSend+0xa4>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <xQueueGenericSend+0xa8>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <xQueueGenericSend+0xaa>
 800777c:	2300      	movs	r3, #0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <xQueueGenericSend+0xc6>
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	b672      	cpsid	i
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	b662      	cpsie	i
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e7fe      	b.n	8007798 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800779a:	f001 fa6d 	bl	8008c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <xQueueGenericSend+0xdc>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d129      	bne.n	8007804 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077b6:	f000 f971 	bl	8007a9c <prvCopyDataToQueue>
 80077ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	3324      	adds	r3, #36	; 0x24
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fe9f 	bl	800850c <xTaskRemoveFromEventList>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077d4:	4b3f      	ldr	r3, [pc, #252]	; (80078d4 <xQueueGenericSend+0x200>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	e00a      	b.n	80077fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077ec:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <xQueueGenericSend+0x200>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077fc:	f001 fa6e 	bl	8008cdc <vPortExitCritical>
				return pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	e063      	b.n	80078cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800780a:	f001 fa67 	bl	8008cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800780e:	2300      	movs	r3, #0
 8007810:	e05c      	b.n	80078cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fed9 	bl	80085d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007826:	f001 fa59 	bl	8008cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800782a:	f000 fc73 	bl	8008114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782e:	f001 fa23 	bl	8008c78 <vPortEnterCritical>
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007838:	b25b      	sxtb	r3, r3
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d103      	bne.n	8007848 <xQueueGenericSend+0x174>
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784e:	b25b      	sxtb	r3, r3
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d103      	bne.n	800785e <xQueueGenericSend+0x18a>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785e:	f001 fa3d 	bl	8008cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007862:	1d3a      	adds	r2, r7, #4
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fec8 	bl	8008600 <xTaskCheckForTimeOut>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d124      	bne.n	80078c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007878:	f000 fa08 	bl	8007c8c <prvIsQueueFull>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fe18 	bl	80084c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007892:	f000 f993 	bl	8007bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007896:	f000 fc4b 	bl	8008130 <xTaskResumeAll>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f af7c 	bne.w	800779a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <xQueueGenericSend+0x200>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	e772      	b.n	800779a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078b6:	f000 f981 	bl	8007bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ba:	f000 fc39 	bl	8008130 <xTaskResumeAll>
 80078be:	e76c      	b.n	800779a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078c2:	f000 f97b 	bl	8007bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c6:	f000 fc33 	bl	8008130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
		}
	}
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3738      	adds	r7, #56	; 0x38
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <xQueueReceive+0x32>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	b672      	cpsid	i
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	b662      	cpsie	i
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	e7fe      	b.n	8007908 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <xQueueReceive+0x40>
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <xQueueReceive+0x44>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <xQueueReceive+0x46>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <xQueueReceive+0x62>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	e7fe      	b.n	8007938 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800793a:	f000 ff8b 	bl	8008854 <xTaskGetSchedulerState>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <xQueueReceive+0x72>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <xQueueReceive+0x76>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xQueueReceive+0x78>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <xQueueReceive+0x94>
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e7fe      	b.n	800796a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800796c:	f001 f984 	bl	8008c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01f      	beq.n	80079bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007980:	f000 f8f6 	bl	8007b70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1e5a      	subs	r2, r3, #1
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00f      	beq.n	80079b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	3310      	adds	r3, #16
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fdb7 	bl	800850c <xTaskRemoveFromEventList>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079a4:	4b3c      	ldr	r3, [pc, #240]	; (8007a98 <xQueueReceive+0x1c0>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079b4:	f001 f992 	bl	8008cdc <vPortExitCritical>
				return pdPASS;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e069      	b.n	8007a90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079c2:	f001 f98b 	bl	8008cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e062      	b.n	8007a90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079d0:	f107 0310 	add.w	r3, r7, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fdfd 	bl	80085d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079de:	f001 f97d 	bl	8008cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079e2:	f000 fb97 	bl	8008114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079e6:	f001 f947 	bl	8008c78 <vPortEnterCritical>
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079f0:	b25b      	sxtb	r3, r3
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d103      	bne.n	8007a00 <xQueueReceive+0x128>
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a06:	b25b      	sxtb	r3, r3
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d103      	bne.n	8007a16 <xQueueReceive+0x13e>
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a16:	f001 f961 	bl	8008cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a1a:	1d3a      	adds	r2, r7, #4
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fdec 	bl	8008600 <xTaskCheckForTimeOut>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d123      	bne.n	8007a76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a30:	f000 f916 	bl	8007c60 <prvIsQueueEmpty>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d017      	beq.n	8007a6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	3324      	adds	r3, #36	; 0x24
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4611      	mov	r1, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fd3c 	bl	80084c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a4a:	f000 f8b7 	bl	8007bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a4e:	f000 fb6f 	bl	8008130 <xTaskResumeAll>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d189      	bne.n	800796c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xQueueReceive+0x1c0>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	e780      	b.n	800796c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a6c:	f000 f8a6 	bl	8007bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a70:	f000 fb5e 	bl	8008130 <xTaskResumeAll>
 8007a74:	e77a      	b.n	800796c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a78:	f000 f8a0 	bl	8007bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a7c:	f000 fb58 	bl	8008130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a82:	f000 f8ed 	bl	8007c60 <prvIsQueueEmpty>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f43f af6f 	beq.w	800796c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3730      	adds	r7, #48	; 0x30
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10d      	bne.n	8007ad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d14d      	bne.n	8007b5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fee2 	bl	8008890 <xTaskPriorityDisinherit>
 8007acc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	e043      	b.n	8007b5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d119      	bne.n	8007b10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6898      	ldr	r0, [r3, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	f003 fd02 	bl	800b4f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d32b      	bcc.n	8007b5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	609a      	str	r2, [r3, #8]
 8007b0e:	e026      	b.n	8007b5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68d8      	ldr	r0, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	f003 fce8 	bl	800b4f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	425b      	negs	r3, r3
 8007b2a:	441a      	add	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d207      	bcs.n	8007b4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	425b      	negs	r3, r3
 8007b46:	441a      	add	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d105      	bne.n	8007b5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b66:	697b      	ldr	r3, [r7, #20]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d018      	beq.n	8007bb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	441a      	add	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d303      	bcc.n	8007ba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68d9      	ldr	r1, [r3, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	461a      	mov	r2, r3
 8007bae:	6838      	ldr	r0, [r7, #0]
 8007bb0:	f003 fc9e 	bl	800b4f0 <memcpy>
	}
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bc4:	f001 f858 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bd0:	e011      	b.n	8007bf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d012      	beq.n	8007c00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3324      	adds	r3, #36	; 0x24
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fc94 	bl	800850c <xTaskRemoveFromEventList>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bea:	f000 fd6d 	bl	80086c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dce9      	bgt.n	8007bd2 <prvUnlockQueue+0x16>
 8007bfe:	e000      	b.n	8007c02 <prvUnlockQueue+0x46>
					break;
 8007c00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	22ff      	movs	r2, #255	; 0xff
 8007c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c0a:	f001 f867 	bl	8008cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c0e:	f001 f833 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c1a:	e011      	b.n	8007c40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d012      	beq.n	8007c4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3310      	adds	r3, #16
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fc6f 	bl	800850c <xTaskRemoveFromEventList>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c34:	f000 fd48 	bl	80086c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dce9      	bgt.n	8007c1c <prvUnlockQueue+0x60>
 8007c48:	e000      	b.n	8007c4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	22ff      	movs	r2, #255	; 0xff
 8007c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c54:	f001 f842 	bl	8008cdc <vPortExitCritical>
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c68:	f001 f806 	bl	8008c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e001      	b.n	8007c7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c7e:	f001 f82d 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 8007c82:	68fb      	ldr	r3, [r7, #12]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c94:	f000 fff0 	bl	8008c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d102      	bne.n	8007caa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e001      	b.n	8007cae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cae:	f001 f815 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08c      	sub	sp, #48	; 0x30
 8007cc0:	af04      	add	r7, sp, #16
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f8b1 	bl	8008e38 <pvPortMalloc>
 8007cd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007cde:	2054      	movs	r0, #84	; 0x54
 8007ce0:	f001 f8aa 	bl	8008e38 <pvPortMalloc>
 8007ce4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8007cf2:	e005      	b.n	8007d00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cf4:	6978      	ldr	r0, [r7, #20]
 8007cf6:	f001 f967 	bl	8008fc8 <vPortFree>
 8007cfa:	e001      	b.n	8007d00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f80e 	bl	8007d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d22:	69f8      	ldr	r0, [r7, #28]
 8007d24:	f000 f88c 	bl	8007e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	e002      	b.n	8007d34 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d34:	69bb      	ldr	r3, [r7, #24]
	}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007d56:	440b      	add	r3, r1
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <prvInitialiseNewTask+0x4a>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	b672      	cpsid	i
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	b662      	cpsie	i
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	e7fe      	b.n	8007d86 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e012      	b.n	8007db4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	7819      	ldrb	r1, [r3, #0]
 8007d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3334      	adds	r3, #52	; 0x34
 8007d9e:	460a      	mov	r2, r1
 8007da0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d006      	beq.n	8007dbc <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	3301      	adds	r3, #1
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b0f      	cmp	r3, #15
 8007db8:	d9e9      	bls.n	8007d8e <prvInitialiseNewTask+0x50>
 8007dba:	e000      	b.n	8007dbe <prvInitialiseNewTask+0x80>
		{
			break;
 8007dbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d901      	bls.n	8007dd0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007dcc:	2306      	movs	r3, #6
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	2200      	movs	r2, #0
 8007de0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	3304      	adds	r3, #4
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff fb1c 	bl	8007424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	3318      	adds	r3, #24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fb17 	bl	8007424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f1c3 0207 	rsb	r2, r3, #7
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	2200      	movs	r2, #0
 8007e10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	69b8      	ldr	r0, [r7, #24]
 8007e20:	f000 fe24 	bl	8008a6c <pxPortInitialiseStack>
 8007e24:	4602      	mov	r2, r0
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e36:	bf00      	nop
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e48:	f000 ff16 	bl	8008c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e4c:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <prvAddNewTaskToReadyList+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	4a29      	ldr	r2, [pc, #164]	; (8007ef8 <prvAddNewTaskToReadyList+0xb8>)
 8007e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e56:	4b29      	ldr	r3, [pc, #164]	; (8007efc <prvAddNewTaskToReadyList+0xbc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e5e:	4a27      	ldr	r2, [pc, #156]	; (8007efc <prvAddNewTaskToReadyList+0xbc>)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <prvAddNewTaskToReadyList+0xb8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d110      	bne.n	8007e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e6c:	f000 fc50 	bl	8008710 <prvInitialiseTaskLists>
 8007e70:	e00d      	b.n	8007e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e72:	4b23      	ldr	r3, [pc, #140]	; (8007f00 <prvAddNewTaskToReadyList+0xc0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e7a:	4b20      	ldr	r3, [pc, #128]	; (8007efc <prvAddNewTaskToReadyList+0xbc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d802      	bhi.n	8007e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <prvAddNewTaskToReadyList+0xbc>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e8e:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <prvAddNewTaskToReadyList+0xc4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <prvAddNewTaskToReadyList+0xc4>)
 8007e96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <prvAddNewTaskToReadyList+0xc8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <prvAddNewTaskToReadyList+0xc8>)
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <prvAddNewTaskToReadyList+0xcc>)
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7ff fabc 	bl	800743e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ec6:	f000 ff09 	bl	8008cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <prvAddNewTaskToReadyList+0xc0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <prvAddNewTaskToReadyList+0xbc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d207      	bcs.n	8007ef0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <prvAddNewTaskToReadyList+0xd0>)
 8007ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20004334 	.word	0x20004334
 8007efc:	20004234 	.word	0x20004234
 8007f00:	20004340 	.word	0x20004340
 8007f04:	20004350 	.word	0x20004350
 8007f08:	2000433c 	.word	0x2000433c
 8007f0c:	20004238 	.word	0x20004238
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	; 0x28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <vTaskDelayUntil+0x2c>
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	b672      	cpsid	i
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	b662      	cpsie	i
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e7fe      	b.n	8007f3e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10b      	bne.n	8007f5e <vTaskDelayUntil+0x4a>
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e7fe      	b.n	8007f5c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007f5e:	4b2a      	ldr	r3, [pc, #168]	; (8008008 <vTaskDelayUntil+0xf4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <vTaskDelayUntil+0x6a>
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e7fe      	b.n	8007f7c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8007f7e:	f000 f8c9 	bl	8008114 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f82:	4b22      	ldr	r3, [pc, #136]	; (800800c <vTaskDelayUntil+0xf8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	4413      	add	r3, r2
 8007f90:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a3a      	ldr	r2, [r7, #32]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d20b      	bcs.n	8007fb4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d211      	bcs.n	8007fca <vTaskDelayUntil+0xb6>
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d90d      	bls.n	8007fca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb2:	e00a      	b.n	8007fca <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d303      	bcc.n	8007fc6 <vTaskDelayUntil+0xb2>
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d901      	bls.n	8007fca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fcde 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007fe4:	f000 f8a4 	bl	8008130 <xTaskResumeAll>
 8007fe8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <vTaskDelayUntil+0xfc>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008000:	bf00      	nop
 8008002:	3728      	adds	r7, #40	; 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	2000435c 	.word	0x2000435c
 800800c:	20004338 	.word	0x20004338
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <vTaskDelay+0x64>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <vTaskDelay+0x32>
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	b672      	cpsid	i
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	b662      	cpsie	i
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	e7fe      	b.n	8008044 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008046:	f000 f865 	bl	8008114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800804a:	2100      	movs	r1, #0
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fca7 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008052:	f000 f86d 	bl	8008130 <xTaskResumeAll>
 8008056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800805e:	4b07      	ldr	r3, [pc, #28]	; (800807c <vTaskDelay+0x68>)
 8008060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	2000435c 	.word	0x2000435c
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008086:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <vTaskStartScheduler+0x7c>)
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2300      	movs	r3, #0
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	2280      	movs	r2, #128	; 0x80
 8008092:	491b      	ldr	r1, [pc, #108]	; (8008100 <vTaskStartScheduler+0x80>)
 8008094:	481b      	ldr	r0, [pc, #108]	; (8008104 <vTaskStartScheduler+0x84>)
 8008096:	f7ff fe11 	bl	8007cbc <xTaskCreate>
 800809a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d117      	bne.n	80080d2 <vTaskStartScheduler+0x52>
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	b672      	cpsid	i
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	b662      	cpsie	i
 80080b6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080b8:	4b13      	ldr	r3, [pc, #76]	; (8008108 <vTaskStartScheduler+0x88>)
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080c0:	4b12      	ldr	r3, [pc, #72]	; (800810c <vTaskStartScheduler+0x8c>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <vTaskStartScheduler+0x90>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080cc:	f000 fd58 	bl	8008b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080d0:	e00f      	b.n	80080f2 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d8:	d10b      	bne.n	80080f2 <vTaskStartScheduler+0x72>
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	b672      	cpsid	i
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	b662      	cpsie	i
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e7fe      	b.n	80080f0 <vTaskStartScheduler+0x70>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20004358 	.word	0x20004358
 8008100:	0800b530 	.word	0x0800b530
 8008104:	080086e1 	.word	0x080086e1
 8008108:	20004354 	.word	0x20004354
 800810c:	20004340 	.word	0x20004340
 8008110:	20004338 	.word	0x20004338

08008114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <vTaskSuspendAll+0x18>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	4a03      	ldr	r2, [pc, #12]	; (800812c <vTaskSuspendAll+0x18>)
 8008120:	6013      	str	r3, [r2, #0]
}
 8008122:	bf00      	nop
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	2000435c 	.word	0x2000435c

08008130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800813e:	4b42      	ldr	r3, [pc, #264]	; (8008248 <xTaskResumeAll+0x118>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <xTaskResumeAll+0x2e>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	b672      	cpsid	i
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	b662      	cpsie	i
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	e7fe      	b.n	800815c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800815e:	f000 fd8b 	bl	8008c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008162:	4b39      	ldr	r3, [pc, #228]	; (8008248 <xTaskResumeAll+0x118>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	4a37      	ldr	r2, [pc, #220]	; (8008248 <xTaskResumeAll+0x118>)
 800816a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816c:	4b36      	ldr	r3, [pc, #216]	; (8008248 <xTaskResumeAll+0x118>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d161      	bne.n	8008238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008174:	4b35      	ldr	r3, [pc, #212]	; (800824c <xTaskResumeAll+0x11c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d05d      	beq.n	8008238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800817c:	e02e      	b.n	80081dc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800817e:	4b34      	ldr	r3, [pc, #208]	; (8008250 <xTaskResumeAll+0x120>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3318      	adds	r3, #24
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff f9b4 	bl	80074f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3304      	adds	r3, #4
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff f9af 	bl	80074f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	2201      	movs	r2, #1
 80081a0:	409a      	lsls	r2, r3
 80081a2:	4b2c      	ldr	r3, [pc, #176]	; (8008254 <xTaskResumeAll+0x124>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <xTaskResumeAll+0x124>)
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4a27      	ldr	r2, [pc, #156]	; (8008258 <xTaskResumeAll+0x128>)
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3304      	adds	r3, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7ff f93b 	bl	800743e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4b23      	ldr	r3, [pc, #140]	; (800825c <xTaskResumeAll+0x12c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081d6:	4b22      	ldr	r3, [pc, #136]	; (8008260 <xTaskResumeAll+0x130>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081dc:	4b1c      	ldr	r3, [pc, #112]	; (8008250 <xTaskResumeAll+0x120>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1cc      	bne.n	800817e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081ea:	f000 fb0d 	bl	8008808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <xTaskResumeAll+0x134>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d010      	beq.n	800821c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081fa:	f000 f847 	bl	800828c <xTaskIncrementTick>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008204:	4b16      	ldr	r3, [pc, #88]	; (8008260 <xTaskResumeAll+0x130>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3b01      	subs	r3, #1
 800820e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f1      	bne.n	80081fa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <xTaskResumeAll+0x134>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800821c:	4b10      	ldr	r3, [pc, #64]	; (8008260 <xTaskResumeAll+0x130>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <xTaskResumeAll+0x138>)
 800822a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008238:	f000 fd50 	bl	8008cdc <vPortExitCritical>

	return xAlreadyYielded;
 800823c:	68bb      	ldr	r3, [r7, #8]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	2000435c 	.word	0x2000435c
 800824c:	20004334 	.word	0x20004334
 8008250:	200042f4 	.word	0x200042f4
 8008254:	2000433c 	.word	0x2000433c
 8008258:	20004238 	.word	0x20004238
 800825c:	20004234 	.word	0x20004234
 8008260:	20004348 	.word	0x20004348
 8008264:	20004344 	.word	0x20004344
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <xTaskGetTickCount+0x1c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20004338 	.word	0x20004338

0800828c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008296:	4b51      	ldr	r3, [pc, #324]	; (80083dc <xTaskIncrementTick+0x150>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f040 808e 	bne.w	80083bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082a0:	4b4f      	ldr	r3, [pc, #316]	; (80083e0 <xTaskIncrementTick+0x154>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082a8:	4a4d      	ldr	r2, [pc, #308]	; (80083e0 <xTaskIncrementTick+0x154>)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d121      	bne.n	80082f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082b4:	4b4b      	ldr	r3, [pc, #300]	; (80083e4 <xTaskIncrementTick+0x158>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <xTaskIncrementTick+0x4a>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	b672      	cpsid	i
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	b662      	cpsie	i
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	e7fe      	b.n	80082d4 <xTaskIncrementTick+0x48>
 80082d6:	4b43      	ldr	r3, [pc, #268]	; (80083e4 <xTaskIncrementTick+0x158>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <xTaskIncrementTick+0x15c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a40      	ldr	r2, [pc, #256]	; (80083e4 <xTaskIncrementTick+0x158>)
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <xTaskIncrementTick+0x15c>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b40      	ldr	r3, [pc, #256]	; (80083ec <xTaskIncrementTick+0x160>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	4a3e      	ldr	r2, [pc, #248]	; (80083ec <xTaskIncrementTick+0x160>)
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	f000 fa88 	bl	8008808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082f8:	4b3d      	ldr	r3, [pc, #244]	; (80083f0 <xTaskIncrementTick+0x164>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d34d      	bcc.n	800839e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008302:	4b38      	ldr	r3, [pc, #224]	; (80083e4 <xTaskIncrementTick+0x158>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <xTaskIncrementTick+0x84>
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <xTaskIncrementTick+0x86>
 8008310:	2300      	movs	r3, #0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008316:	4b36      	ldr	r3, [pc, #216]	; (80083f0 <xTaskIncrementTick+0x164>)
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	601a      	str	r2, [r3, #0]
					break;
 800831e:	e03e      	b.n	800839e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008320:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <xTaskIncrementTick+0x158>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d203      	bcs.n	8008340 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008338:	4a2d      	ldr	r2, [pc, #180]	; (80083f0 <xTaskIncrementTick+0x164>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6013      	str	r3, [r2, #0]
						break;
 800833e:	e02e      	b.n	800839e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3304      	adds	r3, #4
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff f8d7 	bl	80074f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3318      	adds	r3, #24
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff f8ce 	bl	80074f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	2201      	movs	r2, #1
 8008362:	409a      	lsls	r2, r3
 8008364:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <xTaskIncrementTick+0x168>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4313      	orrs	r3, r2
 800836a:	4a22      	ldr	r2, [pc, #136]	; (80083f4 <xTaskIncrementTick+0x168>)
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4a1f      	ldr	r2, [pc, #124]	; (80083f8 <xTaskIncrementTick+0x16c>)
 800837c:	441a      	add	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3304      	adds	r3, #4
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7ff f85a 	bl	800743e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838e:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <xTaskIncrementTick+0x170>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	429a      	cmp	r2, r3
 8008396:	d3b4      	bcc.n	8008302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008398:	2301      	movs	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839c:	e7b1      	b.n	8008302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800839e:	4b17      	ldr	r3, [pc, #92]	; (80083fc <xTaskIncrementTick+0x170>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	4914      	ldr	r1, [pc, #80]	; (80083f8 <xTaskIncrementTick+0x16c>)
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	440b      	add	r3, r1
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d907      	bls.n	80083c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80083b6:	2301      	movs	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e004      	b.n	80083c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80083bc:	4b10      	ldr	r3, [pc, #64]	; (8008400 <xTaskIncrementTick+0x174>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	4a0f      	ldr	r2, [pc, #60]	; (8008400 <xTaskIncrementTick+0x174>)
 80083c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <xTaskIncrementTick+0x178>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80083ce:	2301      	movs	r3, #1
 80083d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083d2:	697b      	ldr	r3, [r7, #20]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	2000435c 	.word	0x2000435c
 80083e0:	20004338 	.word	0x20004338
 80083e4:	200042ec 	.word	0x200042ec
 80083e8:	200042f0 	.word	0x200042f0
 80083ec:	2000434c 	.word	0x2000434c
 80083f0:	20004354 	.word	0x20004354
 80083f4:	2000433c 	.word	0x2000433c
 80083f8:	20004238 	.word	0x20004238
 80083fc:	20004234 	.word	0x20004234
 8008400:	20004344 	.word	0x20004344
 8008404:	20004348 	.word	0x20004348

08008408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800840e:	4b27      	ldr	r3, [pc, #156]	; (80084ac <vTaskSwitchContext+0xa4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <vTaskSwitchContext+0xa8>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800841c:	e040      	b.n	80084a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800841e:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <vTaskSwitchContext+0xa8>)
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008424:	4b23      	ldr	r3, [pc, #140]	; (80084b4 <vTaskSwitchContext+0xac>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	fab3 f383 	clz	r3, r3
 8008430:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	f1c3 031f 	rsb	r3, r3, #31
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	491f      	ldr	r1, [pc, #124]	; (80084b8 <vTaskSwitchContext+0xb0>)
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <vTaskSwitchContext+0x5e>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	b672      	cpsid	i
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	b662      	cpsie	i
 8008462:	607b      	str	r3, [r7, #4]
 8008464:	e7fe      	b.n	8008464 <vTaskSwitchContext+0x5c>
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <vTaskSwitchContext+0xb0>)
 8008472:	4413      	add	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	605a      	str	r2, [r3, #4]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3308      	adds	r3, #8
 8008488:	429a      	cmp	r2, r3
 800848a:	d104      	bne.n	8008496 <vTaskSwitchContext+0x8e>
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4a07      	ldr	r2, [pc, #28]	; (80084bc <vTaskSwitchContext+0xb4>)
 800849e:	6013      	str	r3, [r2, #0]
}
 80084a0:	bf00      	nop
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	2000435c 	.word	0x2000435c
 80084b0:	20004348 	.word	0x20004348
 80084b4:	2000433c 	.word	0x2000433c
 80084b8:	20004238 	.word	0x20004238
 80084bc:	20004234 	.word	0x20004234

080084c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <vTaskPlaceOnEventList+0x28>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	b662      	cpsie	i
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e7fe      	b.n	80084e6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <vTaskPlaceOnEventList+0x48>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3318      	adds	r3, #24
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7fe ffc8 	bl	8007486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084f6:	2101      	movs	r1, #1
 80084f8:	6838      	ldr	r0, [r7, #0]
 80084fa:	f000 fa51 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20004234 	.word	0x20004234

0800850c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10b      	bne.n	800853a <xTaskRemoveFromEventList+0x2e>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	b672      	cpsid	i
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	b662      	cpsie	i
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e7fe      	b.n	8008538 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3318      	adds	r3, #24
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe ffda 	bl	80074f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008544:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <xTaskRemoveFromEventList+0xb0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11c      	bne.n	8008586 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	3304      	adds	r3, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe ffd1 	bl	80074f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	2201      	movs	r2, #1
 800855c:	409a      	lsls	r2, r3
 800855e:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <xTaskRemoveFromEventList+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4313      	orrs	r3, r2
 8008564:	4a16      	ldr	r2, [pc, #88]	; (80085c0 <xTaskRemoveFromEventList+0xb4>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <xTaskRemoveFromEventList+0xb8>)
 8008576:	441a      	add	r2, r3
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe ff5d 	bl	800743e <vListInsertEnd>
 8008584:	e005      	b.n	8008592 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3318      	adds	r3, #24
 800858a:	4619      	mov	r1, r3
 800858c:	480e      	ldr	r0, [pc, #56]	; (80085c8 <xTaskRemoveFromEventList+0xbc>)
 800858e:	f7fe ff56 	bl	800743e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <xTaskRemoveFromEventList+0xc0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	429a      	cmp	r2, r3
 800859e:	d905      	bls.n	80085ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <xTaskRemoveFromEventList+0xc4>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e001      	b.n	80085b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80085b0:	697b      	ldr	r3, [r7, #20]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	2000435c 	.word	0x2000435c
 80085c0:	2000433c 	.word	0x2000433c
 80085c4:	20004238 	.word	0x20004238
 80085c8:	200042f4 	.word	0x200042f4
 80085cc:	20004234 	.word	0x20004234
 80085d0:	20004348 	.word	0x20004348

080085d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <vTaskInternalSetTimeOutState+0x24>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <vTaskInternalSetTimeOutState+0x28>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	2000434c 	.word	0x2000434c
 80085fc:	20004338 	.word	0x20004338

08008600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10b      	bne.n	8008628 <xTaskCheckForTimeOut+0x28>
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	b672      	cpsid	i
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	b662      	cpsie	i
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	e7fe      	b.n	8008626 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10b      	bne.n	8008646 <xTaskCheckForTimeOut+0x46>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	b672      	cpsid	i
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	b662      	cpsie	i
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e7fe      	b.n	8008644 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008646:	f000 fb17 	bl	8008c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800864a:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <xTaskCheckForTimeOut+0xc0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d102      	bne.n	800866a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	e023      	b.n	80086b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <xTaskCheckForTimeOut+0xc4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d007      	beq.n	8008686 <xTaskCheckForTimeOut+0x86>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	e015      	b.n	80086b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	429a      	cmp	r2, r3
 800868e:	d20b      	bcs.n	80086a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff ff99 	bl	80085d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	e004      	b.n	80086b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086ae:	2301      	movs	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f000 fb13 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 80086b6:	69fb      	ldr	r3, [r7, #28]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20004338 	.word	0x20004338
 80086c4:	2000434c 	.word	0x2000434c

080086c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086cc:	4b03      	ldr	r3, [pc, #12]	; (80086dc <vTaskMissedYield+0x14>)
 80086ce:	2201      	movs	r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
}
 80086d2:	bf00      	nop
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	20004348 	.word	0x20004348

080086e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086e8:	f000 f852 	bl	8008790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <prvIdleTask+0x28>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d9f9      	bls.n	80086e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <prvIdleTask+0x2c>)
 80086f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008704:	e7f0      	b.n	80086e8 <prvIdleTask+0x8>
 8008706:	bf00      	nop
 8008708:	20004238 	.word	0x20004238
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008716:	2300      	movs	r3, #0
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	e00c      	b.n	8008736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4a12      	ldr	r2, [pc, #72]	; (8008770 <prvInitialiseTaskLists+0x60>)
 8008728:	4413      	add	r3, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fe5a 	bl	80073e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3301      	adds	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b06      	cmp	r3, #6
 800873a:	d9ef      	bls.n	800871c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800873c:	480d      	ldr	r0, [pc, #52]	; (8008774 <prvInitialiseTaskLists+0x64>)
 800873e:	f7fe fe51 	bl	80073e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008742:	480d      	ldr	r0, [pc, #52]	; (8008778 <prvInitialiseTaskLists+0x68>)
 8008744:	f7fe fe4e 	bl	80073e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008748:	480c      	ldr	r0, [pc, #48]	; (800877c <prvInitialiseTaskLists+0x6c>)
 800874a:	f7fe fe4b 	bl	80073e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800874e:	480c      	ldr	r0, [pc, #48]	; (8008780 <prvInitialiseTaskLists+0x70>)
 8008750:	f7fe fe48 	bl	80073e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008754:	480b      	ldr	r0, [pc, #44]	; (8008784 <prvInitialiseTaskLists+0x74>)
 8008756:	f7fe fe45 	bl	80073e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800875a:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <prvInitialiseTaskLists+0x78>)
 800875c:	4a05      	ldr	r2, [pc, #20]	; (8008774 <prvInitialiseTaskLists+0x64>)
 800875e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <prvInitialiseTaskLists+0x7c>)
 8008762:	4a05      	ldr	r2, [pc, #20]	; (8008778 <prvInitialiseTaskLists+0x68>)
 8008764:	601a      	str	r2, [r3, #0]
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20004238 	.word	0x20004238
 8008774:	200042c4 	.word	0x200042c4
 8008778:	200042d8 	.word	0x200042d8
 800877c:	200042f4 	.word	0x200042f4
 8008780:	20004308 	.word	0x20004308
 8008784:	20004320 	.word	0x20004320
 8008788:	200042ec 	.word	0x200042ec
 800878c:	200042f0 	.word	0x200042f0

08008790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008796:	e019      	b.n	80087cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008798:	f000 fa6e 	bl	8008c78 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <prvCheckTasksWaitingTermination+0x4c>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fea5 	bl	80074f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087ae:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <prvCheckTasksWaitingTermination+0x50>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <prvCheckTasksWaitingTermination+0x50>)
 80087b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <prvCheckTasksWaitingTermination+0x54>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3b01      	subs	r3, #1
 80087be:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <prvCheckTasksWaitingTermination+0x54>)
 80087c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087c2:	f000 fa8b 	bl	8008cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f80e 	bl	80087e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <prvCheckTasksWaitingTermination+0x54>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e1      	bne.n	8008798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20004308 	.word	0x20004308
 80087e0:	20004334 	.word	0x20004334
 80087e4:	2000431c 	.word	0x2000431c

080087e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fbe7 	bl	8008fc8 <vPortFree>
			vPortFree( pxTCB );
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbe4 	bl	8008fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <prvResetNextTaskUnblockTime+0x44>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <prvResetNextTaskUnblockTime+0x14>
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <prvResetNextTaskUnblockTime+0x16>
 800881c:	2300      	movs	r3, #0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <prvResetNextTaskUnblockTime+0x48>)
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800882a:	e008      	b.n	800883e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800882c:	4b07      	ldr	r3, [pc, #28]	; (800884c <prvResetNextTaskUnblockTime+0x44>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4a05      	ldr	r2, [pc, #20]	; (8008850 <prvResetNextTaskUnblockTime+0x48>)
 800883c:	6013      	str	r3, [r2, #0]
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	200042ec 	.word	0x200042ec
 8008850:	20004354 	.word	0x20004354

08008854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <xTaskGetSchedulerState+0x34>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008862:	2301      	movs	r3, #1
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	e008      	b.n	800887a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008868:	4b08      	ldr	r3, [pc, #32]	; (800888c <xTaskGetSchedulerState+0x38>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008870:	2302      	movs	r3, #2
 8008872:	607b      	str	r3, [r7, #4]
 8008874:	e001      	b.n	800887a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800887a:	687b      	ldr	r3, [r7, #4]
	}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	20004340 	.word	0x20004340
 800888c:	2000435c 	.word	0x2000435c

08008890 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d070      	beq.n	8008988 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088a6:	4b3b      	ldr	r3, [pc, #236]	; (8008994 <xTaskPriorityDisinherit+0x104>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d00b      	beq.n	80088c8 <xTaskPriorityDisinherit+0x38>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	b672      	cpsid	i
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	b662      	cpsie	i
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e7fe      	b.n	80088c6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <xTaskPriorityDisinherit+0x58>
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	e7fe      	b.n	80088e6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ec:	1e5a      	subs	r2, r3, #1
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d044      	beq.n	8008988 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008902:	2b00      	cmp	r3, #0
 8008904:	d140      	bne.n	8008988 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3304      	adds	r3, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fdf4 	bl	80074f8 <uxListRemove>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d115      	bne.n	8008942 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	491f      	ldr	r1, [pc, #124]	; (8008998 <xTaskPriorityDisinherit+0x108>)
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <xTaskPriorityDisinherit+0xb2>
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	2201      	movs	r2, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	43da      	mvns	r2, r3
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <xTaskPriorityDisinherit+0x10c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4013      	ands	r3, r2
 800893e:	4a17      	ldr	r2, [pc, #92]	; (800899c <xTaskPriorityDisinherit+0x10c>)
 8008940:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	f1c3 0207 	rsb	r2, r3, #7
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	2201      	movs	r2, #1
 800895c:	409a      	lsls	r2, r3
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <xTaskPriorityDisinherit+0x10c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4313      	orrs	r3, r2
 8008964:	4a0d      	ldr	r2, [pc, #52]	; (800899c <xTaskPriorityDisinherit+0x10c>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4a08      	ldr	r2, [pc, #32]	; (8008998 <xTaskPriorityDisinherit+0x108>)
 8008976:	441a      	add	r2, r3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe fd5d 	bl	800743e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008988:	697b      	ldr	r3, [r7, #20]
	}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20004234 	.word	0x20004234
 8008998:	20004238 	.word	0x20004238
 800899c:	2000433c 	.word	0x2000433c

080089a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089aa:	4b29      	ldr	r3, [pc, #164]	; (8008a50 <prvAddCurrentTaskToDelayedList+0xb0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089b0:	4b28      	ldr	r3, [pc, #160]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fd9e 	bl	80074f8 <uxListRemove>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	2201      	movs	r2, #1
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43da      	mvns	r2, r3
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4013      	ands	r3, r2
 80089d6:	4a20      	ldr	r2, [pc, #128]	; (8008a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d10a      	bne.n	80089f8 <prvAddCurrentTaskToDelayedList+0x58>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d007      	beq.n	80089f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	481a      	ldr	r0, [pc, #104]	; (8008a5c <prvAddCurrentTaskToDelayedList+0xbc>)
 80089f2:	f7fe fd24 	bl	800743e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089f6:	e026      	b.n	8008a46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a00:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d209      	bcs.n	8008a24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7fe fd32 	bl	8007486 <vListInsert>
}
 8008a22:	e010      	b.n	8008a46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe fd28 	bl	8007486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d202      	bcs.n	8008a46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a40:	4a09      	ldr	r2, [pc, #36]	; (8008a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6013      	str	r3, [r2, #0]
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20004338 	.word	0x20004338
 8008a54:	20004234 	.word	0x20004234
 8008a58:	2000433c 	.word	0x2000433c
 8008a5c:	20004320 	.word	0x20004320
 8008a60:	200042f0 	.word	0x200042f0
 8008a64:	200042ec 	.word	0x200042ec
 8008a68:	20004354 	.word	0x20004354

08008a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f023 0201 	bic.w	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a9c:	4a0c      	ldr	r2, [pc, #48]	; (8008ad0 <pxPortInitialiseStack+0x64>)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3b14      	subs	r3, #20
 8008aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f06f 0202 	mvn.w	r2, #2
 8008aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3b20      	subs	r3, #32
 8008ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	08008ad5 	.word	0x08008ad5

08008ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <prvTaskExitError+0x58>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d00b      	beq.n	8008b00 <prvTaskExitError+0x2c>
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	e7fe      	b.n	8008afe <prvTaskExitError+0x2a>
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b16:	bf00      	nop
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0fc      	beq.n	8008b18 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20000024 	.word	0x20000024

08008b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <pxCurrentTCBConst2>)
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	6808      	ldr	r0, [r1, #0]
 8008b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	f380 8809 	msr	PSP, r0
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8811 	msr	BASEPRI, r0
 8008b4a:	4770      	bx	lr
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst2>:
 8008b50:	20004234 	.word	0x20004234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b58:	4808      	ldr	r0, [pc, #32]	; (8008b7c <prvPortStartFirstTask+0x24>)
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	6800      	ldr	r0, [r0, #0]
 8008b5e:	f380 8808 	msr	MSP, r0
 8008b62:	f04f 0000 	mov.w	r0, #0
 8008b66:	f380 8814 	msr	CONTROL, r0
 8008b6a:	b662      	cpsie	i
 8008b6c:	b661      	cpsie	f
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	df00      	svc	0
 8008b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b7a:	bf00      	nop
 8008b7c:	e000ed08 	.word	0xe000ed08

08008b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b86:	4b36      	ldr	r3, [pc, #216]	; (8008c60 <xPortStartScheduler+0xe0>)
 8008b88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	22ff      	movs	r2, #255	; 0xff
 8008b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	4b2e      	ldr	r3, [pc, #184]	; (8008c64 <xPortStartScheduler+0xe4>)
 8008bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bae:	4b2e      	ldr	r3, [pc, #184]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bb4:	e009      	b.n	8008bca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	4a2a      	ldr	r2, [pc, #168]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b80      	cmp	r3, #128	; 0x80
 8008bd4:	d0ef      	beq.n	8008bb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bd6:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f1c3 0307 	rsb	r3, r3, #7
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d00b      	beq.n	8008bfa <xPortStartScheduler+0x7a>
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	b672      	cpsid	i
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	b662      	cpsie	i
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	e7fe      	b.n	8008bf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008c02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c04:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c0c:	4a16      	ldr	r2, [pc, #88]	; (8008c68 <xPortStartScheduler+0xe8>)
 8008c0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <xPortStartScheduler+0xec>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <xPortStartScheduler+0xec>)
 8008c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c24:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <xPortStartScheduler+0xec>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <xPortStartScheduler+0xec>)
 8008c2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c30:	f000 f8d4 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <xPortStartScheduler+0xf0>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c3a:	f000 f8f3 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <xPortStartScheduler+0xf4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0c      	ldr	r2, [pc, #48]	; (8008c74 <xPortStartScheduler+0xf4>)
 8008c44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c4a:	f7ff ff85 	bl	8008b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c4e:	f7ff fbdb 	bl	8008408 <vTaskSwitchContext>
	prvTaskExitError();
 8008c52:	f7ff ff3f 	bl	8008ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	e000e400 	.word	0xe000e400
 8008c64:	20004360 	.word	0x20004360
 8008c68:	20004364 	.word	0x20004364
 8008c6c:	e000ed20 	.word	0xe000ed20
 8008c70:	20000024 	.word	0x20000024
 8008c74:	e000ef34 	.word	0xe000ef34

08008c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	b672      	cpsid	i
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	b662      	cpsie	i
 8008c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <vPortEnterCritical+0x5c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	4a0e      	ldr	r2, [pc, #56]	; (8008cd4 <vPortEnterCritical+0x5c>)
 8008c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <vPortEnterCritical+0x5c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d110      	bne.n	8008cc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <vPortEnterCritical+0x60>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <vPortEnterCritical+0x50>
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	b672      	cpsid	i
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	b662      	cpsie	i
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	e7fe      	b.n	8008cc6 <vPortEnterCritical+0x4e>
	}
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000024 	.word	0x20000024
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <vPortExitCritical+0x50>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <vPortExitCritical+0x26>
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	b672      	cpsid	i
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	b662      	cpsie	i
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	e7fe      	b.n	8008d00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008d02:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <vPortExitCritical+0x50>)
 8008d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d0c:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <vPortExitCritical+0x50>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <vPortExitCritical+0x42>
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000024 	.word	0x20000024

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f380 8811 	msr	BASEPRI, r0
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	b662      	cpsie	i
 8008d64:	f7ff fb50 	bl	8008408 <vTaskSwitchContext>
 8008d68:	f04f 0000 	mov.w	r0, #0
 8008d6c:	f380 8811 	msr	BASEPRI, r0
 8008d70:	bc09      	pop	{r0, r3}
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f01e 0f10 	tst.w	lr, #16
 8008d7e:	bf08      	it	eq
 8008d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d84:	f380 8809 	msr	PSP, r0
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <pxCurrentTCBConst>:
 8008d90:	20004234 	.word	0x20004234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	b672      	cpsid	i
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	b662      	cpsie	i
 8008db2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db4:	f7ff fa6a 	bl	800828c <xTaskIncrementTick>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbe:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <SysTick_Handler+0x40>)
 8008dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20004070 	.word	0x20004070
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e44:	f7ff f966 	bl	8008114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e48:	4b5a      	ldr	r3, [pc, #360]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e50:	f000 f916 	bl	8009080 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e54:	4b58      	ldr	r3, [pc, #352]	; (8008fb8 <pvPortMalloc+0x180>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8090 	bne.w	8008f82 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01e      	beq.n	8008ea6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e68:	2208      	movs	r2, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d015      	beq.n	8008ea6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <pvPortMalloc+0x6e>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	b672      	cpsid	i
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	b662      	cpsie	i
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	e7fe      	b.n	8008ea4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d06a      	beq.n	8008f82 <pvPortMalloc+0x14a>
 8008eac:	4b43      	ldr	r3, [pc, #268]	; (8008fbc <pvPortMalloc+0x184>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d865      	bhi.n	8008f82 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eb6:	4b42      	ldr	r3, [pc, #264]	; (8008fc0 <pvPortMalloc+0x188>)
 8008eb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eba:	4b41      	ldr	r3, [pc, #260]	; (8008fc0 <pvPortMalloc+0x188>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec0:	e004      	b.n	8008ecc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d903      	bls.n	8008ede <pvPortMalloc+0xa6>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f1      	bne.n	8008ec2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ede:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d04c      	beq.n	8008f82 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2208      	movs	r2, #8
 8008eee:	4413      	add	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	1ad2      	subs	r2, r2, r3
 8008f02:	2308      	movs	r3, #8
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d920      	bls.n	8008f4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <pvPortMalloc+0xfc>
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	b672      	cpsid	i
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	b662      	cpsie	i
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	e7fe      	b.n	8008f32 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f46:	69b8      	ldr	r0, [r7, #24]
 8008f48:	f000 f8fc 	bl	8009144 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <pvPortMalloc+0x184>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	4a19      	ldr	r2, [pc, #100]	; (8008fbc <pvPortMalloc+0x184>)
 8008f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <pvPortMalloc+0x184>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d203      	bcs.n	8008f6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f66:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <pvPortMalloc+0x184>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a16      	ldr	r2, [pc, #88]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <pvPortMalloc+0x180>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	431a      	orrs	r2, r3
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f82:	f7ff f8d5 	bl	8008130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <pvPortMalloc+0x170>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	b672      	cpsid	i
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	b662      	cpsie	i
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e7fe      	b.n	8008fa6 <pvPortMalloc+0x16e>
	return pvReturn;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	; 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20007f70 	.word	0x20007f70
 8008fb8:	20007f7c 	.word	0x20007f7c
 8008fbc:	20007f74 	.word	0x20007f74
 8008fc0:	20007f68 	.word	0x20007f68
 8008fc4:	20007f78 	.word	0x20007f78

08008fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d04a      	beq.n	8009070 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	425b      	negs	r3, r3
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	4b22      	ldr	r3, [pc, #136]	; (8009078 <vPortFree+0xb0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10b      	bne.n	800900e <vPortFree+0x46>
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	b672      	cpsid	i
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	b662      	cpsie	i
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e7fe      	b.n	800900c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00b      	beq.n	800902e <vPortFree+0x66>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	b672      	cpsid	i
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	b662      	cpsie	i
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	e7fe      	b.n	800902c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <vPortFree+0xb0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4013      	ands	r3, r2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d019      	beq.n	8009070 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d115      	bne.n	8009070 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <vPortFree+0xb0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	43db      	mvns	r3, r3
 800904e:	401a      	ands	r2, r3
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009054:	f7ff f85e 	bl	8008114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <vPortFree+0xb4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4413      	add	r3, r2
 8009062:	4a06      	ldr	r2, [pc, #24]	; (800907c <vPortFree+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009066:	6938      	ldr	r0, [r7, #16]
 8009068:	f000 f86c 	bl	8009144 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800906c:	f7ff f860 	bl	8008130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009070:	bf00      	nop
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20007f7c 	.word	0x20007f7c
 800907c:	20007f74 	.word	0x20007f74

08009080 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009086:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800908a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800908c:	4b27      	ldr	r3, [pc, #156]	; (800912c <prvHeapInit+0xac>)
 800908e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3307      	adds	r3, #7
 800909e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0307 	bic.w	r3, r3, #7
 80090a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	4a1f      	ldr	r2, [pc, #124]	; (800912c <prvHeapInit+0xac>)
 80090b0:	4413      	add	r3, r2
 80090b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090b8:	4a1d      	ldr	r2, [pc, #116]	; (8009130 <prvHeapInit+0xb0>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090be:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <prvHeapInit+0xb0>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	4413      	add	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090cc:	2208      	movs	r2, #8
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4a15      	ldr	r2, [pc, #84]	; (8009134 <prvHeapInit+0xb4>)
 80090e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <prvHeapInit+0xb4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ea:	4b12      	ldr	r3, [pc, #72]	; (8009134 <prvHeapInit+0xb4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <prvHeapInit+0xb4>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a0a      	ldr	r2, [pc, #40]	; (8009138 <prvHeapInit+0xb8>)
 800910e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <prvHeapInit+0xbc>)
 8009116:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009118:	4b09      	ldr	r3, [pc, #36]	; (8009140 <prvHeapInit+0xc0>)
 800911a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800911e:	601a      	str	r2, [r3, #0]
}
 8009120:	bf00      	nop
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20004368 	.word	0x20004368
 8009130:	20007f68 	.word	0x20007f68
 8009134:	20007f70 	.word	0x20007f70
 8009138:	20007f78 	.word	0x20007f78
 800913c:	20007f74 	.word	0x20007f74
 8009140:	20007f7c 	.word	0x20007f7c

08009144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800914c:	4b28      	ldr	r3, [pc, #160]	; (80091f0 <prvInsertBlockIntoFreeList+0xac>)
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	e002      	b.n	8009158 <prvInsertBlockIntoFreeList+0x14>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	429a      	cmp	r2, r3
 8009160:	d8f7      	bhi.n	8009152 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	4413      	add	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	429a      	cmp	r2, r3
 8009172:	d108      	bne.n	8009186 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	441a      	add	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d118      	bne.n	80091cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b15      	ldr	r3, [pc, #84]	; (80091f4 <prvInsertBlockIntoFreeList+0xb0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d00d      	beq.n	80091c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	441a      	add	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	e008      	b.n	80091d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c2:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <prvInsertBlockIntoFreeList+0xb0>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e003      	b.n	80091d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d002      	beq.n	80091e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e2:	bf00      	nop
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20007f68 	.word	0x20007f68
 80091f4:	20007f70 	.word	0x20007f70

080091f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009200:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <SCB_EnableICache+0x3c>)
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800920c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009210:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <SCB_EnableICache+0x3c>)
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	4a06      	ldr	r2, [pc, #24]	; (8009234 <SCB_EnableICache+0x3c>)
 800921a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009224:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8009228:	bf00      	nop
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	e000ed00 	.word	0xe000ed00

08009238 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <SCB_EnableDCache+0x7c>)
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009246:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800924a:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <SCB_EnableDCache+0x7c>)
 800924c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009250:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	0b5b      	lsrs	r3, r3, #13
 8009256:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800925a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009264:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800926e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009274:	490f      	ldr	r1, [pc, #60]	; (80092b4 <SCB_EnableDCache+0x7c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	60ba      	str	r2, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1ef      	bne.n	8009266 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	60fa      	str	r2, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e5      	bne.n	800925c <SCB_EnableDCache+0x24>
 8009290:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <SCB_EnableDCache+0x7c>)
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	4a06      	ldr	r2, [pc, #24]	; (80092b4 <SCB_EnableDCache+0x7c>)
 800929a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800929e:	6153      	str	r3, [r2, #20]
 80092a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80092a4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	e000ed00 	.word	0xe000ed00

080092b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80092b8:	b5b0      	push	{r4, r5, r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80092be:	f7ff ff9b 	bl	80091f8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80092c2:	f7ff ffb9 	bl	8009238 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80092c6:	f7f8 fa31 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80092ca:	f000 f8a3 	bl	8009414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80092ce:	f000 fc05 	bl	8009adc <MX_GPIO_Init>
  MX_DMA_Init();
 80092d2:	f000 fb8f 	bl	80099f4 <MX_DMA_Init>
  MX_DMA2D_Init();
 80092d6:	f000 f939 	bl	800954c <MX_DMA2D_Init>
  MX_FMC_Init();
 80092da:	f000 fbb1 	bl	8009a40 <MX_FMC_Init>
  MX_LTDC_Init();
 80092de:	f000 fa61 	bl	80097a4 <MX_LTDC_Init>
  MX_DSIHOST_DSI_Init();
 80092e2:	f000 f96b 	bl	80095bc <MX_DSIHOST_DSI_Init>
  MX_USART6_UART_Init();
 80092e6:	f000 fb4d 	bl	8009984 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80092ea:	f000 fb0d 	bl	8009908 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	//
	//  BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
 80092ee:	2001      	movs	r0, #1
 80092f0:	f7f7 fb7c 	bl	80009ec <BSP_LED_Init>

	//  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
	LCD_Config();
 80092f4:	f000 fc92 	bl	8009c1c <LCD_Config>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	xQueue_joy_slave = xQueueCreate(10, sizeof(Joystick));
 80092f8:	2200      	movs	r2, #0
 80092fa:	2102      	movs	r1, #2
 80092fc:	200a      	movs	r0, #10
 80092fe:	f7fe f98f 	bl	8007620 <xQueueGenericCreate>
 8009302:	4602      	mov	r2, r0
 8009304:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <main+0x118>)
 8009306:	601a      	str	r2, [r3, #0]
	xQueue_joy_master = xQueueCreate(10, sizeof(Joystick));
 8009308:	2200      	movs	r2, #0
 800930a:	2102      	movs	r1, #2
 800930c:	200a      	movs	r0, #10
 800930e:	f7fe f987 	bl	8007620 <xQueueGenericCreate>
 8009312:	4602      	mov	r2, r0
 8009314:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <main+0x11c>)
 8009316:	601a      	str	r2, [r3, #0]
	xQueue_invaders = xQueueCreate(10, sizeof(Invader));
 8009318:	2200      	movs	r2, #0
 800931a:	2106      	movs	r1, #6
 800931c:	200a      	movs	r0, #10
 800931e:	f7fe f97f 	bl	8007620 <xQueueGenericCreate>
 8009322:	4602      	mov	r2, r0
 8009324:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <main+0x120>)
 8009326:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of IdleTask */
  osThreadDef(IdleTask, StartIdleTask, osPriorityIdle, 0, 128);
 8009328:	4b2c      	ldr	r3, [pc, #176]	; (80093dc <main+0x124>)
 800932a:	1d3c      	adds	r4, r7, #4
 800932c:	461d      	mov	r5, r3
 800932e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009332:	682b      	ldr	r3, [r5, #0]
 8009334:	6023      	str	r3, [r4, #0]
  IdleTaskHandle = osThreadCreate(osThread(IdleTask), NULL);
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	2100      	movs	r1, #0
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe f817 	bl	800736e <osThreadCreate>
 8009340:	4602      	mov	r2, r0
 8009342:	4b27      	ldr	r3, [pc, #156]	; (80093e0 <main+0x128>)
 8009344:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//if (xQueue_joy_slave != NULL) {

  	xTaskCreate(get_joystick_master_SPI_sdr, "get Joystick MASTER SPI", 400, NULL, tskIDLE_PRIORITY + 3, NULL);
 8009346:	2300      	movs	r3, #0
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	2303      	movs	r3, #3
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009354:	4923      	ldr	r1, [pc, #140]	; (80093e4 <main+0x12c>)
 8009356:	4824      	ldr	r0, [pc, #144]	; (80093e8 <main+0x130>)
 8009358:	f7fe fcb0 	bl	8007cbc <xTaskCreate>
	xTaskCreate(receive_slave_joystick_UART, "get Joystick Slave UART", 400, NULL, tskIDLE_PRIORITY + 3, NULL);
 800935c:	2300      	movs	r3, #0
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	2303      	movs	r3, #3
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800936a:	4920      	ldr	r1, [pc, #128]	; (80093ec <main+0x134>)
 800936c:	4820      	ldr	r0, [pc, #128]	; (80093f0 <main+0x138>)
 800936e:	f7fe fca5 	bl	8007cbc <xTaskCreate>
	xTaskCreate(send_slave_UART, "Send to Slave", 400, NULL, tskIDLE_PRIORITY + 3, NULL);
 8009372:	2300      	movs	r3, #0
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	2303      	movs	r3, #3
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009380:	491c      	ldr	r1, [pc, #112]	; (80093f4 <main+0x13c>)
 8009382:	481d      	ldr	r0, [pc, #116]	; (80093f8 <main+0x140>)
 8009384:	f7fe fc9a 	bl	8007cbc <xTaskCreate>
	xTaskCreate(cannon_master_rcv, "Joystick_master input", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 8009388:	2300      	movs	r3, #0
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	2302      	movs	r3, #2
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2300      	movs	r3, #0
 8009392:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009396:	4919      	ldr	r1, [pc, #100]	; (80093fc <main+0x144>)
 8009398:	4819      	ldr	r0, [pc, #100]	; (8009400 <main+0x148>)
 800939a:	f7fe fc8f 	bl	8007cbc <xTaskCreate>
	xTaskCreate(cannon_slave_rcv, "Joystick Slave input", 400, NULL, tskIDLE_PRIORITY + 2, NULL);
 800939e:	2300      	movs	r3, #0
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2302      	movs	r3, #2
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80093ac:	4915      	ldr	r1, [pc, #84]	; (8009404 <main+0x14c>)
 80093ae:	4816      	ldr	r0, [pc, #88]	; (8009408 <main+0x150>)
 80093b0:	f7fe fc84 	bl	8007cbc <xTaskCreate>
	xTaskCreate(invaders_sdr,"Invaders", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
 80093b4:	2300      	movs	r3, #0
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	2301      	movs	r3, #1
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093c2:	4912      	ldr	r1, [pc, #72]	; (800940c <main+0x154>)
 80093c4:	4812      	ldr	r0, [pc, #72]	; (8009410 <main+0x158>)
 80093c6:	f7fe fc79 	bl	8007cbc <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80093ca:	f7fd ffc9 	bl	8007360 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//}

	while (1)
 80093ce:	e7fe      	b.n	80093ce <main+0x116>
 80093d0:	200084e4 	.word	0x200084e4
 80093d4:	20008550 	.word	0x20008550
 80093d8:	20008548 	.word	0x20008548
 80093dc:	0800b5c0 	.word	0x0800b5c0
 80093e0:	20008418 	.word	0x20008418
 80093e4:	0800b538 	.word	0x0800b538
 80093e8:	08009c61 	.word	0x08009c61
 80093ec:	0800b550 	.word	0x0800b550
 80093f0:	0800abad 	.word	0x0800abad
 80093f4:	0800b568 	.word	0x0800b568
 80093f8:	0800aae9 	.word	0x0800aae9
 80093fc:	0800b578 	.word	0x0800b578
 8009400:	08009d25 	.word	0x08009d25
 8009404:	0800b590 	.word	0x0800b590
 8009408:	0800a0a9 	.word	0x0800a0a9
 800940c:	0800b5a8 	.word	0x0800b5a8
 8009410:	0800a3b9 	.word	0x0800a3b9

08009414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0b8      	sub	sp, #224	; 0xe0
 8009418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800941a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800941e:	2234      	movs	r2, #52	; 0x34
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f002 f86f 	bl	800b506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009428:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	2290      	movs	r2, #144	; 0x90
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f002 f860 	bl	800b506 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009446:	4b3f      	ldr	r3, [pc, #252]	; (8009544 <SystemClock_Config+0x130>)
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	4a3e      	ldr	r2, [pc, #248]	; (8009544 <SystemClock_Config+0x130>)
 800944c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009450:	6413      	str	r3, [r2, #64]	; 0x40
 8009452:	4b3c      	ldr	r3, [pc, #240]	; (8009544 <SystemClock_Config+0x130>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945a:	607b      	str	r3, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800945e:	4b3a      	ldr	r3, [pc, #232]	; (8009548 <SystemClock_Config+0x134>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a39      	ldr	r2, [pc, #228]	; (8009548 <SystemClock_Config+0x134>)
 8009464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	4b37      	ldr	r3, [pc, #220]	; (8009548 <SystemClock_Config+0x134>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009476:	2301      	movs	r3, #1
 8009478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800947c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009484:	2302      	movs	r3, #2
 8009486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800948a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800948e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009492:	2319      	movs	r3, #25
 8009494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8009498:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800949c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094a0:	2302      	movs	r3, #2
 80094a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80094a6:	2302      	movs	r3, #2
 80094a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fa ff91 	bl	80043d8 <HAL_RCC_OscConfig>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80094bc:	f001 fc64 	bl	800ad88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80094c0:	f7fa ff3a 	bl	8004338 <HAL_PWREx_EnableOverDrive>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80094ca:	f001 fc5d 	bl	800ad88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094ce:	230f      	movs	r3, #15
 80094d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094d4:	2302      	movs	r3, #2
 80094d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094da:	2300      	movs	r3, #0
 80094dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80094e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80094e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80094e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80094f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80094f4:	2106      	movs	r1, #6
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fb f9e0 	bl	80048bc <HAL_RCC_ClockConfig>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009502:	f001 fc41 	bl	800ad88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART6;
 8009506:	f640 0308 	movw	r3, #2056	; 0x808
 800950a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800950c:	23c0      	movs	r3, #192	; 0xc0
 800950e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8009510:	2302      	movs	r3, #2
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009514:	2302      	movs	r3, #2
 8009516:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8009518:	2300      	movs	r3, #0
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800951c:	2301      	movs	r3, #1
 800951e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009520:	2300      	movs	r3, #0
 8009522:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009524:	2300      	movs	r3, #0
 8009526:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	4618      	mov	r0, r3
 800952e:	f7fb fbc5 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8009538:	f001 fc26 	bl	800ad88 <Error_Handler>
  }
}
 800953c:	bf00      	nop
 800953e:	37e0      	adds	r7, #224	; 0xe0
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40023800 	.word	0x40023800
 8009548:	40007000 	.word	0x40007000

0800954c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009550:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009552:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <MX_DMA2D_Init+0x6c>)
 8009554:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8009556:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009558:	2200      	movs	r2, #0
 800955a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800955c:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <MX_DMA2D_Init+0x68>)
 800955e:	2200      	movs	r2, #0
 8009560:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009562:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009564:	2200      	movs	r2, #0
 8009566:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <MX_DMA2D_Init+0x68>)
 800956a:	2200      	movs	r2, #0
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009570:	2200      	movs	r2, #0
 8009572:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009576:	2200      	movs	r2, #0
 8009578:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <MX_DMA2D_Init+0x68>)
 800957c:	2200      	movs	r2, #0
 800957e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8009580:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009582:	2200      	movs	r2, #0
 8009584:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8009586:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <MX_DMA2D_Init+0x68>)
 8009588:	2200      	movs	r2, #0
 800958a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800958c:	4809      	ldr	r0, [pc, #36]	; (80095b4 <MX_DMA2D_Init+0x68>)
 800958e:	f7f8 fdf5 	bl	800217c <HAL_DMA2D_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009598:	f001 fbf6 	bl	800ad88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800959c:	2101      	movs	r1, #1
 800959e:	4805      	ldr	r0, [pc, #20]	; (80095b4 <MX_DMA2D_Init+0x68>)
 80095a0:	f7f8 ff5a 	bl	8002458 <HAL_DMA2D_ConfigLayer>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80095aa:	f001 fbed 	bl	800ad88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80095ae:	bf00      	nop
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20008638 	.word	0x20008638
 80095b8:	4002b000 	.word	0x4002b000

080095bc <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b0aa      	sub	sp, #168	; 0xa8
 80095c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80095c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	605a      	str	r2, [r3, #4]
 80095cc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80095ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80095d2:	2224      	movs	r2, #36	; 0x24
 80095d4:	2100      	movs	r1, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 ff95 	bl	800b506 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80095dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	611a      	str	r2, [r3, #16]
 80095ec:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80095ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095f2:	2234      	movs	r2, #52	; 0x34
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 ff85 	bl	800b506 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80095fc:	463b      	mov	r3, r7
 80095fe:	222c      	movs	r2, #44	; 0x2c
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 ff7f 	bl	800b506 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8009608:	4b64      	ldr	r3, [pc, #400]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 800960a:	4a65      	ldr	r2, [pc, #404]	; (80097a0 <MX_DSIHOST_DSI_Init+0x1e4>)
 800960c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800960e:	4b63      	ldr	r3, [pc, #396]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009610:	2200      	movs	r2, #0
 8009612:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8009614:	4b61      	ldr	r3, [pc, #388]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009616:	2204      	movs	r2, #4
 8009618:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800961a:	4b60      	ldr	r3, [pc, #384]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 800961c:	2200      	movs	r2, #0
 800961e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8009620:	2314      	movs	r3, #20
 8009622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8009626:	2301      	movs	r3, #1
 8009628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800962c:	2300      	movs	r3, #0
 800962e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8009632:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009636:	4619      	mov	r1, r3
 8009638:	4858      	ldr	r0, [pc, #352]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 800963a:	f7f9 f88f 	bl	800275c <HAL_DSI_Init>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8009644:	f001 fba0 	bl	800ad88 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8009648:	2301      	movs	r3, #1
 800964a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8009668:	2300      	movs	r3, #0
 800966a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800967a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800967e:	4619      	mov	r1, r3
 8009680:	4846      	ldr	r0, [pc, #280]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009682:	f7f9 fea7 	bl	80033d4 <HAL_DSI_ConfigHostTimeouts>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800968c:	f001 fb7c 	bl	800ad88 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8009690:	231c      	movs	r3, #28
 8009692:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8009694:	2321      	movs	r3, #33	; 0x21
 8009696:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8009698:	230f      	movs	r3, #15
 800969a:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800969c:	2319      	movs	r3, #25
 800969e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80096a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80096ac:	4619      	mov	r1, r3
 80096ae:	483b      	ldr	r0, [pc, #236]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 80096b0:	f7f9 fe26 	bl	8003300 <HAL_DSI_ConfigPhyTimer>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80096ba:	f001 fb65 	bl	800ad88 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80096be:	2104      	movs	r1, #4
 80096c0:	4836      	ldr	r0, [pc, #216]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 80096c2:	f7f9 fdf5 	bl	80032b0 <HAL_DSI_ConfigFlowControl>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80096cc:	f001 fb5c 	bl	800ad88 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80096d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80096d4:	4831      	ldr	r0, [pc, #196]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 80096d6:	f7fa f83b 	bl	8003750 <HAL_DSI_SetLowPowerRXFilter>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80096e0:	f001 fb52 	bl	800ad88 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80096e4:	2100      	movs	r1, #0
 80096e6:	482d      	ldr	r0, [pc, #180]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 80096e8:	f7f9 f9c6 	bl	8002a78 <HAL_DSI_ConfigErrorMonitor>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80096f2:	f001 fb49 	bl	800ad88 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80096fe:	2300      	movs	r3, #0
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8009702:	2300      	movs	r3, #0
 8009704:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8009706:	2300      	movs	r3, #0
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800970a:	2300      	movs	r3, #0
 800970c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800970e:	2300      	movs	r3, #0
 8009710:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8009712:	2300      	movs	r3, #0
 8009714:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8009716:	2300      	movs	r3, #0
 8009718:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800971a:	2300      	movs	r3, #0
 800971c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800971e:	2300      	movs	r3, #0
 8009720:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8009722:	2300      	movs	r3, #0
 8009724:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8009726:	2300      	movs	r3, #0
 8009728:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800972a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800972e:	4619      	mov	r1, r3
 8009730:	481a      	ldr	r0, [pc, #104]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009732:	f7f9 fd5f 	bl	80031f4 <HAL_DSI_ConfigCommand>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800973c:	f001 fb24 	bl	800ad88 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8009744:	2305      	movs	r3, #5
 8009746:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8009748:	f44f 7320 	mov.w	r3, #640	; 0x280
 800974c:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800974e:	2310      	movs	r3, #16
 8009750:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8009756:	2304      	movs	r3, #4
 8009758:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800975a:	2302      	movs	r3, #2
 800975c:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800975e:	2300      	movs	r3, #0
 8009760:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8009762:	2300      	movs	r3, #0
 8009764:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800976a:	2300      	movs	r3, #0
 800976c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800976e:	463b      	mov	r3, r7
 8009770:	4619      	mov	r1, r3
 8009772:	480a      	ldr	r0, [pc, #40]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009774:	f7f9 fc64 	bl	8003040 <HAL_DSI_ConfigAdaptedCommandMode>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800977e:	f001 fb03 	bl	800ad88 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8009782:	2100      	movs	r1, #0
 8009784:	4805      	ldr	r0, [pc, #20]	; (800979c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009786:	f7f9 fa33 	bl	8002bf0 <HAL_DSI_SetGenericVCID>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8009790:	f001 fafa 	bl	800ad88 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8009794:	bf00      	nop
 8009796:	37a8      	adds	r7, #168	; 0xa8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20008420 	.word	0x20008420
 80097a0:	40016c00 	.word	0x40016c00

080097a4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b09a      	sub	sp, #104	; 0x68
 80097a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80097aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097ae:	2234      	movs	r2, #52	; 0x34
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fea7 	bl	800b506 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80097b8:	463b      	mov	r3, r7
 80097ba:	2234      	movs	r2, #52	; 0x34
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f001 fea1 	bl	800b506 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80097c4:	4b4e      	ldr	r3, [pc, #312]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097c6:	4a4f      	ldr	r2, [pc, #316]	; (8009904 <MX_LTDC_Init+0x160>)
 80097c8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80097ca:	4b4d      	ldr	r3, [pc, #308]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80097d0:	4b4b      	ldr	r3, [pc, #300]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80097d6:	4b4a      	ldr	r3, [pc, #296]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097d8:	2200      	movs	r2, #0
 80097da:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80097dc:	4b48      	ldr	r3, [pc, #288]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097de:	2200      	movs	r2, #0
 80097e0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80097e2:	4b47      	ldr	r3, [pc, #284]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097e4:	2207      	movs	r2, #7
 80097e6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80097e8:	4b45      	ldr	r3, [pc, #276]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097ea:	2203      	movs	r2, #3
 80097ec:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80097ee:	4b44      	ldr	r3, [pc, #272]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097f0:	220e      	movs	r2, #14
 80097f2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80097f4:	4b42      	ldr	r3, [pc, #264]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097f6:	2205      	movs	r2, #5
 80097f8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80097fa:	4b41      	ldr	r3, [pc, #260]	; (8009900 <MX_LTDC_Init+0x15c>)
 80097fc:	f240 228e 	movw	r2, #654	; 0x28e
 8009800:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8009802:	4b3f      	ldr	r3, [pc, #252]	; (8009900 <MX_LTDC_Init+0x15c>)
 8009804:	f240 12e5 	movw	r2, #485	; 0x1e5
 8009808:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800980a:	4b3d      	ldr	r3, [pc, #244]	; (8009900 <MX_LTDC_Init+0x15c>)
 800980c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8009810:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8009812:	4b3b      	ldr	r3, [pc, #236]	; (8009900 <MX_LTDC_Init+0x15c>)
 8009814:	f240 12e7 	movw	r2, #487	; 0x1e7
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800981a:	4b39      	ldr	r3, [pc, #228]	; (8009900 <MX_LTDC_Init+0x15c>)
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009822:	4b37      	ldr	r3, [pc, #220]	; (8009900 <MX_LTDC_Init+0x15c>)
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800982a:	4b35      	ldr	r3, [pc, #212]	; (8009900 <MX_LTDC_Init+0x15c>)
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009832:	4833      	ldr	r0, [pc, #204]	; (8009900 <MX_LTDC_Init+0x15c>)
 8009834:	f7fa fa88 	bl	8003d48 <HAL_LTDC_Init>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800983e:	f001 faa3 	bl	800ad88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009852:	2300      	movs	r3, #0
 8009854:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800985e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009862:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009864:	2305      	movs	r3, #5
 8009866:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800988a:	2200      	movs	r2, #0
 800988c:	4619      	mov	r1, r3
 800988e:	481c      	ldr	r0, [pc, #112]	; (8009900 <MX_LTDC_Init+0x15c>)
 8009890:	f7fa fb2a 	bl	8003ee8 <HAL_LTDC_ConfigLayer>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800989a:	f001 fa75 	bl	800ad88 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80098c0:	2305      	movs	r3, #5
 80098c2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80098e2:	463b      	mov	r3, r7
 80098e4:	2201      	movs	r2, #1
 80098e6:	4619      	mov	r1, r3
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <MX_LTDC_Init+0x15c>)
 80098ea:	f7fa fafd 	bl	8003ee8 <HAL_LTDC_ConfigLayer>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80098f4:	f001 fa48 	bl	800ad88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80098f8:	bf00      	nop
 80098fa:	3768      	adds	r7, #104	; 0x68
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	2000843c 	.word	0x2000843c
 8009904:	40016800 	.word	0x40016800

08009908 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <MX_SPI2_Init+0x74>)
 800990e:	4a1c      	ldr	r2, [pc, #112]	; (8009980 <MX_SPI2_Init+0x78>)
 8009910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009912:	4b1a      	ldr	r3, [pc, #104]	; (800997c <MX_SPI2_Init+0x74>)
 8009914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800991a:	4b18      	ldr	r3, [pc, #96]	; (800997c <MX_SPI2_Init+0x74>)
 800991c:	2200      	movs	r2, #0
 800991e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009920:	4b16      	ldr	r3, [pc, #88]	; (800997c <MX_SPI2_Init+0x74>)
 8009922:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009928:	4b14      	ldr	r3, [pc, #80]	; (800997c <MX_SPI2_Init+0x74>)
 800992a:	2200      	movs	r2, #0
 800992c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <MX_SPI2_Init+0x74>)
 8009930:	2200      	movs	r2, #0
 8009932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <MX_SPI2_Init+0x74>)
 8009936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800993a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800993c:	4b0f      	ldr	r3, [pc, #60]	; (800997c <MX_SPI2_Init+0x74>)
 800993e:	2238      	movs	r2, #56	; 0x38
 8009940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009942:	4b0e      	ldr	r3, [pc, #56]	; (800997c <MX_SPI2_Init+0x74>)
 8009944:	2200      	movs	r2, #0
 8009946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009948:	4b0c      	ldr	r3, [pc, #48]	; (800997c <MX_SPI2_Init+0x74>)
 800994a:	2200      	movs	r2, #0
 800994c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <MX_SPI2_Init+0x74>)
 8009950:	2200      	movs	r2, #0
 8009952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009954:	4b09      	ldr	r3, [pc, #36]	; (800997c <MX_SPI2_Init+0x74>)
 8009956:	2207      	movs	r2, #7
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800995a:	4b08      	ldr	r3, [pc, #32]	; (800997c <MX_SPI2_Init+0x74>)
 800995c:	2200      	movs	r2, #0
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <MX_SPI2_Init+0x74>)
 8009962:	2208      	movs	r2, #8
 8009964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009966:	4805      	ldr	r0, [pc, #20]	; (800997c <MX_SPI2_Init+0x74>)
 8009968:	f7fb fe4d 	bl	8005606 <HAL_SPI_Init>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009972:	f001 fa09 	bl	800ad88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009976:	bf00      	nop
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200082ec 	.word	0x200082ec
 8009980:	40003800 	.word	0x40003800

08009984 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009988:	4b18      	ldr	r3, [pc, #96]	; (80099ec <MX_USART6_UART_Init+0x68>)
 800998a:	4a19      	ldr	r2, [pc, #100]	; (80099f0 <MX_USART6_UART_Init+0x6c>)
 800998c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800998e:	4b17      	ldr	r3, [pc, #92]	; (80099ec <MX_USART6_UART_Init+0x68>)
 8009990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009994:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009996:	4b15      	ldr	r3, [pc, #84]	; (80099ec <MX_USART6_UART_Init+0x68>)
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800999c:	4b13      	ldr	r3, [pc, #76]	; (80099ec <MX_USART6_UART_Init+0x68>)
 800999e:	2200      	movs	r2, #0
 80099a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80099a8:	4b10      	ldr	r3, [pc, #64]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099aa:	220c      	movs	r2, #12
 80099ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80099b4:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099ba:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099bc:	2200      	movs	r2, #0
 80099be:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099c2:	2230      	movs	r2, #48	; 0x30
 80099c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80099ce:	4b07      	ldr	r3, [pc, #28]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80099d4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80099d6:	4805      	ldr	r0, [pc, #20]	; (80099ec <MX_USART6_UART_Init+0x68>)
 80099d8:	f7fc fc3c 	bl	8006254 <HAL_UART_Init>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <MX_USART6_UART_Init+0x62>
  {
    Error_Handler();
 80099e2:	f001 f9d1 	bl	800ad88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	200085b8 	.word	0x200085b8
 80099f0:	40011400 	.word	0x40011400

080099f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <MX_DMA_Init+0x48>)
 80099fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fe:	4a0f      	ldr	r2, [pc, #60]	; (8009a3c <MX_DMA_Init+0x48>)
 8009a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a04:	6313      	str	r3, [r2, #48]	; 0x30
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <MX_DMA_Init+0x48>)
 8009a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a0e:	607b      	str	r3, [r7, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8009a12:	2200      	movs	r2, #0
 8009a14:	2105      	movs	r1, #5
 8009a16:	2039      	movs	r0, #57	; 0x39
 8009a18:	f7f7 ff90 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009a1c:	2039      	movs	r0, #57	; 0x39
 8009a1e:	f7f7 ffa9 	bl	8001974 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8009a22:	2200      	movs	r2, #0
 8009a24:	2105      	movs	r1, #5
 8009a26:	2045      	movs	r0, #69	; 0x45
 8009a28:	f7f7 ff88 	bl	800193c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8009a2c:	2045      	movs	r0, #69	; 0x45
 8009a2e:	f7f7 ffa1 	bl	8001974 <HAL_NVIC_EnableIRQ>

}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	40023800 	.word	0x40023800

08009a40 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8009a46:	1d3b      	adds	r3, r7, #4
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	609a      	str	r2, [r3, #8]
 8009a50:	60da      	str	r2, [r3, #12]
 8009a52:	611a      	str	r2, [r3, #16]
 8009a54:	615a      	str	r2, [r3, #20]
 8009a56:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009a58:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a5a:	4a1f      	ldr	r2, [pc, #124]	; (8009ad8 <MX_FMC_Init+0x98>)
 8009a5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8009a5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009a64:	4b1b      	ldr	r3, [pc, #108]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009a6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009a70:	4b18      	ldr	r3, [pc, #96]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a72:	2220      	movs	r2, #32
 8009a74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a78:	2240      	movs	r2, #64	; 0x40
 8009a7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8009a7c:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a7e:	2280      	movs	r2, #128	; 0x80
 8009a80:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009a82:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8009a8e:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8009a9a:	2310      	movs	r3, #16
 8009a9c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8009aa6:	2310      	movs	r3, #16
 8009aa8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8009aaa:	2310      	movs	r3, #16
 8009aac:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8009aae:	2310      	movs	r3, #16
 8009ab0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8009ab2:	2310      	movs	r3, #16
 8009ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009ab6:	1d3b      	adds	r3, r7, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4806      	ldr	r0, [pc, #24]	; (8009ad4 <MX_FMC_Init+0x94>)
 8009abc:	f7fb fd24 	bl	8005508 <HAL_SDRAM_Init>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8009ac6:	f001 f95f 	bl	800ad88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009aca:	bf00      	nop
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200086f4 	.word	0x200086f4
 8009ad8:	a0000140 	.word	0xa0000140

08009adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	; 0x40
 8009ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	605a      	str	r2, [r3, #4]
 8009aec:	609a      	str	r2, [r3, #8]
 8009aee:	60da      	str	r2, [r3, #12]
 8009af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009af2:	4b48      	ldr	r3, [pc, #288]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	4a47      	ldr	r2, [pc, #284]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009af8:	f043 0310 	orr.w	r3, r3, #16
 8009afc:	6313      	str	r3, [r2, #48]	; 0x30
 8009afe:	4b45      	ldr	r3, [pc, #276]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f003 0310 	and.w	r3, r3, #16
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b0a:	4b42      	ldr	r3, [pc, #264]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	4a41      	ldr	r2, [pc, #260]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	6313      	str	r3, [r2, #48]	; 0x30
 8009b16:	4b3f      	ldr	r3, [pc, #252]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b22:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	4a3b      	ldr	r2, [pc, #236]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b2e:	4b39      	ldr	r3, [pc, #228]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b36:	623b      	str	r3, [r7, #32]
 8009b38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b3a:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	4a35      	ldr	r2, [pc, #212]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b40:	f043 0308 	orr.w	r3, r3, #8
 8009b44:	6313      	str	r3, [r2, #48]	; 0x30
 8009b46:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b52:	4b30      	ldr	r3, [pc, #192]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	4a2f      	ldr	r2, [pc, #188]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b58:	f043 0301 	orr.w	r3, r3, #1
 8009b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b5e:	4b2d      	ldr	r3, [pc, #180]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009b6a:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	4a29      	ldr	r2, [pc, #164]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b74:	6313      	str	r3, [r2, #48]	; 0x30
 8009b76:	4b27      	ldr	r3, [pc, #156]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b82:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b86:	4a23      	ldr	r2, [pc, #140]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b88:	f043 0320 	orr.w	r3, r3, #32
 8009b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b8e:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	613b      	str	r3, [r7, #16]
 8009b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009b9a:	4b1e      	ldr	r3, [pc, #120]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	4a1d      	ldr	r2, [pc, #116]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ba6:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bb2:	4b18      	ldr	r3, [pc, #96]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bb8:	f043 0304 	orr.w	r3, r3, #4
 8009bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009bbe:	4b15      	ldr	r3, [pc, #84]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	60bb      	str	r3, [r7, #8]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009bca:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	4a11      	ldr	r2, [pc, #68]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <MX_GPIO_Init+0x138>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bde:	607b      	str	r3, [r7, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JST_EN_GPIO_Port, JST_EN_Pin, GPIO_PIN_SET);
 8009be2:	2201      	movs	r2, #1
 8009be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009be8:	480b      	ldr	r0, [pc, #44]	; (8009c18 <MX_GPIO_Init+0x13c>)
 8009bea:	f7fa f893 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JST_EN_Pin */
  GPIO_InitStruct.Pin = JST_EN_Pin;
 8009bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(JST_EN_GPIO_Port, &GPIO_InitStruct);
 8009c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c04:	4619      	mov	r1, r3
 8009c06:	4804      	ldr	r0, [pc, #16]	; (8009c18 <MX_GPIO_Init+0x13c>)
 8009c08:	f7f9 fdd0 	bl	80037ac <HAL_GPIO_Init>

}
 8009c0c:	bf00      	nop
 8009c0e:	3740      	adds	r7, #64	; 0x40
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40023800 	.word	0x40023800
 8009c18:	40020000 	.word	0x40020000

08009c1c <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
	uint32_t  lcd_status = LCD_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]

	/* Initialize the LCD */
	lcd_status = BSP_LCD_Init();
 8009c26:	f7f6 ff36 	bl	8000a96 <BSP_LCD_Init>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1fc      	bne.n	8009c2e <LCD_Config+0x12>

	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8009c34:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009c38:	2000      	movs	r0, #0
 8009c3a:	f7f7 f8c9 	bl	8000dd0 <BSP_LCD_LayerDefaultInit>

	/* Clear the LCD */
	//	BSP_LCD_Clear(LCD_COLOR_WHITE);
	//	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8009c3e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009c42:	f7f7 f971 	bl	8000f28 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8009c46:	4805      	ldr	r0, [pc, #20]	; (8009c5c <LCD_Config+0x40>)
 8009c48:	f7f7 f922 	bl	8000e90 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8009c4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009c50:	f7f7 f936 	bl	8000ec0 <BSP_LCD_SetBackColor>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	ffd3d3d3 	.word	0xffd3d3d3

08009c60 <get_joystick_master_SPI_sdr>:


void get_joystick_master_SPI_sdr(void *parameters) { /* Receber X de Joystick de ARM Master*/
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08e      	sub	sp, #56	; 0x38
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	6078      	str	r0, [r7, #4]
	Joystick joystick_x;
	joystick_x.id = X_AXIS;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Joystick joystick_a;
	joystick_a.id = A_BUTTON;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t spiTxBuff[5] = {0b10000011, 0, 0, 0, 0};
 8009c74:	2383      	movs	r3, #131	; 0x83
 8009c76:	763b      	strb	r3, [r7, #24]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	767b      	strb	r3, [r7, #25]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	76bb      	strb	r3, [r7, #26]
 8009c80:	2300      	movs	r3, #0
 8009c82:	76fb      	strb	r3, [r7, #27]
 8009c84:	2300      	movs	r3, #0
 8009c86:	773b      	strb	r3, [r7, #28]
	uint8_t spiRxBuff[5];

	portTickType xNextWakeTime;
	const portTickType xTicksToWait = 0 / portTICK_RATE_MS;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 8009c8c:	2314      	movs	r3, #20
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28
	xNextWakeTime = xTaskGetTickCount ();
 8009c90:	f7fe faec 	bl	800826c <xTaskGetTickCount>
 8009c94:	4603      	mov	r3, r0
 8009c96:	60fb      	str	r3, [r7, #12]

	for (;;){
		HAL_GPIO_WritePin(JST_EN_GPIO_Port, JST_EN_Pin, GPIO_PIN_RESET);
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c9e:	481d      	ldr	r0, [pc, #116]	; (8009d14 <get_joystick_master_SPI_sdr+0xb4>)
 8009ca0:	f7fa f838 	bl	8003d14 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, spiTxBuff, spiRxBuff, 5, 100);
 8009ca4:	f107 0210 	add.w	r2, r7, #16
 8009ca8:	f107 0118 	add.w	r1, r7, #24
 8009cac:	2364      	movs	r3, #100	; 0x64
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2305      	movs	r3, #5
 8009cb2:	4819      	ldr	r0, [pc, #100]	; (8009d18 <get_joystick_master_SPI_sdr+0xb8>)
 8009cb4:	f7fb fd39 	bl	800572a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(JST_EN_GPIO_Port, JST_EN_Pin, GPIO_PIN_SET);
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009cbe:	4815      	ldr	r0, [pc, #84]	; (8009d14 <get_joystick_master_SPI_sdr+0xb4>)
 8009cc0:	f7fa f828 	bl	8003d14 <HAL_GPIO_WritePin>

		joystick_x.val = ((spiRxBuff[1] << 8 ) + spiRxBuff[0]) /10;
 8009cc4:	7c7b      	ldrb	r3, [r7, #17]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	7c3a      	ldrb	r2, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <get_joystick_master_SPI_sdr+0xbc>)
 8009cce:	fb82 1203 	smull	r1, r2, r2, r3
 8009cd2:	1092      	asrs	r2, r2, #2
 8009cd4:	17db      	asrs	r3, r3, #31
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		joystick_a.val = spiRxBuff[4];
 8009cde:	7d3b      	ldrb	r3, [r7, #20]
 8009ce0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		xQueueSendToBack(xQueue_joy_master, &joystick_x , xTicksToWait);
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <get_joystick_master_SPI_sdr+0xc0>)
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009cec:	2300      	movs	r3, #0
 8009cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf0:	f7fd fcf0 	bl	80076d4 <xQueueGenericSend>
		xQueueSendToBack(xQueue_joy_master, &joystick_a , xTicksToWait);
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <get_joystick_master_SPI_sdr+0xc0>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	f107 0120 	add.w	r1, r7, #32
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d00:	f7fd fce8 	bl	80076d4 <xQueueGenericSend>

		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 8009d04:	f107 030c 	add.w	r3, r7, #12
 8009d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe f902 	bl	8007f14 <vTaskDelayUntil>
		HAL_GPIO_WritePin(JST_EN_GPIO_Port, JST_EN_Pin, GPIO_PIN_RESET);
 8009d10:	e7c2      	b.n	8009c98 <get_joystick_master_SPI_sdr+0x38>
 8009d12:	bf00      	nop
 8009d14:	40020000 	.word	0x40020000
 8009d18:	200082ec 	.word	0x200082ec
 8009d1c:	66666667 	.word	0x66666667
 8009d20:	20008550 	.word	0x20008550

08009d24 <cannon_master_rcv>:
}




void cannon_master_rcv(void * parameters)  {
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b089      	sub	sp, #36	; 0x24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	Joystick joy_master;

	bool btn_joy_flag = false;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	77fb      	strb	r3, [r7, #31]
	bool laser_lcd_flag = false;
 8009d30:	2300      	movs	r3, #0
 8009d32:	77bb      	strb	r3, [r7, #30]

	for (;;){
		portBASE_TYPE xStatus=xQueueReceive(xQueue_joy_master, &joy_master, portMAX_DELAY);
 8009d34:	4b81      	ldr	r3, [pc, #516]	; (8009f3c <cannon_master_rcv+0x218>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f107 010c 	add.w	r1, r7, #12
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fd fdc9 	bl	80078d8 <xQueueReceive>
 8009d46:	6138      	str	r0, [r7, #16]
		if(xStatus==pdTRUE) {
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	f040 81a1 	bne.w	800a092 <cannon_master_rcv+0x36e>
			if (flag_endgame == true) {
 8009d50:	4b7b      	ldr	r3, [pc, #492]	; (8009f40 <cannon_master_rcv+0x21c>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0ed      	beq.n	8009d34 <cannon_master_rcv+0x10>
				if (joy_master.id == X_AXIS && joy_master.val < 30) {
 8009d58:	7b3b      	ldrb	r3, [r7, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d143      	bne.n	8009de6 <cannon_master_rcv+0xc2>
 8009d5e:	7b7b      	ldrb	r3, [r7, #13]
 8009d60:	2b1d      	cmp	r3, #29
 8009d62:	d840      	bhi.n	8009de6 <cannon_master_rcv+0xc2>
					if (x_master < 200) {
 8009d64:	4b77      	ldr	r3, [pc, #476]	; (8009f44 <cannon_master_rcv+0x220>)
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	2bc7      	cmp	r3, #199	; 0xc7
 8009d6a:	d81c      	bhi.n	8009da6 <cannon_master_rcv+0x82>
						x_master = 200;
 8009d6c:	4b75      	ldr	r3, [pc, #468]	; (8009f44 <cannon_master_rcv+0x220>)
 8009d6e:	22c8      	movs	r2, #200	; 0xc8
 8009d70:	801a      	strh	r2, [r3, #0]
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009d72:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009d76:	f7f7 f88b 	bl	8000e90 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(x_master-4,y_master-1,40,20);
 8009d7a:	4b72      	ldr	r3, [pc, #456]	; (8009f44 <cannon_master_rcv+0x220>)
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	3b04      	subs	r3, #4
 8009d80:	b298      	uxth	r0, r3
 8009d82:	4b71      	ldr	r3, [pc, #452]	; (8009f48 <cannon_master_rcv+0x224>)
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b299      	uxth	r1, r3
 8009d8a:	2314      	movs	r3, #20
 8009d8c:	2228      	movs	r2, #40	; 0x28
 8009d8e:	f7f7 f9a3 	bl	80010d8 <BSP_LCD_FillRect>

						BSP_LCD_DrawBitmap(x_master,y_master,cannon_master);
 8009d92:	4b6c      	ldr	r3, [pc, #432]	; (8009f44 <cannon_master_rcv+0x220>)
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	4b6b      	ldr	r3, [pc, #428]	; (8009f48 <cannon_master_rcv+0x224>)
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	4a6b      	ldr	r2, [pc, #428]	; (8009f4c <cannon_master_rcv+0x228>)
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f7f7 f8ea 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_master < 200) {
 8009da4:	e082      	b.n	8009eac <cannon_master_rcv+0x188>

					}
					else {
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009da6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009daa:	f7f7 f871 	bl	8000e90 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(x_master-4,y_master-1,40,20);
 8009dae:	4b65      	ldr	r3, [pc, #404]	; (8009f44 <cannon_master_rcv+0x220>)
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	3b04      	subs	r3, #4
 8009db4:	b298      	uxth	r0, r3
 8009db6:	4b64      	ldr	r3, [pc, #400]	; (8009f48 <cannon_master_rcv+0x224>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b299      	uxth	r1, r3
 8009dbe:	2314      	movs	r3, #20
 8009dc0:	2228      	movs	r2, #40	; 0x28
 8009dc2:	f7f7 f989 	bl	80010d8 <BSP_LCD_FillRect>
						x_master = x_master - 2;
 8009dc6:	4b5f      	ldr	r3, [pc, #380]	; (8009f44 <cannon_master_rcv+0x220>)
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	3b02      	subs	r3, #2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	4b5d      	ldr	r3, [pc, #372]	; (8009f44 <cannon_master_rcv+0x220>)
 8009dd0:	801a      	strh	r2, [r3, #0]

						BSP_LCD_DrawBitmap(x_master,y_master,cannon_master);
 8009dd2:	4b5c      	ldr	r3, [pc, #368]	; (8009f44 <cannon_master_rcv+0x220>)
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	4b5b      	ldr	r3, [pc, #364]	; (8009f48 <cannon_master_rcv+0x224>)
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	4a5b      	ldr	r2, [pc, #364]	; (8009f4c <cannon_master_rcv+0x228>)
 8009dde:	4619      	mov	r1, r3
 8009de0:	f7f7 f8ca 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_master < 200) {
 8009de4:	e062      	b.n	8009eac <cannon_master_rcv+0x188>
					}
				}else if (joy_master.id == X_AXIS && joy_master.val > 70) {
 8009de6:	7b3b      	ldrb	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d146      	bne.n	8009e7a <cannon_master_rcv+0x156>
 8009dec:	7b7b      	ldrb	r3, [r7, #13]
 8009dee:	2b46      	cmp	r3, #70	; 0x46
 8009df0:	d943      	bls.n	8009e7a <cannon_master_rcv+0x156>
					if (x_master > 750) {
 8009df2:	4b54      	ldr	r3, [pc, #336]	; (8009f44 <cannon_master_rcv+0x220>)
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d91d      	bls.n	8009e3a <cannon_master_rcv+0x116>
						x_master = 750;
 8009dfe:	4b51      	ldr	r3, [pc, #324]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009e04:	801a      	strh	r2, [r3, #0]
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e06:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e0a:	f7f7 f841 	bl	8000e90 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(x_master-4,y_master-1,40,20);
 8009e0e:	4b4d      	ldr	r3, [pc, #308]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	3b04      	subs	r3, #4
 8009e14:	b298      	uxth	r0, r3
 8009e16:	4b4c      	ldr	r3, [pc, #304]	; (8009f48 <cannon_master_rcv+0x224>)
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b299      	uxth	r1, r3
 8009e1e:	2314      	movs	r3, #20
 8009e20:	2228      	movs	r2, #40	; 0x28
 8009e22:	f7f7 f959 	bl	80010d8 <BSP_LCD_FillRect>

						BSP_LCD_DrawBitmap(x_master,y_master,cannon_master);
 8009e26:	4b47      	ldr	r3, [pc, #284]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	4b46      	ldr	r3, [pc, #280]	; (8009f48 <cannon_master_rcv+0x224>)
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	4a46      	ldr	r2, [pc, #280]	; (8009f4c <cannon_master_rcv+0x228>)
 8009e32:	4619      	mov	r1, r3
 8009e34:	f7f7 f8a0 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_master > 750) {
 8009e38:	e038      	b.n	8009eac <cannon_master_rcv+0x188>
					} else {
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e3e:	f7f7 f827 	bl	8000e90 <BSP_LCD_SetTextColor>
											BSP_LCD_FillRect(x_master-4,y_master-1,40,20);
 8009e42:	4b40      	ldr	r3, [pc, #256]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	3b04      	subs	r3, #4
 8009e48:	b298      	uxth	r0, r3
 8009e4a:	4b3f      	ldr	r3, [pc, #252]	; (8009f48 <cannon_master_rcv+0x224>)
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	b299      	uxth	r1, r3
 8009e52:	2314      	movs	r3, #20
 8009e54:	2228      	movs	r2, #40	; 0x28
 8009e56:	f7f7 f93f 	bl	80010d8 <BSP_LCD_FillRect>
						x_master = x_master + 2;
 8009e5a:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	3302      	adds	r3, #2
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e64:	801a      	strh	r2, [r3, #0]

						BSP_LCD_DrawBitmap(x_master,y_master,cannon_master);
 8009e66:	4b37      	ldr	r3, [pc, #220]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <cannon_master_rcv+0x224>)
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	4a36      	ldr	r2, [pc, #216]	; (8009f4c <cannon_master_rcv+0x228>)
 8009e72:	4619      	mov	r1, r3
 8009e74:	f7f7 f880 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_master > 750) {
 8009e78:	e018      	b.n	8009eac <cannon_master_rcv+0x188>
					}
				}
				else {
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e7e:	f7f7 f807 	bl	8000e90 <BSP_LCD_SetTextColor>
										BSP_LCD_FillRect(x_master-4,y_master-1,40,20);
 8009e82:	4b30      	ldr	r3, [pc, #192]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	3b04      	subs	r3, #4
 8009e88:	b298      	uxth	r0, r3
 8009e8a:	4b2f      	ldr	r3, [pc, #188]	; (8009f48 <cannon_master_rcv+0x224>)
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	b299      	uxth	r1, r3
 8009e92:	2314      	movs	r3, #20
 8009e94:	2228      	movs	r2, #40	; 0x28
 8009e96:	f7f7 f91f 	bl	80010d8 <BSP_LCD_FillRect>
					BSP_LCD_DrawBitmap(x_master,y_master,cannon_master);
 8009e9a:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <cannon_master_rcv+0x220>)
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	4b29      	ldr	r3, [pc, #164]	; (8009f48 <cannon_master_rcv+0x224>)
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	4a29      	ldr	r2, [pc, #164]	; (8009f4c <cannon_master_rcv+0x228>)
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	f7f7 f866 	bl	8000f78 <BSP_LCD_DrawBitmap>
				}

				if (laser_lcd_flag == false) {
 8009eac:	7fbb      	ldrb	r3, [r7, #30]
 8009eae:	f083 0301 	eor.w	r3, r3, #1
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d016      	beq.n	8009ee6 <cannon_master_rcv+0x1c2>
					if (joy_master.id == A_BUTTON && (joy_master.val == 4 || joy_master.val == 2 )) {
 8009eb8:	7b3b      	ldrb	r3, [r7, #12]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d113      	bne.n	8009ee6 <cannon_master_rcv+0x1c2>
 8009ebe:	7b7b      	ldrb	r3, [r7, #13]
 8009ec0:	2b04      	cmp	r3, #4
 8009ec2:	d002      	beq.n	8009eca <cannon_master_rcv+0x1a6>
 8009ec4:	7b7b      	ldrb	r3, [r7, #13]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d10d      	bne.n	8009ee6 <cannon_master_rcv+0x1c2>
						btn_joy_flag = true;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	77fb      	strb	r3, [r7, #31]
						x_laser = x_master + 14;
 8009ece:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <cannon_master_rcv+0x220>)
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	330e      	adds	r3, #14
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	4b1e      	ldr	r3, [pc, #120]	; (8009f50 <cannon_master_rcv+0x22c>)
 8009ed8:	801a      	strh	r2, [r3, #0]
						y_laser = y_master -2;
 8009eda:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <cannon_master_rcv+0x224>)
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	3b02      	subs	r3, #2
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <cannon_master_rcv+0x230>)
 8009ee4:	801a      	strh	r2, [r3, #0]
					}
				}

				if (btn_joy_flag == true) {
 8009ee6:	7ffb      	ldrb	r3, [r7, #31]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f43f af23 	beq.w	8009d34 <cannon_master_rcv+0x10>
					laser_lcd_flag = true;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	77bb      	strb	r3, [r7, #30]
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009ef2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009ef6:	f7f6 ffcb 	bl	8000e90 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(x_laser,y_laser,2,12);
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <cannon_master_rcv+0x22c>)
 8009efc:	8818      	ldrh	r0, [r3, #0]
 8009efe:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <cannon_master_rcv+0x230>)
 8009f00:	8819      	ldrh	r1, [r3, #0]
 8009f02:	230c      	movs	r3, #12
 8009f04:	2202      	movs	r2, #2
 8009f06:	f7f7 f8e7 	bl	80010d8 <BSP_LCD_FillRect>
					y_laser = y_laser - 4;
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <cannon_master_rcv+0x230>)
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	3b04      	subs	r3, #4
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <cannon_master_rcv+0x230>)
 8009f14:	801a      	strh	r2, [r3, #0]
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009f16:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8009f1a:	f7f6 ffb9 	bl	8000e90 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(x_laser,y_laser,2,12);
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <cannon_master_rcv+0x22c>)
 8009f20:	8818      	ldrh	r0, [r3, #0]
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <cannon_master_rcv+0x230>)
 8009f24:	8819      	ldrh	r1, [r3, #0]
 8009f26:	230c      	movs	r3, #12
 8009f28:	2202      	movs	r2, #2
 8009f2a:	f7f7 f8d5 	bl	80010d8 <BSP_LCD_FillRect>

					for (int c = 0; c < 11; c++) {		//board init
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	e093      	b.n	800a05c <cannon_master_rcv+0x338>
						for (int l = 0; l < 5; l++) {
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e08a      	b.n	800a050 <cannon_master_rcv+0x32c>
 8009f3a:	bf00      	nop
 8009f3c:	20008550 	.word	0x20008550
 8009f40:	2000406a 	.word	0x2000406a
 8009f44:	2000406c 	.word	0x2000406c
 8009f48:	2000406e 	.word	0x2000406e
 8009f4c:	20002b24 	.word	0x20002b24
 8009f50:	2000854e 	.word	0x2000854e
 8009f54:	2000854c 	.word	0x2000854c
							if (invader[c][l].status == LIVE && x_laser >= invader[c][l].x && x_laser <= invader[c][l].x + 30 &&
 8009f58:	484f      	ldr	r0, [pc, #316]	; (800a098 <cannon_master_rcv+0x374>)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	69b9      	ldr	r1, [r7, #24]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	0052      	lsls	r2, r2, #1
 8009f62:	441a      	add	r2, r3
 8009f64:	0053      	lsls	r3, r2, #1
 8009f66:	461a      	mov	r2, r3
 8009f68:	460b      	mov	r3, r1
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	1a5b      	subs	r3, r3, r1
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	4403      	add	r3, r0
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d167      	bne.n	800a04a <cannon_master_rcv+0x326>
 8009f7a:	4847      	ldr	r0, [pc, #284]	; (800a098 <cannon_master_rcv+0x374>)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	69b9      	ldr	r1, [r7, #24]
 8009f80:	461a      	mov	r2, r3
 8009f82:	0052      	lsls	r2, r2, #1
 8009f84:	441a      	add	r2, r3
 8009f86:	0053      	lsls	r3, r2, #1
 8009f88:	461a      	mov	r2, r3
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	1a5b      	subs	r3, r3, r1
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4413      	add	r3, r2
 8009f94:	4403      	add	r3, r0
 8009f96:	3302      	adds	r3, #2
 8009f98:	881a      	ldrh	r2, [r3, #0]
 8009f9a:	4b40      	ldr	r3, [pc, #256]	; (800a09c <cannon_master_rcv+0x378>)
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d853      	bhi.n	800a04a <cannon_master_rcv+0x326>
 8009fa2:	4b3e      	ldr	r3, [pc, #248]	; (800a09c <cannon_master_rcv+0x378>)
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	461c      	mov	r4, r3
 8009fa8:	483b      	ldr	r0, [pc, #236]	; (800a098 <cannon_master_rcv+0x374>)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	69b9      	ldr	r1, [r7, #24]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	0052      	lsls	r2, r2, #1
 8009fb2:	441a      	add	r2, r3
 8009fb4:	0053      	lsls	r3, r2, #1
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	460b      	mov	r3, r1
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	1a5b      	subs	r3, r3, r1
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	4413      	add	r3, r2
 8009fc2:	4403      	add	r3, r0
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	331e      	adds	r3, #30
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	dc3d      	bgt.n	800a04a <cannon_master_rcv+0x326>
									y_laser >= invader[c][l].y &&  y_laser <= invader[c][l].y + 25) {
 8009fce:	4832      	ldr	r0, [pc, #200]	; (800a098 <cannon_master_rcv+0x374>)
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	69b9      	ldr	r1, [r7, #24]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	0052      	lsls	r2, r2, #1
 8009fd8:	441a      	add	r2, r3
 8009fda:	0053      	lsls	r3, r2, #1
 8009fdc:	461a      	mov	r2, r3
 8009fde:	460b      	mov	r3, r1
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	4413      	add	r3, r2
 8009fe8:	4403      	add	r3, r0
 8009fea:	3304      	adds	r3, #4
 8009fec:	881a      	ldrh	r2, [r3, #0]
 8009fee:	4b2c      	ldr	r3, [pc, #176]	; (800a0a0 <cannon_master_rcv+0x37c>)
 8009ff0:	881b      	ldrh	r3, [r3, #0]
							if (invader[c][l].status == LIVE && x_laser >= invader[c][l].x && x_laser <= invader[c][l].x + 30 &&
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d829      	bhi.n	800a04a <cannon_master_rcv+0x326>
									y_laser >= invader[c][l].y &&  y_laser <= invader[c][l].y + 25) {
 8009ff6:	4b2a      	ldr	r3, [pc, #168]	; (800a0a0 <cannon_master_rcv+0x37c>)
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	4826      	ldr	r0, [pc, #152]	; (800a098 <cannon_master_rcv+0x374>)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	69b9      	ldr	r1, [r7, #24]
 800a002:	461a      	mov	r2, r3
 800a004:	0052      	lsls	r2, r2, #1
 800a006:	441a      	add	r2, r3
 800a008:	0053      	lsls	r3, r2, #1
 800a00a:	461a      	mov	r2, r3
 800a00c:	460b      	mov	r3, r1
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	1a5b      	subs	r3, r3, r1
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	4413      	add	r3, r2
 800a016:	4403      	add	r3, r0
 800a018:	3304      	adds	r3, #4
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	3319      	adds	r3, #25
 800a01e:	429c      	cmp	r4, r3
 800a020:	dc13      	bgt.n	800a04a <cannon_master_rcv+0x326>
								invader[c][l].status = SHOT;
 800a022:	481d      	ldr	r0, [pc, #116]	; (800a098 <cannon_master_rcv+0x374>)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	461a      	mov	r2, r3
 800a02a:	0052      	lsls	r2, r2, #1
 800a02c:	441a      	add	r2, r3
 800a02e:	0053      	lsls	r3, r2, #1
 800a030:	461a      	mov	r2, r3
 800a032:	460b      	mov	r3, r1
 800a034:	011b      	lsls	r3, r3, #4
 800a036:	1a5b      	subs	r3, r3, r1
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4413      	add	r3, r2
 800a03c:	4403      	add	r3, r0
 800a03e:	2202      	movs	r2, #2
 800a040:	701a      	strb	r2, [r3, #0]
								btn_joy_flag = false;
 800a042:	2300      	movs	r3, #0
 800a044:	77fb      	strb	r3, [r7, #31]
								laser_lcd_flag = false;
 800a046:	2300      	movs	r3, #0
 800a048:	77bb      	strb	r3, [r7, #30]
						for (int l = 0; l < 5; l++) {
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	3301      	adds	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b04      	cmp	r3, #4
 800a054:	dd80      	ble.n	8009f58 <cannon_master_rcv+0x234>
					for (int c = 0; c < 11; c++) {		//board init
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	3301      	adds	r3, #1
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2b0a      	cmp	r3, #10
 800a060:	f77f af68 	ble.w	8009f34 <cannon_master_rcv+0x210>
							}
						}
					}
					if (y_laser < 5 || y_laser > 480)  {
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <cannon_master_rcv+0x37c>)
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d905      	bls.n	800a078 <cannon_master_rcv+0x354>
 800a06c:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <cannon_master_rcv+0x37c>)
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a074:	f67f ae5e 	bls.w	8009d34 <cannon_master_rcv+0x10>
						BSP_LCD_DrawBitmap(x_laser-15,y_laser,laser_master_end);
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <cannon_master_rcv+0x378>)
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	3b0f      	subs	r3, #15
 800a07e:	4618      	mov	r0, r3
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <cannon_master_rcv+0x37c>)
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	4a07      	ldr	r2, [pc, #28]	; (800a0a4 <cannon_master_rcv+0x380>)
 800a086:	4619      	mov	r1, r3
 800a088:	f7f6 ff76 	bl	8000f78 <BSP_LCD_DrawBitmap>
						laser_lcd_flag = false;
 800a08c:	2300      	movs	r3, #0
 800a08e:	77bb      	strb	r3, [r7, #30]
 800a090:	e650      	b.n	8009d34 <cannon_master_rcv+0x10>
					}
				}
			}
		}
		else {
			Error_Handler();
 800a092:	f000 fe79 	bl	800ad88 <Error_Handler>
	for (;;){
 800a096:	e64d      	b.n	8009d34 <cannon_master_rcv+0x10>
 800a098:	200080dc 	.word	0x200080dc
 800a09c:	2000854e 	.word	0x2000854e
 800a0a0:	2000854c 	.word	0x2000854c
 800a0a4:	20003424 	.word	0x20003424

0800a0a8 <cannon_slave_rcv>:
		}
	}
}

void cannon_slave_rcv(void * parameters)  {
 800a0a8:	b590      	push	{r4, r7, lr}
 800a0aa:	b08b      	sub	sp, #44	; 0x2c
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
	uint16_t x_slave = 500;
 800a0b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a0b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y_slave = 460;
 800a0b6:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800a0ba:	82fb      	strh	r3, [r7, #22]
	Joystick joy_slave;

	uint16_t x_laser;
	uint16_t y_laser;
	bool btn_joy_flag = false;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	bool laser_lcd_flag = false;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f887 3020 	strb.w	r3, [r7, #32]

	for (;;){
		portBASE_TYPE xStatus=xQueueReceive(xQueue_joy_slave, &joy_slave, portMAX_DELAY);
 800a0c8:	4bb6      	ldr	r3, [pc, #728]	; (800a3a4 <cannon_slave_rcv+0x2fc>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f107 010c 	add.w	r1, r7, #12
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fd fbff 	bl	80078d8 <xQueueReceive>
 800a0da:	6138      	str	r0, [r7, #16]
		if(xStatus==pdTRUE) {
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	f040 815c 	bne.w	800a39c <cannon_slave_rcv+0x2f4>
			if (flag_endgame == true) {
 800a0e4:	4bb0      	ldr	r3, [pc, #704]	; (800a3a8 <cannon_slave_rcv+0x300>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ed      	beq.n	800a0c8 <cannon_slave_rcv+0x20>
				if (joy_slave.id == X_AXIS && joy_slave.val < 10) {
 800a0ec:	7b3b      	ldrb	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d134      	bne.n	800a15c <cannon_slave_rcv+0xb4>
 800a0f2:	7b7b      	ldrb	r3, [r7, #13]
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d831      	bhi.n	800a15c <cannon_slave_rcv+0xb4>
					if (x_slave < 200) {
 800a0f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0fa:	2bc7      	cmp	r3, #199	; 0xc7
 800a0fc:	d816      	bhi.n	800a12c <cannon_slave_rcv+0x84>
						x_slave = 200;
 800a0fe:	23c8      	movs	r3, #200	; 0xc8
 800a100:	84fb      	strh	r3, [r7, #38]	; 0x26
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a102:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a106:	f7f6 fec3 	bl	8000e90 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(x_slave-4,y_slave-1,40,20);
 800a10a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a10c:	3b04      	subs	r3, #4
 800a10e:	b298      	uxth	r0, r3
 800a110:	8afb      	ldrh	r3, [r7, #22]
 800a112:	3b01      	subs	r3, #1
 800a114:	b299      	uxth	r1, r3
 800a116:	2314      	movs	r3, #20
 800a118:	2228      	movs	r2, #40	; 0x28
 800a11a:	f7f6 ffdd 	bl	80010d8 <BSP_LCD_FillRect>
						BSP_LCD_DrawBitmap(x_slave,y_slave,cannon_slave);
 800a11e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a120:	8af9      	ldrh	r1, [r7, #22]
 800a122:	4aa2      	ldr	r2, [pc, #648]	; (800a3ac <cannon_slave_rcv+0x304>)
 800a124:	4618      	mov	r0, r3
 800a126:	f7f6 ff27 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_slave < 200) {
 800a12a:	e066      	b.n	800a1fa <cannon_slave_rcv+0x152>
					}
					else {
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a12c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a130:	f7f6 feae 	bl	8000e90 <BSP_LCD_SetTextColor>
												BSP_LCD_FillRect(x_slave-4,y_slave-1,40,20);
 800a134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a136:	3b04      	subs	r3, #4
 800a138:	b298      	uxth	r0, r3
 800a13a:	8afb      	ldrh	r3, [r7, #22]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b299      	uxth	r1, r3
 800a140:	2314      	movs	r3, #20
 800a142:	2228      	movs	r2, #40	; 0x28
 800a144:	f7f6 ffc8 	bl	80010d8 <BSP_LCD_FillRect>
						x_slave = x_slave - 2;
 800a148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a14a:	3b02      	subs	r3, #2
 800a14c:	84fb      	strh	r3, [r7, #38]	; 0x26
						BSP_LCD_DrawBitmap(x_slave,y_slave,cannon_slave);
 800a14e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a150:	8af9      	ldrh	r1, [r7, #22]
 800a152:	4a96      	ldr	r2, [pc, #600]	; (800a3ac <cannon_slave_rcv+0x304>)
 800a154:	4618      	mov	r0, r3
 800a156:	f7f6 ff0f 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_slave < 200) {
 800a15a:	e04e      	b.n	800a1fa <cannon_slave_rcv+0x152>
					}
				}else if (joy_slave.id == X_AXIS && joy_slave.val > 45) {
 800a15c:	7b3b      	ldrb	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d137      	bne.n	800a1d2 <cannon_slave_rcv+0x12a>
 800a162:	7b7b      	ldrb	r3, [r7, #13]
 800a164:	2b2d      	cmp	r3, #45	; 0x2d
 800a166:	d934      	bls.n	800a1d2 <cannon_slave_rcv+0x12a>
					if (x_slave > 750) {
 800a168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a16a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a16e:	4293      	cmp	r3, r2
 800a170:	d917      	bls.n	800a1a2 <cannon_slave_rcv+0xfa>
						x_slave = 750;
 800a172:	f240 23ee 	movw	r3, #750	; 0x2ee
 800a176:	84fb      	strh	r3, [r7, #38]	; 0x26
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a178:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a17c:	f7f6 fe88 	bl	8000e90 <BSP_LCD_SetTextColor>
												BSP_LCD_FillRect(x_slave-4,y_slave-1,40,20);
 800a180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a182:	3b04      	subs	r3, #4
 800a184:	b298      	uxth	r0, r3
 800a186:	8afb      	ldrh	r3, [r7, #22]
 800a188:	3b01      	subs	r3, #1
 800a18a:	b299      	uxth	r1, r3
 800a18c:	2314      	movs	r3, #20
 800a18e:	2228      	movs	r2, #40	; 0x28
 800a190:	f7f6 ffa2 	bl	80010d8 <BSP_LCD_FillRect>
						BSP_LCD_DrawBitmap(x_slave,y_slave,cannon_slave);
 800a194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a196:	8af9      	ldrh	r1, [r7, #22]
 800a198:	4a84      	ldr	r2, [pc, #528]	; (800a3ac <cannon_slave_rcv+0x304>)
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f6 feec 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_slave > 750) {
 800a1a0:	e02b      	b.n	800a1fa <cannon_slave_rcv+0x152>
					} else {
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a1a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a1a6:	f7f6 fe73 	bl	8000e90 <BSP_LCD_SetTextColor>
												BSP_LCD_FillRect(x_slave-4,y_slave-1,40,20);
 800a1aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1ac:	3b04      	subs	r3, #4
 800a1ae:	b298      	uxth	r0, r3
 800a1b0:	8afb      	ldrh	r3, [r7, #22]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	2314      	movs	r3, #20
 800a1b8:	2228      	movs	r2, #40	; 0x28
 800a1ba:	f7f6 ff8d 	bl	80010d8 <BSP_LCD_FillRect>
						x_slave = x_slave + 2;
 800a1be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	84fb      	strh	r3, [r7, #38]	; 0x26
						BSP_LCD_DrawBitmap(x_slave,y_slave,cannon_slave);
 800a1c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c6:	8af9      	ldrh	r1, [r7, #22]
 800a1c8:	4a78      	ldr	r2, [pc, #480]	; (800a3ac <cannon_slave_rcv+0x304>)
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f6 fed4 	bl	8000f78 <BSP_LCD_DrawBitmap>
					if (x_slave > 750) {
 800a1d0:	e013      	b.n	800a1fa <cannon_slave_rcv+0x152>
					}
				}
				else {
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a1d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a1d6:	f7f6 fe5b 	bl	8000e90 <BSP_LCD_SetTextColor>
											BSP_LCD_FillRect(x_slave-4,y_slave-1,40,20);
 800a1da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	b298      	uxth	r0, r3
 800a1e0:	8afb      	ldrh	r3, [r7, #22]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b299      	uxth	r1, r3
 800a1e6:	2314      	movs	r3, #20
 800a1e8:	2228      	movs	r2, #40	; 0x28
 800a1ea:	f7f6 ff75 	bl	80010d8 <BSP_LCD_FillRect>
					BSP_LCD_DrawBitmap(x_slave,y_slave,cannon_slave);
 800a1ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f0:	8af9      	ldrh	r1, [r7, #22]
 800a1f2:	4a6e      	ldr	r2, [pc, #440]	; (800a3ac <cannon_slave_rcv+0x304>)
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f6 febf 	bl	8000f78 <BSP_LCD_DrawBitmap>
				}

				if (laser_lcd_flag == false) {
 800a1fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1fe:	f083 0301 	eor.w	r3, r3, #1
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <cannon_slave_rcv+0x17e>
					if (joy_slave.id == A_BUTTON && joy_slave.val == 1 ) {
 800a208:	7b3b      	ldrb	r3, [r7, #12]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d10b      	bne.n	800a226 <cannon_slave_rcv+0x17e>
 800a20e:	7b7b      	ldrb	r3, [r7, #13]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d108      	bne.n	800a226 <cannon_slave_rcv+0x17e>
						btn_joy_flag = true;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						x_laser = x_slave + 14;
 800a21a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a21c:	330e      	adds	r3, #14
 800a21e:	84bb      	strh	r3, [r7, #36]	; 0x24
						y_laser = y_slave -2;
 800a220:	8afb      	ldrh	r3, [r7, #22]
 800a222:	3b02      	subs	r3, #2
 800a224:	847b      	strh	r3, [r7, #34]	; 0x22
					}
				}
				if (btn_joy_flag == true) {
 800a226:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f43f af4c 	beq.w	800a0c8 <cannon_slave_rcv+0x20>
					laser_lcd_flag = true;
 800a230:	2301      	movs	r3, #1
 800a232:	f887 3020 	strb.w	r3, [r7, #32]
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a236:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a23a:	f7f6 fe29 	bl	8000e90 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(x_laser,y_laser,2,12);
 800a23e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800a240:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800a242:	230c      	movs	r3, #12
 800a244:	2202      	movs	r2, #2
 800a246:	f7f6 ff47 	bl	80010d8 <BSP_LCD_FillRect>
					y_laser = y_laser - 4;
 800a24a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a24c:	3b04      	subs	r3, #4
 800a24e:	847b      	strh	r3, [r7, #34]	; 0x22
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 800a250:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800a254:	f7f6 fe1c 	bl	8000e90 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(x_laser,y_laser,2,12);
 800a258:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800a25a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800a25c:	230c      	movs	r3, #12
 800a25e:	2202      	movs	r2, #2
 800a260:	f7f6 ff3a 	bl	80010d8 <BSP_LCD_FillRect>

					for (int c = 0; c < 11; c++) {		//board init
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e080      	b.n	800a36c <cannon_slave_rcv+0x2c4>
						for (int l = 0; l < 5; l++) {
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	e077      	b.n	800a360 <cannon_slave_rcv+0x2b8>
							if (invader[c][l].status == LIVE && x_laser >= invader[c][l].x && x_laser <= invader[c][l].x + 30 &&
 800a270:	484f      	ldr	r0, [pc, #316]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	69f9      	ldr	r1, [r7, #28]
 800a276:	461a      	mov	r2, r3
 800a278:	0052      	lsls	r2, r2, #1
 800a27a:	441a      	add	r2, r3
 800a27c:	0053      	lsls	r3, r2, #1
 800a27e:	461a      	mov	r2, r3
 800a280:	460b      	mov	r3, r1
 800a282:	011b      	lsls	r3, r3, #4
 800a284:	1a5b      	subs	r3, r3, r1
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	4413      	add	r3, r2
 800a28a:	4403      	add	r3, r0
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d163      	bne.n	800a35a <cannon_slave_rcv+0x2b2>
 800a292:	4847      	ldr	r0, [pc, #284]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	69f9      	ldr	r1, [r7, #28]
 800a298:	461a      	mov	r2, r3
 800a29a:	0052      	lsls	r2, r2, #1
 800a29c:	441a      	add	r2, r3
 800a29e:	0053      	lsls	r3, r2, #1
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	1a5b      	subs	r3, r3, r1
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	4403      	add	r3, r0
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d350      	bcc.n	800a35a <cannon_slave_rcv+0x2b2>
 800a2b8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800a2ba:	4c3d      	ldr	r4, [pc, #244]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	69f9      	ldr	r1, [r7, #28]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	0052      	lsls	r2, r2, #1
 800a2c4:	441a      	add	r2, r3
 800a2c6:	0053      	lsls	r3, r2, #1
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	1a5b      	subs	r3, r3, r1
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4423      	add	r3, r4
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	331e      	adds	r3, #30
 800a2dc:	4298      	cmp	r0, r3
 800a2de:	dc3c      	bgt.n	800a35a <cannon_slave_rcv+0x2b2>
									y_laser >= invader[c][l].y &&  y_laser <= invader[c][l].y + 25) {
 800a2e0:	4833      	ldr	r0, [pc, #204]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	0052      	lsls	r2, r2, #1
 800a2ea:	441a      	add	r2, r3
 800a2ec:	0053      	lsls	r3, r2, #1
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	011b      	lsls	r3, r3, #4
 800a2f4:	1a5b      	subs	r3, r3, r1
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	4403      	add	r3, r0
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	881b      	ldrh	r3, [r3, #0]
							if (invader[c][l].status == LIVE && x_laser >= invader[c][l].x && x_laser <= invader[c][l].x + 30 &&
 800a300:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a302:	429a      	cmp	r2, r3
 800a304:	d329      	bcc.n	800a35a <cannon_slave_rcv+0x2b2>
									y_laser >= invader[c][l].y &&  y_laser <= invader[c][l].y + 25) {
 800a306:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800a308:	4c29      	ldr	r4, [pc, #164]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	69f9      	ldr	r1, [r7, #28]
 800a30e:	461a      	mov	r2, r3
 800a310:	0052      	lsls	r2, r2, #1
 800a312:	441a      	add	r2, r3
 800a314:	0053      	lsls	r3, r2, #1
 800a316:	461a      	mov	r2, r3
 800a318:	460b      	mov	r3, r1
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	1a5b      	subs	r3, r3, r1
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	4423      	add	r3, r4
 800a324:	3304      	adds	r3, #4
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	3319      	adds	r3, #25
 800a32a:	4298      	cmp	r0, r3
 800a32c:	dc15      	bgt.n	800a35a <cannon_slave_rcv+0x2b2>
								invader[c][l].status = SHOT;
 800a32e:	4820      	ldr	r0, [pc, #128]	; (800a3b0 <cannon_slave_rcv+0x308>)
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	69f9      	ldr	r1, [r7, #28]
 800a334:	461a      	mov	r2, r3
 800a336:	0052      	lsls	r2, r2, #1
 800a338:	441a      	add	r2, r3
 800a33a:	0053      	lsls	r3, r2, #1
 800a33c:	461a      	mov	r2, r3
 800a33e:	460b      	mov	r3, r1
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	1a5b      	subs	r3, r3, r1
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4413      	add	r3, r2
 800a348:	4403      	add	r3, r0
 800a34a:	2202      	movs	r2, #2
 800a34c:	701a      	strb	r2, [r3, #0]
								btn_joy_flag = false;
 800a34e:	2300      	movs	r3, #0
 800a350:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
								laser_lcd_flag = false;
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3020 	strb.w	r3, [r7, #32]
						for (int l = 0; l < 5; l++) {
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	3301      	adds	r3, #1
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	2b04      	cmp	r3, #4
 800a364:	dd84      	ble.n	800a270 <cannon_slave_rcv+0x1c8>
					for (int c = 0; c < 11; c++) {		//board init
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	3301      	adds	r3, #1
 800a36a:	61fb      	str	r3, [r7, #28]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	2b0a      	cmp	r3, #10
 800a370:	f77f af7b 	ble.w	800a26a <cannon_slave_rcv+0x1c2>
							}
						}
					}
					if (y_laser < 5 || y_laser > 480)  {
 800a374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a376:	2b04      	cmp	r3, #4
 800a378:	d904      	bls.n	800a384 <cannon_slave_rcv+0x2dc>
 800a37a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a37c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a380:	f67f aea2 	bls.w	800a0c8 <cannon_slave_rcv+0x20>
						BSP_LCD_DrawBitmap(x_laser-15,y_laser,laser_slave_end);
 800a384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a386:	3b0f      	subs	r3, #15
 800a388:	4618      	mov	r0, r3
 800a38a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a38c:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <cannon_slave_rcv+0x30c>)
 800a38e:	4619      	mov	r1, r3
 800a390:	f7f6 fdf2 	bl	8000f78 <BSP_LCD_DrawBitmap>
						laser_lcd_flag = false;
 800a394:	2300      	movs	r3, #0
 800a396:	f887 3020 	strb.w	r3, [r7, #32]
 800a39a:	e695      	b.n	800a0c8 <cannon_slave_rcv+0x20>
					}
				}
			}
		}
		else {
			Error_Handler();
 800a39c:	f000 fcf4 	bl	800ad88 <Error_Handler>
	for (;;){
 800a3a0:	e692      	b.n	800a0c8 <cannon_slave_rcv+0x20>
 800a3a2:	bf00      	nop
 800a3a4:	200084e4 	.word	0x200084e4
 800a3a8:	2000406a 	.word	0x2000406a
 800a3ac:	20002fa4 	.word	0x20002fa4
 800a3b0:	200080dc 	.word	0x200080dc
 800a3b4:	20003a48 	.word	0x20003a48

0800a3b8 <invaders_sdr>:
		}
	}
}

void invaders_sdr (void *parameters) {
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b093      	sub	sp, #76	; 0x4c
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	int16_t x_start = 252;
 800a3c0:	23fc      	movs	r3, #252	; 0xfc
 800a3c2:	827b      	strh	r3, [r7, #18]
	int16_t y_start = 80;
 800a3c4:	2350      	movs	r3, #80	; 0x50
 800a3c6:	823b      	strh	r3, [r7, #16]
	int8_t rows_right = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	int8_t rows_left = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	int8_t direction = 1;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	int8_t x_steps = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	int8_t y_steps = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	bool flag_y_steps = false;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t ctr_shot = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	for (int c = 0; c < 11; c++) {		//board init
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f6:	e01b      	b.n	800a430 <invaders_sdr+0x78>
		for (int l = 0; l < 5; l++) {
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3fc:	e012      	b.n	800a424 <invaders_sdr+0x6c>
			invader[c][l].status = LIVE;
 800a3fe:	48bb      	ldr	r0, [pc, #748]	; (800a6ec <invaders_sdr+0x334>)
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a404:	461a      	mov	r2, r3
 800a406:	0052      	lsls	r2, r2, #1
 800a408:	441a      	add	r2, r3
 800a40a:	0053      	lsls	r3, r2, #1
 800a40c:	461a      	mov	r2, r3
 800a40e:	460b      	mov	r3, r1
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	1a5b      	subs	r3, r3, r1
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	4403      	add	r3, r0
 800a41a:	2203      	movs	r2, #3
 800a41c:	701a      	strb	r2, [r3, #0]
		for (int l = 0; l < 5; l++) {
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	3301      	adds	r3, #1
 800a422:	63bb      	str	r3, [r7, #56]	; 0x38
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	2b04      	cmp	r3, #4
 800a428:	dde9      	ble.n	800a3fe <invaders_sdr+0x46>
	for (int c = 0; c < 11; c++) {		//board init
 800a42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42c:	3301      	adds	r3, #1
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a432:	2b0a      	cmp	r3, #10
 800a434:	dde0      	ble.n	800a3f8 <invaders_sdr+0x40>
		}
	}
	portTickType xNextWakeTime;

	portTickType xCycleFrequency = 800 / portTICK_RATE_MS;
 800a436:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
	xNextWakeTime = xTaskGetTickCount ();
 800a43c:	f7fd ff16 	bl	800826c <xTaskGetTickCount>
 800a440:	4603      	mov	r3, r0
 800a442:	60fb      	str	r3, [r7, #12]

	for (;;) {
		if (flag_endgame == true) {
 800a444:	4baa      	ldr	r3, [pc, #680]	; (800a6f0 <invaders_sdr+0x338>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8340 	beq.w	800aace <invaders_sdr+0x716>

			if (flag_y_steps == true) {
 800a44e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <invaders_sdr+0xb2>
				y_steps++;
 800a456:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	3301      	adds	r3, #1
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				flag_y_steps = false;
 800a464:	2300      	movs	r3, #0
 800a466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			}
			if(direction == 1 ) { // Right direction
 800a46a:	f997 3045 	ldrsb.w	r3, [r7, #69]	; 0x45
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d14c      	bne.n	800a50c <invaders_sdr+0x154>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a472:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a476:	f7f6 fd0b 	bl	8000e90 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(160,0,619,480);
 800a47a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a47e:	f240 226b 	movw	r2, #619	; 0x26b
 800a482:	2100      	movs	r1, #0
 800a484:	20a0      	movs	r0, #160	; 0xa0
 800a486:	f7f6 fe27 	bl	80010d8 <BSP_LCD_FillRect>
				x_steps ++;
 800a48a:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	3301      	adds	r3, #1
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				rows_right = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				for (int c = 10; c >= 0; c--) {
 800a49e:	230a      	movs	r3, #10
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a2:	e030      	b.n	800a506 <invaders_sdr+0x14e>
					rows_right++;
 800a4a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					for (int l = 5; l >= 0; l--) {
 800a4b2:	2305      	movs	r3, #5
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4b6:	e020      	b.n	800a4fa <invaders_sdr+0x142>
						if (invader[c][l].status == LIVE) {
 800a4b8:	488c      	ldr	r0, [pc, #560]	; (800a6ec <invaders_sdr+0x334>)
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4be:	461a      	mov	r2, r3
 800a4c0:	0052      	lsls	r2, r2, #1
 800a4c2:	441a      	add	r2, r3
 800a4c4:	0053      	lsls	r3, r2, #1
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	011b      	lsls	r3, r3, #4
 800a4cc:	1a5b      	subs	r3, r3, r1
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4403      	add	r3, r0
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d10c      	bne.n	800a4f4 <invaders_sdr+0x13c>
							if(x_steps == 8 * rows_right) {
 800a4da:	f997 2044 	ldrsb.w	r2, [r7, #68]	; 0x44
 800a4de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d105      	bne.n	800a4f4 <invaders_sdr+0x13c>
								flag_y_steps = true;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
								direction = -1;
 800a4ee:	23ff      	movs	r3, #255	; 0xff
 800a4f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					for (int l = 5; l >= 0; l--) {
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dadb      	bge.n	800a4b8 <invaders_sdr+0x100>
				for (int c = 10; c >= 0; c--) {
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	3b01      	subs	r3, #1
 800a504:	633b      	str	r3, [r7, #48]	; 0x30
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dacb      	bge.n	800a4a4 <invaders_sdr+0xec>
						}
					}
				}
			}

			if(direction == -1 ) { // Left Direction
 800a50c:	f997 3045 	ldrsb.w	r3, [r7, #69]	; 0x45
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d14f      	bne.n	800a5b6 <invaders_sdr+0x1fe>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a516:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a51a:	f7f6 fcb9 	bl	8000e90 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(160,0,619,480);
 800a51e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a522:	f240 226b 	movw	r2, #619	; 0x26b
 800a526:	2100      	movs	r1, #0
 800a528:	20a0      	movs	r0, #160	; 0xa0
 800a52a:	f7f6 fdd5 	bl	80010d8 <BSP_LCD_FillRect>
				x_steps --;
 800a52e:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 800a532:	b2db      	uxtb	r3, r3
 800a534:	3b01      	subs	r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				rows_left = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				for (int c = 0; c < 11; c++) {
 800a542:	2300      	movs	r3, #0
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
 800a546:	e033      	b.n	800a5b0 <invaders_sdr+0x1f8>
					rows_left++;
 800a548:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	3301      	adds	r3, #1
 800a550:	b2db      	uxtb	r3, r3
 800a552:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					for (int l = 0; l < 5; l++) {
 800a556:	2300      	movs	r3, #0
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
 800a55a:	e023      	b.n	800a5a4 <invaders_sdr+0x1ec>
						if (invader[c][l].status == LIVE) {
 800a55c:	4863      	ldr	r0, [pc, #396]	; (800a6ec <invaders_sdr+0x334>)
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a562:	461a      	mov	r2, r3
 800a564:	0052      	lsls	r2, r2, #1
 800a566:	441a      	add	r2, r3
 800a568:	0053      	lsls	r3, r2, #1
 800a56a:	461a      	mov	r2, r3
 800a56c:	460b      	mov	r3, r1
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	1a5b      	subs	r3, r3, r1
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	4403      	add	r3, r0
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d10f      	bne.n	800a59e <invaders_sdr+0x1e6>
							if(x_steps == (-8) * rows_left) {
 800a57e:	f997 1044 	ldrsb.w	r1, [r7, #68]	; 0x44
 800a582:	f997 2046 	ldrsb.w	r2, [r7, #70]	; 0x46
 800a586:	4613      	mov	r3, r2
 800a588:	075b      	lsls	r3, r3, #29
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	4299      	cmp	r1, r3
 800a590:	d105      	bne.n	800a59e <invaders_sdr+0x1e6>
								flag_y_steps = true;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
								direction = 1;
 800a598:	2301      	movs	r3, #1
 800a59a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					for (int l = 0; l < 5; l++) {
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	ddd8      	ble.n	800a55c <invaders_sdr+0x1a4>
				for (int c = 0; c < 11; c++) {
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	2b0a      	cmp	r3, #10
 800a5b4:	ddc8      	ble.n	800a548 <invaders_sdr+0x190>
							}
						}
					}
				}
			}
			for (int c = 0; c < 11; c++) { // 2nd and 3rd row of invaders
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	623b      	str	r3, [r7, #32]
 800a5ba:	e190      	b.n	800a8de <invaders_sdr+0x526>
				for (int l = 0; l < 5; l++) {
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	e186      	b.n	800a8d0 <invaders_sdr+0x518>
					if (invader[c][l].status == LIVE) {
 800a5c2:	484a      	ldr	r0, [pc, #296]	; (800a6ec <invaders_sdr+0x334>)
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	6a39      	ldr	r1, [r7, #32]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	0052      	lsls	r2, r2, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	0053      	lsls	r3, r2, #1
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	1a5b      	subs	r3, r3, r1
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	4413      	add	r3, r2
 800a5dc:	4403      	add	r3, r0
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	f040 8172 	bne.w	800a8ca <invaders_sdr+0x512>
						invader[c][l].x = x_start+(45*c)+(x_unit_px*x_steps);
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	0052      	lsls	r2, r2, #1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	0112      	lsls	r2, r2, #4
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	2306      	movs	r3, #6
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 800a600:	b29b      	uxth	r3, r3
 800a602:	fb11 f303 	smulbb	r3, r1, r3
 800a606:	b29b      	uxth	r3, r3
 800a608:	4413      	add	r3, r2
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	8a7b      	ldrh	r3, [r7, #18]
 800a60e:	4413      	add	r3, r2
 800a610:	b29c      	uxth	r4, r3
 800a612:	4836      	ldr	r0, [pc, #216]	; (800a6ec <invaders_sdr+0x334>)
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	6a39      	ldr	r1, [r7, #32]
 800a618:	461a      	mov	r2, r3
 800a61a:	0052      	lsls	r2, r2, #1
 800a61c:	441a      	add	r2, r3
 800a61e:	0053      	lsls	r3, r2, #1
 800a620:	461a      	mov	r2, r3
 800a622:	460b      	mov	r3, r1
 800a624:	011b      	lsls	r3, r3, #4
 800a626:	1a5b      	subs	r3, r3, r1
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	4413      	add	r3, r2
 800a62c:	4403      	add	r3, r0
 800a62e:	3302      	adds	r3, #2
 800a630:	4622      	mov	r2, r4
 800a632:	801a      	strh	r2, [r3, #0]
						invader[c][l].y = y_start+(50*l)+(y_unit_px*y_steps);
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	b29b      	uxth	r3, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	461a      	mov	r2, r3
 800a640:	0091      	lsls	r1, r2, #2
 800a642:	461a      	mov	r2, r3
 800a644:	460b      	mov	r3, r1
 800a646:	4413      	add	r3, r2
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	2314      	movs	r3, #20
 800a64e:	b299      	uxth	r1, r3
 800a650:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800a654:	b29b      	uxth	r3, r3
 800a656:	fb11 f303 	smulbb	r3, r1, r3
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4413      	add	r3, r2
 800a65e:	b29a      	uxth	r2, r3
 800a660:	8a3b      	ldrh	r3, [r7, #16]
 800a662:	4413      	add	r3, r2
 800a664:	b29c      	uxth	r4, r3
 800a666:	4821      	ldr	r0, [pc, #132]	; (800a6ec <invaders_sdr+0x334>)
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	6a39      	ldr	r1, [r7, #32]
 800a66c:	461a      	mov	r2, r3
 800a66e:	0052      	lsls	r2, r2, #1
 800a670:	441a      	add	r2, r3
 800a672:	0053      	lsls	r3, r2, #1
 800a674:	461a      	mov	r2, r3
 800a676:	460b      	mov	r3, r1
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	1a5b      	subs	r3, r3, r1
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	4413      	add	r3, r2
 800a680:	4403      	add	r3, r0
 800a682:	3304      	adds	r3, #4
 800a684:	4622      	mov	r2, r4
 800a686:	801a      	strh	r2, [r3, #0]
						if (x_steps %2 == 0 && l==0) {
 800a688:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d130      	bne.n	800a6f8 <invaders_sdr+0x340>
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d12d      	bne.n	800a6f8 <invaders_sdr+0x340>
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_a1);
 800a69c:	4813      	ldr	r0, [pc, #76]	; (800a6ec <invaders_sdr+0x334>)
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	6a39      	ldr	r1, [r7, #32]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	0052      	lsls	r2, r2, #1
 800a6a6:	441a      	add	r2, r3
 800a6a8:	0053      	lsls	r3, r2, #1
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	1a5b      	subs	r3, r3, r1
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4403      	add	r3, r0
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	461c      	mov	r4, r3
 800a6be:	480b      	ldr	r0, [pc, #44]	; (800a6ec <invaders_sdr+0x334>)
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	6a39      	ldr	r1, [r7, #32]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	0052      	lsls	r2, r2, #1
 800a6c8:	441a      	add	r2, r3
 800a6ca:	0053      	lsls	r3, r2, #1
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	1a5b      	subs	r3, r3, r1
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	4403      	add	r3, r0
 800a6da:	3304      	adds	r3, #4
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	4a05      	ldr	r2, [pc, #20]	; (800a6f4 <invaders_sdr+0x33c>)
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7f6 fc48 	bl	8000f78 <BSP_LCD_DrawBitmap>
 800a6e8:	e02f      	b.n	800a74a <invaders_sdr+0x392>
 800a6ea:	bf00      	nop
 800a6ec:	200080dc 	.word	0x200080dc
 800a6f0:	2000406a 	.word	0x2000406a
 800a6f4:	20000028 	.word	0x20000028
						}
						else if (l==0)
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d125      	bne.n	800a74a <invaders_sdr+0x392>
						{
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_a2);
 800a6fe:	487d      	ldr	r0, [pc, #500]	; (800a8f4 <invaders_sdr+0x53c>)
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	6a39      	ldr	r1, [r7, #32]
 800a704:	461a      	mov	r2, r3
 800a706:	0052      	lsls	r2, r2, #1
 800a708:	441a      	add	r2, r3
 800a70a:	0053      	lsls	r3, r2, #1
 800a70c:	461a      	mov	r2, r3
 800a70e:	460b      	mov	r3, r1
 800a710:	011b      	lsls	r3, r3, #4
 800a712:	1a5b      	subs	r3, r3, r1
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	4413      	add	r3, r2
 800a718:	4403      	add	r3, r0
 800a71a:	3302      	adds	r3, #2
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	461c      	mov	r4, r3
 800a720:	4874      	ldr	r0, [pc, #464]	; (800a8f4 <invaders_sdr+0x53c>)
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	6a39      	ldr	r1, [r7, #32]
 800a726:	461a      	mov	r2, r3
 800a728:	0052      	lsls	r2, r2, #1
 800a72a:	441a      	add	r2, r3
 800a72c:	0053      	lsls	r3, r2, #1
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	1a5b      	subs	r3, r3, r1
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	4413      	add	r3, r2
 800a73a:	4403      	add	r3, r0
 800a73c:	3304      	adds	r3, #4
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	4a6d      	ldr	r2, [pc, #436]	; (800a8f8 <invaders_sdr+0x540>)
 800a742:	4619      	mov	r1, r3
 800a744:	4620      	mov	r0, r4
 800a746:	f7f6 fc17 	bl	8000f78 <BSP_LCD_DrawBitmap>
						}
						if (x_steps %2 == 0 && (l==1 || l==2)){
 800a74a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d12c      	bne.n	800a7b2 <invaders_sdr+0x3fa>
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d002      	beq.n	800a764 <invaders_sdr+0x3ac>
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d126      	bne.n	800a7b2 <invaders_sdr+0x3fa>
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_b1);
 800a764:	4863      	ldr	r0, [pc, #396]	; (800a8f4 <invaders_sdr+0x53c>)
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	6a39      	ldr	r1, [r7, #32]
 800a76a:	461a      	mov	r2, r3
 800a76c:	0052      	lsls	r2, r2, #1
 800a76e:	441a      	add	r2, r3
 800a770:	0053      	lsls	r3, r2, #1
 800a772:	461a      	mov	r2, r3
 800a774:	460b      	mov	r3, r1
 800a776:	011b      	lsls	r3, r3, #4
 800a778:	1a5b      	subs	r3, r3, r1
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	4413      	add	r3, r2
 800a77e:	4403      	add	r3, r0
 800a780:	3302      	adds	r3, #2
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	461c      	mov	r4, r3
 800a786:	485b      	ldr	r0, [pc, #364]	; (800a8f4 <invaders_sdr+0x53c>)
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	6a39      	ldr	r1, [r7, #32]
 800a78c:	461a      	mov	r2, r3
 800a78e:	0052      	lsls	r2, r2, #1
 800a790:	441a      	add	r2, r3
 800a792:	0053      	lsls	r3, r2, #1
 800a794:	461a      	mov	r2, r3
 800a796:	460b      	mov	r3, r1
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	1a5b      	subs	r3, r3, r1
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	4413      	add	r3, r2
 800a7a0:	4403      	add	r3, r0
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	4a55      	ldr	r2, [pc, #340]	; (800a8fc <invaders_sdr+0x544>)
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7f6 fbe4 	bl	8000f78 <BSP_LCD_DrawBitmap>
 800a7b0:	e02b      	b.n	800a80a <invaders_sdr+0x452>
						}
						else if (l==1 || l==2)
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d002      	beq.n	800a7be <invaders_sdr+0x406>
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d125      	bne.n	800a80a <invaders_sdr+0x452>
						{
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_b2);
 800a7be:	484d      	ldr	r0, [pc, #308]	; (800a8f4 <invaders_sdr+0x53c>)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	6a39      	ldr	r1, [r7, #32]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	0052      	lsls	r2, r2, #1
 800a7c8:	441a      	add	r2, r3
 800a7ca:	0053      	lsls	r3, r2, #1
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	4413      	add	r3, r2
 800a7d8:	4403      	add	r3, r0
 800a7da:	3302      	adds	r3, #2
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	461c      	mov	r4, r3
 800a7e0:	4844      	ldr	r0, [pc, #272]	; (800a8f4 <invaders_sdr+0x53c>)
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6a39      	ldr	r1, [r7, #32]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	0052      	lsls	r2, r2, #1
 800a7ea:	441a      	add	r2, r3
 800a7ec:	0053      	lsls	r3, r2, #1
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	1a5b      	subs	r3, r3, r1
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	4413      	add	r3, r2
 800a7fa:	4403      	add	r3, r0
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	4a3f      	ldr	r2, [pc, #252]	; (800a900 <invaders_sdr+0x548>)
 800a802:	4619      	mov	r1, r3
 800a804:	4620      	mov	r0, r4
 800a806:	f7f6 fbb7 	bl	8000f78 <BSP_LCD_DrawBitmap>
						}
						if(x_steps%2 ==0 && (l==3 || l==4)){
 800a80a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d12c      	bne.n	800a872 <invaders_sdr+0x4ba>
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d002      	beq.n	800a824 <invaders_sdr+0x46c>
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d126      	bne.n	800a872 <invaders_sdr+0x4ba>
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_c1);
 800a824:	4833      	ldr	r0, [pc, #204]	; (800a8f4 <invaders_sdr+0x53c>)
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	6a39      	ldr	r1, [r7, #32]
 800a82a:	461a      	mov	r2, r3
 800a82c:	0052      	lsls	r2, r2, #1
 800a82e:	441a      	add	r2, r3
 800a830:	0053      	lsls	r3, r2, #1
 800a832:	461a      	mov	r2, r3
 800a834:	460b      	mov	r3, r1
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	1a5b      	subs	r3, r3, r1
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	4403      	add	r3, r0
 800a840:	3302      	adds	r3, #2
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	461c      	mov	r4, r3
 800a846:	482b      	ldr	r0, [pc, #172]	; (800a8f4 <invaders_sdr+0x53c>)
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	6a39      	ldr	r1, [r7, #32]
 800a84c:	461a      	mov	r2, r3
 800a84e:	0052      	lsls	r2, r2, #1
 800a850:	441a      	add	r2, r3
 800a852:	0053      	lsls	r3, r2, #1
 800a854:	461a      	mov	r2, r3
 800a856:	460b      	mov	r3, r1
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	1a5b      	subs	r3, r3, r1
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	4413      	add	r3, r2
 800a860:	4403      	add	r3, r0
 800a862:	3304      	adds	r3, #4
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	4a27      	ldr	r2, [pc, #156]	; (800a904 <invaders_sdr+0x54c>)
 800a868:	4619      	mov	r1, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7f6 fb84 	bl	8000f78 <BSP_LCD_DrawBitmap>
 800a870:	e02b      	b.n	800a8ca <invaders_sdr+0x512>
						}
						else if(l==3 || l==4) {
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	2b03      	cmp	r3, #3
 800a876:	d002      	beq.n	800a87e <invaders_sdr+0x4c6>
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d125      	bne.n	800a8ca <invaders_sdr+0x512>
							BSP_LCD_DrawBitmap(invader[c][l].x,invader[c][l].y,invader_c2);
 800a87e:	481d      	ldr	r0, [pc, #116]	; (800a8f4 <invaders_sdr+0x53c>)
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	6a39      	ldr	r1, [r7, #32]
 800a884:	461a      	mov	r2, r3
 800a886:	0052      	lsls	r2, r2, #1
 800a888:	441a      	add	r2, r3
 800a88a:	0053      	lsls	r3, r2, #1
 800a88c:	461a      	mov	r2, r3
 800a88e:	460b      	mov	r3, r1
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	1a5b      	subs	r3, r3, r1
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4413      	add	r3, r2
 800a898:	4403      	add	r3, r0
 800a89a:	3302      	adds	r3, #2
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	461c      	mov	r4, r3
 800a8a0:	4814      	ldr	r0, [pc, #80]	; (800a8f4 <invaders_sdr+0x53c>)
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	6a39      	ldr	r1, [r7, #32]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	0052      	lsls	r2, r2, #1
 800a8aa:	441a      	add	r2, r3
 800a8ac:	0053      	lsls	r3, r2, #1
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	1a5b      	subs	r3, r3, r1
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	4413      	add	r3, r2
 800a8ba:	4403      	add	r3, r0
 800a8bc:	3304      	adds	r3, #4
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	4a11      	ldr	r2, [pc, #68]	; (800a908 <invaders_sdr+0x550>)
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f7f6 fb57 	bl	8000f78 <BSP_LCD_DrawBitmap>
				for (int l = 0; l < 5; l++) {
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	f77f ae75 	ble.w	800a5c2 <invaders_sdr+0x20a>
			for (int c = 0; c < 11; c++) { // 2nd and 3rd row of invaders
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	623b      	str	r3, [r7, #32]
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	2b0a      	cmp	r3, #10
 800a8e2:	f77f ae6b 	ble.w	800a5bc <invaders_sdr+0x204>
						}
					}
				}
			}

			for (int c = 0; c < 11; c++) {
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61bb      	str	r3, [r7, #24]
 800a8ea:	e0b1      	b.n	800aa50 <invaders_sdr+0x698>
				for (int l = 0; l < 5; l++) {
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e0a7      	b.n	800aa42 <invaders_sdr+0x68a>
 800a8f2:	bf00      	nop
 800a8f4:	200080dc 	.word	0x200080dc
 800a8f8:	2000064c 	.word	0x2000064c
 800a8fc:	20000c70 	.word	0x20000c70
 800a900:	20001294 	.word	0x20001294
 800a904:	200018b8 	.word	0x200018b8
 800a908:	20001edc 	.word	0x20001edc
					if (invader[c][l].status == DESTROYED) {
 800a90c:	4873      	ldr	r0, [pc, #460]	; (800aadc <invaders_sdr+0x724>)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	461a      	mov	r2, r3
 800a914:	0052      	lsls	r2, r2, #1
 800a916:	441a      	add	r2, r3
 800a918:	0053      	lsls	r3, r2, #1
 800a91a:	461a      	mov	r2, r3
 800a91c:	460b      	mov	r3, r1
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	1a5b      	subs	r3, r3, r1
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	4413      	add	r3, r2
 800a926:	4403      	add	r3, r0
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d10f      	bne.n	800a94e <invaders_sdr+0x596>
						invader[c][l].status = OFF;
 800a92e:	486b      	ldr	r0, [pc, #428]	; (800aadc <invaders_sdr+0x724>)
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	69b9      	ldr	r1, [r7, #24]
 800a934:	461a      	mov	r2, r3
 800a936:	0052      	lsls	r2, r2, #1
 800a938:	441a      	add	r2, r3
 800a93a:	0053      	lsls	r3, r2, #1
 800a93c:	461a      	mov	r2, r3
 800a93e:	460b      	mov	r3, r1
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	1a5b      	subs	r3, r3, r1
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	4413      	add	r3, r2
 800a948:	4403      	add	r3, r0
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
					}
					if (invader[c][l].status == SHOT) {
 800a94e:	4863      	ldr	r0, [pc, #396]	; (800aadc <invaders_sdr+0x724>)
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	69b9      	ldr	r1, [r7, #24]
 800a954:	461a      	mov	r2, r3
 800a956:	0052      	lsls	r2, r2, #1
 800a958:	441a      	add	r2, r3
 800a95a:	0053      	lsls	r3, r2, #1
 800a95c:	461a      	mov	r2, r3
 800a95e:	460b      	mov	r3, r1
 800a960:	011b      	lsls	r3, r3, #4
 800a962:	1a5b      	subs	r3, r3, r1
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	4413      	add	r3, r2
 800a968:	4403      	add	r3, r0
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d137      	bne.n	800a9e0 <invaders_sdr+0x628>
						BSP_LCD_DrawBitmap(x_start+(45*c)+(x_unit_px*x_steps),y_start+(50*l)+(y_unit_px*y_steps),invader_dstroy);
 800a970:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	4613      	mov	r3, r2
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	4413      	add	r3, r2
 800a97c:	011a      	lsls	r2, r3, #4
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	18ca      	adds	r2, r1, r3
 800a982:	2306      	movs	r3, #6
 800a984:	4619      	mov	r1, r3
 800a986:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 800a98a:	fb03 f301 	mul.w	r3, r3, r1
 800a98e:	4413      	add	r3, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2132      	movs	r1, #50	; 0x32
 800a99a:	fb01 f303 	mul.w	r3, r1, r3
 800a99e:	441a      	add	r2, r3
 800a9a0:	2314      	movs	r3, #20
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800a9a8:	fb03 f301 	mul.w	r3, r3, r1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	4a4c      	ldr	r2, [pc, #304]	; (800aae0 <invaders_sdr+0x728>)
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f7f6 fae1 	bl	8000f78 <BSP_LCD_DrawBitmap>
						invader[c][l].status = DESTROYED;
 800a9b6:	4849      	ldr	r0, [pc, #292]	; (800aadc <invaders_sdr+0x724>)
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	69b9      	ldr	r1, [r7, #24]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	0052      	lsls	r2, r2, #1
 800a9c0:	441a      	add	r2, r3
 800a9c2:	0053      	lsls	r3, r2, #1
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	1a5b      	subs	r3, r3, r1
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	4413      	add	r3, r2
 800a9d0:	4403      	add	r3, r0
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	701a      	strb	r2, [r3, #0]
						ctr_shot++;
 800a9d6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9da:	3301      	adds	r3, #1
 800a9dc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					}
					if (ctr_shot == 55) {
 800a9e0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9e4:	2b37      	cmp	r3, #55	; 0x37
 800a9e6:	d102      	bne.n	800a9ee <invaders_sdr+0x636>
						flag_endgame = false;
 800a9e8:	4b3e      	ldr	r3, [pc, #248]	; (800aae4 <invaders_sdr+0x72c>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
					}
					if (invader[c][l].status == LIVE) {
 800a9ee:	483b      	ldr	r0, [pc, #236]	; (800aadc <invaders_sdr+0x724>)
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	69b9      	ldr	r1, [r7, #24]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	0052      	lsls	r2, r2, #1
 800a9f8:	441a      	add	r2, r3
 800a9fa:	0053      	lsls	r3, r2, #1
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	460b      	mov	r3, r1
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	1a5b      	subs	r3, r3, r1
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	4413      	add	r3, r2
 800aa08:	4403      	add	r3, r0
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d115      	bne.n	800aa3c <invaders_sdr+0x684>
						if (invader[c][l].y >= 430) {
 800aa10:	4832      	ldr	r0, [pc, #200]	; (800aadc <invaders_sdr+0x724>)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	69b9      	ldr	r1, [r7, #24]
 800aa16:	461a      	mov	r2, r3
 800aa18:	0052      	lsls	r2, r2, #1
 800aa1a:	441a      	add	r2, r3
 800aa1c:	0053      	lsls	r3, r2, #1
 800aa1e:	461a      	mov	r2, r3
 800aa20:	460b      	mov	r3, r1
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	1a5b      	subs	r3, r3, r1
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	4403      	add	r3, r0
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800aa34:	d302      	bcc.n	800aa3c <invaders_sdr+0x684>
							flag_endgame = false;
 800aa36:	4b2b      	ldr	r3, [pc, #172]	; (800aae4 <invaders_sdr+0x72c>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	701a      	strb	r2, [r3, #0]
				for (int l = 0; l < 5; l++) {
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	f77f af61 	ble.w	800a90c <invaders_sdr+0x554>
			for (int c = 0; c < 11; c++) {
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	61bb      	str	r3, [r7, #24]
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b0a      	cmp	r3, #10
 800aa54:	f77f af4a 	ble.w	800a8ec <invaders_sdr+0x534>
						}
					}
				}
			}
			if(ctr_shot == 6) {
 800aa58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa5c:	2b06      	cmp	r3, #6
 800aa5e:	d102      	bne.n	800aa66 <invaders_sdr+0x6ae>
				xCycleFrequency = 700;
 800aa60:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot == 12) {
 800aa66:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa6a:	2b0c      	cmp	r3, #12
 800aa6c:	d102      	bne.n	800aa74 <invaders_sdr+0x6bc>
				xCycleFrequency = 600;
 800aa6e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800aa72:	637b      	str	r3, [r7, #52]	; 0x34
			}

			if(ctr_shot == 18) {
 800aa74:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa78:	2b12      	cmp	r3, #18
 800aa7a:	d102      	bne.n	800aa82 <invaders_sdr+0x6ca>
				xCycleFrequency = 500;
 800aa7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot == 24) {
 800aa82:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa86:	2b18      	cmp	r3, #24
 800aa88:	d102      	bne.n	800aa90 <invaders_sdr+0x6d8>
				xCycleFrequency = 400;
 800aa8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aa8e:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot == 30) {
 800aa90:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa94:	2b1e      	cmp	r3, #30
 800aa96:	d102      	bne.n	800aa9e <invaders_sdr+0x6e6>
				xCycleFrequency = 300;
 800aa98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot == 36) {
 800aa9e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aaa2:	2b24      	cmp	r3, #36	; 0x24
 800aaa4:	d101      	bne.n	800aaaa <invaders_sdr+0x6f2>
				xCycleFrequency = 200;
 800aaa6:	23c8      	movs	r3, #200	; 0xc8
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot == 42) {
 800aaaa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aaae:	2b2a      	cmp	r3, #42	; 0x2a
 800aab0:	d101      	bne.n	800aab6 <invaders_sdr+0x6fe>
				xCycleFrequency = 100;
 800aab2:	2364      	movs	r3, #100	; 0x64
 800aab4:	637b      	str	r3, [r7, #52]	; 0x34
			}

			if(ctr_shot == 48) {
 800aab6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aaba:	2b30      	cmp	r3, #48	; 0x30
 800aabc:	d101      	bne.n	800aac2 <invaders_sdr+0x70a>
				xCycleFrequency = 50;
 800aabe:	2332      	movs	r3, #50	; 0x32
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(ctr_shot >= 54) {
 800aac2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aac6:	2b35      	cmp	r3, #53	; 0x35
 800aac8:	d901      	bls.n	800aace <invaders_sdr+0x716>
				xCycleFrequency = 25;
 800aaca:	2319      	movs	r3, #25
 800aacc:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 800aace:	f107 030c 	add.w	r3, r7, #12
 800aad2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fd fa1d 	bl	8007f14 <vTaskDelayUntil>
		if (flag_endgame == true) {
 800aada:	e4b3      	b.n	800a444 <invaders_sdr+0x8c>
 800aadc:	200080dc 	.word	0x200080dc
 800aae0:	20002500 	.word	0x20002500
 800aae4:	2000406a 	.word	0x2000406a

0800aae8 <send_slave_UART>:
	}
}

void send_slave_UART(void * parameters) { /* Enviar Joystick Slave para ARM Master */
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 200; i++) {
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	e007      	b.n	800ab06 <send_slave_UART+0x1e>
		data2send[i] = ' ';
 800aaf6:	4a25      	ldr	r2, [pc, #148]	; (800ab8c <send_slave_UART+0xa4>)
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
 800aafc:	2220      	movs	r2, #32
 800aafe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 200; i++) {
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	3301      	adds	r3, #1
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2bc7      	cmp	r3, #199	; 0xc7
 800ab0a:	ddf4      	ble.n	800aaf6 <send_slave_UART+0xe>
	}
	portTickType xNextWakeTime;

	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 800ab0c:	2314      	movs	r3, #20
 800ab0e:	613b      	str	r3, [r7, #16]
	xNextWakeTime = xTaskGetTickCount ();
 800ab10:	f7fd fbac 	bl	800826c <xTaskGetTickCount>
 800ab14:	4603      	mov	r3, r0
 800ab16:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit_DMA(&huart6, data2send, 200);
 800ab18:	22c8      	movs	r2, #200	; 0xc8
 800ab1a:	491c      	ldr	r1, [pc, #112]	; (800ab8c <send_slave_UART+0xa4>)
 800ab1c:	481c      	ldr	r0, [pc, #112]	; (800ab90 <send_slave_UART+0xa8>)
 800ab1e:	f7fb fbe7 	bl	80062f0 <HAL_UART_Transmit_DMA>
	for (;;){

		if (flag_half_tx_DMA == true) {
 800ab22:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <send_slave_UART+0xac>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d012      	beq.n	800ab50 <send_slave_UART+0x68>
			flag_half_tx_DMA = false;
 800ab2a:	4b1a      	ldr	r3, [pc, #104]	; (800ab94 <send_slave_UART+0xac>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	701a      	strb	r2, [r3, #0]
			data2send[0] = 'x';
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <send_slave_UART+0xa4>)
 800ab32:	2278      	movs	r2, #120	; 0x78
 800ab34:	701a      	strb	r2, [r3, #0]
			data2send[1] = x_master;
 800ab36:	4b18      	ldr	r3, [pc, #96]	; (800ab98 <send_slave_UART+0xb0>)
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <send_slave_UART+0xa4>)
 800ab3e:	705a      	strb	r2, [r3, #1]
			data2send[2] = 'y';
 800ab40:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <send_slave_UART+0xa4>)
 800ab42:	2279      	movs	r2, #121	; 0x79
 800ab44:	709a      	strb	r2, [r3, #2]
			data2send[3] = y_master;
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <send_slave_UART+0xb4>)
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <send_slave_UART+0xa4>)
 800ab4e:	70da      	strb	r2, [r3, #3]

		}

		if (flag_tx_DMA == true) {
 800ab50:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <send_slave_UART+0xb8>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d012      	beq.n	800ab7e <send_slave_UART+0x96>
			flag_tx_DMA = false;
 800ab58:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <send_slave_UART+0xb8>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]

			data2send[4] = 'x';
 800ab5e:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <send_slave_UART+0xa4>)
 800ab60:	2278      	movs	r2, #120	; 0x78
 800ab62:	711a      	strb	r2, [r3, #4]
			data2send[5] = x_laser;
 800ab64:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <send_slave_UART+0xbc>)
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <send_slave_UART+0xa4>)
 800ab6c:	715a      	strb	r2, [r3, #5]


			data2send[6] = 'y';
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <send_slave_UART+0xa4>)
 800ab70:	2279      	movs	r2, #121	; 0x79
 800ab72:	719a      	strb	r2, [r3, #6]
			data2send[7] = y_laser;
 800ab74:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <send_slave_UART+0xc0>)
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <send_slave_UART+0xa4>)
 800ab7c:	71da      	strb	r2, [r3, #7]
		}
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 800ab7e:	f107 030c 	add.w	r3, r7, #12
 800ab82:	6939      	ldr	r1, [r7, #16]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fd f9c5 	bl	8007f14 <vTaskDelayUntil>
		if (flag_half_tx_DMA == true) {
 800ab8a:	e7ca      	b.n	800ab22 <send_slave_UART+0x3a>
 800ab8c:	20008350 	.word	0x20008350
 800ab90:	200085b8 	.word	0x200085b8
 800ab94:	20007f81 	.word	0x20007f81
 800ab98:	2000406c 	.word	0x2000406c
 800ab9c:	2000406e 	.word	0x2000406e
 800aba0:	20007f80 	.word	0x20007f80
 800aba4:	2000854e 	.word	0x2000854e
 800aba8:	2000854c 	.word	0x2000854c

0800abac <receive_slave_joystick_UART>:
	}
}

void receive_slave_joystick_UART(void * parameters) { /* Receber X de Joystick de ARM Slave*/ //
 800abac:	b580      	push	{r7, lr}
 800abae:	b08a      	sub	sp, #40	; 0x28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	Joystick joystick_x;
	joystick_x.id = X_AXIS;
 800abb4:	2300      	movs	r3, #0
 800abb6:	753b      	strb	r3, [r7, #20]
	Joystick joystick_a;
	joystick_a.id = A_BUTTON;
 800abb8:	2301      	movs	r3, #1
 800abba:	743b      	strb	r3, [r7, #16]

	portTickType xNextWakeTime;
	const portTickType xTicksToWait = 0 / portTICK_RATE_MS;
 800abbc:	2300      	movs	r3, #0
 800abbe:	61fb      	str	r3, [r7, #28]
	const portTickType xCycleFrequency = 20 / portTICK_RATE_MS;
 800abc0:	2314      	movs	r3, #20
 800abc2:	61bb      	str	r3, [r7, #24]
	xNextWakeTime = xTaskGetTickCount ();
 800abc4:	f7fd fb52 	bl	800826c <xTaskGetTickCount>
 800abc8:	4603      	mov	r3, r0
 800abca:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 800abcc:	2300      	movs	r3, #0
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
 800abd0:	e007      	b.n	800abe2 <receive_slave_joystick_UART+0x36>
		data2receive[i] = '0';
 800abd2:	4a2b      	ldr	r2, [pc, #172]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	4413      	add	r3, r2
 800abd8:	2230      	movs	r2, #48	; 0x30
 800abda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800abdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abde:	3301      	adds	r3, #1
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	ddf4      	ble.n	800abd2 <receive_slave_joystick_UART+0x26>
	}
	HAL_UART_Receive_DMA(&huart6, data2receive, 4);
 800abe8:	2204      	movs	r2, #4
 800abea:	4925      	ldr	r1, [pc, #148]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800abec:	4825      	ldr	r0, [pc, #148]	; (800ac84 <receive_slave_joystick_UART+0xd8>)
 800abee:	f7fb fbfb 	bl	80063e8 <HAL_UART_Receive_DMA>
//						}
//					}
//				}


		if (flag_rx_DMA == true) {
 800abf2:	4b25      	ldr	r3, [pc, #148]	; (800ac88 <receive_slave_joystick_UART+0xdc>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d03a      	beq.n	800ac70 <receive_slave_joystick_UART+0xc4>
			flag_rx_DMA = false;
 800abfa:	4b23      	ldr	r3, [pc, #140]	; (800ac88 <receive_slave_joystick_UART+0xdc>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart6, data2receive, 4);
 800ac00:	2204      	movs	r2, #4
 800ac02:	491f      	ldr	r1, [pc, #124]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800ac04:	481f      	ldr	r0, [pc, #124]	; (800ac84 <receive_slave_joystick_UART+0xd8>)
 800ac06:	f7fb fbef 	bl	80063e8 <HAL_UART_Receive_DMA>
			for (int i = 0; i < 4; i++) {
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	623b      	str	r3, [r7, #32]
 800ac0e:	e02c      	b.n	800ac6a <receive_slave_joystick_UART+0xbe>
				if (data2receive[i] == 'a') {
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	4413      	add	r3, r2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b61      	cmp	r3, #97	; 0x61
 800ac1a:	d10c      	bne.n	800ac36 <receive_slave_joystick_UART+0x8a>
					joystick_a.val = data2receive[i+1];
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	4a17      	ldr	r2, [pc, #92]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800ac22:	5cd3      	ldrb	r3, [r2, r3]
 800ac24:	747b      	strb	r3, [r7, #17]

					xQueueSendToBack(xQueue_joy_slave, &joystick_a, xTicksToWait);
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <receive_slave_joystick_UART+0xe0>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f107 0110 	add.w	r1, r7, #16
 800ac2e:	2300      	movs	r3, #0
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	f7fc fd4f 	bl	80076d4 <xQueueGenericSend>
				}
				if (data2receive[i] == 'x') {
 800ac36:	4a12      	ldr	r2, [pc, #72]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b78      	cmp	r3, #120	; 0x78
 800ac40:	d110      	bne.n	800ac64 <receive_slave_joystick_UART+0xb8>
					if (i == 3) {
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d105      	bne.n	800ac54 <receive_slave_joystick_UART+0xa8>

					joystick_x.val = data2receive[i];
 800ac48:	4a0d      	ldr	r2, [pc, #52]	; (800ac80 <receive_slave_joystick_UART+0xd4>)
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	757b      	strb	r3, [r7, #21]
 800ac52:	e007      	b.n	800ac64 <receive_slave_joystick_UART+0xb8>
					}
					else {
					xQueueSendToBack(xQueue_joy_slave, &joystick_x, xTicksToWait);
 800ac54:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <receive_slave_joystick_UART+0xe0>)
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	f107 0114 	add.w	r1, r7, #20
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	f7fc fd38 	bl	80076d4 <xQueueGenericSend>
			for (int i = 0; i < 4; i++) {
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	3301      	adds	r3, #1
 800ac68:	623b      	str	r3, [r7, #32]
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	ddcf      	ble.n	800ac10 <receive_slave_joystick_UART+0x64>
				}

			}
			}
		}
		vTaskDelayUntil(&xNextWakeTime, xCycleFrequency);
 800ac70:	f107 030c 	add.w	r3, r7, #12
 800ac74:	69b9      	ldr	r1, [r7, #24]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fd f94c 	bl	8007f14 <vTaskDelayUntil>
		if (flag_rx_DMA == true) {
 800ac7c:	e7b9      	b.n	800abf2 <receive_slave_joystick_UART+0x46>
 800ac7e:	bf00      	nop
 800ac80:	2000841c 	.word	0x2000841c
 800ac84:	200085b8 	.word	0x200085b8
 800ac88:	20007f82 	.word	0x20007f82
 800ac8c:	200084e4 	.word	0x200084e4

0800ac90 <DMA1_Stream6_IRQHandler>:

}


void DMA1_Stream6_IRQHandler(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ac94:	4802      	ldr	r0, [pc, #8]	; (800aca0 <DMA1_Stream6_IRQHandler+0x10>)
 800ac96:	f7f7 f809 	bl	8001cac <HAL_DMA_IRQHandler>
}
 800ac9a:	bf00      	nop
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	200084e8 	.word	0x200084e8

0800aca4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a06      	ldr	r2, [pc, #24]	; (800acc8 <HAL_UART_TxCpltCallback+0x24>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d102      	bne.n	800acba <HAL_UART_TxCpltCallback+0x16>
		flag_tx_DMA = true;
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <HAL_UART_TxCpltCallback+0x28>)
 800acb6:	2201      	movs	r2, #1
 800acb8:	701a      	strb	r2, [r3, #0]
	}
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	200085b8 	.word	0x200085b8
 800accc:	20007f80 	.word	0x20007f80

0800acd0 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a06      	ldr	r2, [pc, #24]	; (800acf4 <HAL_UART_TxHalfCpltCallback+0x24>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d102      	bne.n	800ace6 <HAL_UART_TxHalfCpltCallback+0x16>
		flag_half_tx_DMA = true;
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <HAL_UART_TxHalfCpltCallback+0x28>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
	}
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	200085b8 	.word	0x200085b8
 800acf8:	20007f81 	.word	0x20007f81

0800acfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a06      	ldr	r2, [pc, #24]	; (800ad20 <HAL_UART_RxCpltCallback+0x24>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d102      	bne.n	800ad12 <HAL_UART_RxCpltCallback+0x16>
		flag_rx_DMA = true;
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <HAL_UART_RxCpltCallback+0x28>)
 800ad0e:	2201      	movs	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
	}
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200085b8 	.word	0x200085b8
 800ad24:	20007f82 	.word	0x20007f82

0800ad28 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a06      	ldr	r2, [pc, #24]	; (800ad4c <HAL_UART_RxHalfCpltCallback+0x24>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d102      	bne.n	800ad3e <HAL_UART_RxHalfCpltCallback+0x16>
		flag_half_rx_DMA = true;
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <HAL_UART_RxHalfCpltCallback+0x28>)
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	701a      	strb	r2, [r3, #0]
	}
}
 800ad3e:	bf00      	nop
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	200085b8 	.word	0x200085b8
 800ad50:	20007f83 	.word	0x20007f83

0800ad54 <StartIdleTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f7fc fb2d 	bl	80073bc <osDelay>
 800ad62:	e7fb      	b.n	800ad5c <StartIdleTask+0x8>

0800ad64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a04      	ldr	r2, [pc, #16]	; (800ad84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d101      	bne.n	800ad7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ad76:	f7f6 fce7 	bl	8001748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	40001400 	.word	0x40001400

0800ad88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	BSP_LED_On(LED2);
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f7f5 fe5d 	bl	8000a4c <BSP_LED_On>
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad9e:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <HAL_MspInit+0x4c>)
 800ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada2:	4a10      	ldr	r2, [pc, #64]	; (800ade4 <HAL_MspInit+0x4c>)
 800ada4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ada8:	6413      	str	r3, [r2, #64]	; 0x40
 800adaa:	4b0e      	ldr	r3, [pc, #56]	; (800ade4 <HAL_MspInit+0x4c>)
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adb6:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <HAL_MspInit+0x4c>)
 800adb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adba:	4a0a      	ldr	r2, [pc, #40]	; (800ade4 <HAL_MspInit+0x4c>)
 800adbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adc0:	6453      	str	r3, [r2, #68]	; 0x44
 800adc2:	4b08      	ldr	r3, [pc, #32]	; (800ade4 <HAL_MspInit+0x4c>)
 800adc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800adce:	2200      	movs	r2, #0
 800add0:	210f      	movs	r1, #15
 800add2:	f06f 0001 	mvn.w	r0, #1
 800add6:	f7f6 fdb1 	bl	800193c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40023800 	.word	0x40023800

0800ade8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a0a      	ldr	r2, [pc, #40]	; (800ae20 <HAL_DMA2D_MspInit+0x38>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d10b      	bne.n	800ae12 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800adfa:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <HAL_DMA2D_MspInit+0x3c>)
 800adfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfe:	4a09      	ldr	r2, [pc, #36]	; (800ae24 <HAL_DMA2D_MspInit+0x3c>)
 800ae00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae04:	6313      	str	r3, [r2, #48]	; 0x30
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <HAL_DMA2D_MspInit+0x3c>)
 800ae08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	4002b000 	.word	0x4002b000
 800ae24:	40023800 	.word	0x40023800

0800ae28 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	; 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	605a      	str	r2, [r3, #4]
 800ae3a:	609a      	str	r2, [r3, #8]
 800ae3c:	60da      	str	r2, [r3, #12]
 800ae3e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a17      	ldr	r2, [pc, #92]	; (800aea4 <HAL_DSI_MspInit+0x7c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d127      	bne.n	800ae9a <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800ae4a:	4b17      	ldr	r3, [pc, #92]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae54:	6453      	str	r3, [r2, #68]	; 0x44
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ae62:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae66:	4a10      	ldr	r2, [pc, #64]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae6e:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <HAL_DSI_MspInit+0x80>)
 800ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ae7a:	2304      	movs	r3, #4
 800ae7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae7e:	2302      	movs	r3, #2
 800ae80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae86:	2300      	movs	r3, #0
 800ae88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800ae8a:	230d      	movs	r3, #13
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ae8e:	f107 0314 	add.w	r3, r7, #20
 800ae92:	4619      	mov	r1, r3
 800ae94:	4805      	ldr	r0, [pc, #20]	; (800aeac <HAL_DSI_MspInit+0x84>)
 800ae96:	f7f8 fc89 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800ae9a:	bf00      	nop
 800ae9c:	3728      	adds	r7, #40	; 0x28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	40016c00 	.word	0x40016c00
 800aea8:	40023800 	.word	0x40023800
 800aeac:	40022400 	.word	0x40022400

0800aeb0 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a08      	ldr	r2, [pc, #32]	; (800aee0 <HAL_DSI_MspDeInit+0x30>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d109      	bne.n	800aed6 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800aec2:	4b08      	ldr	r3, [pc, #32]	; (800aee4 <HAL_DSI_MspDeInit+0x34>)
 800aec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec6:	4a07      	ldr	r2, [pc, #28]	; (800aee4 <HAL_DSI_MspDeInit+0x34>)
 800aec8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800aecc:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800aece:	2104      	movs	r1, #4
 800aed0:	4805      	ldr	r0, [pc, #20]	; (800aee8 <HAL_DSI_MspDeInit+0x38>)
 800aed2:	f7f8 fe15 	bl	8003b00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40016c00 	.word	0x40016c00
 800aee4:	40023800 	.word	0x40023800
 800aee8:	40022400 	.word	0x40022400

0800aeec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a0a      	ldr	r2, [pc, #40]	; (800af24 <HAL_LTDC_MspInit+0x38>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d10b      	bne.n	800af16 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800aefe:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <HAL_LTDC_MspInit+0x3c>)
 800af00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <HAL_LTDC_MspInit+0x3c>)
 800af04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af08:	6453      	str	r3, [r2, #68]	; 0x44
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <HAL_LTDC_MspInit+0x3c>)
 800af0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800af16:	bf00      	nop
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40016800 	.word	0x40016800
 800af28:	40023800 	.word	0x40023800

0800af2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	; 0x28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	605a      	str	r2, [r3, #4]
 800af3e:	609a      	str	r2, [r3, #8]
 800af40:	60da      	str	r2, [r3, #12]
 800af42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a26      	ldr	r2, [pc, #152]	; (800afe4 <HAL_SPI_MspInit+0xb8>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d145      	bne.n	800afda <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	4a25      	ldr	r2, [pc, #148]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af58:	6413      	str	r3, [r2, #64]	; 0x40
 800af5a:	4b23      	ldr	r3, [pc, #140]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af66:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6a:	4a1f      	ldr	r2, [pc, #124]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	6313      	str	r3, [r2, #48]	; 0x30
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af7e:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af82:	4a19      	ldr	r2, [pc, #100]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af84:	f043 0302 	orr.w	r3, r3, #2
 800af88:	6313      	str	r3, [r2, #48]	; 0x30
 800af8a:	4b17      	ldr	r3, [pc, #92]	; (800afe8 <HAL_SPI_MspInit+0xbc>)
 800af8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	60bb      	str	r3, [r7, #8]
 800af94:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800af96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af9c:	2302      	movs	r3, #2
 800af9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afa4:	2303      	movs	r3, #3
 800afa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800afa8:	2305      	movs	r3, #5
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	4619      	mov	r1, r3
 800afb2:	480e      	ldr	r0, [pc, #56]	; (800afec <HAL_SPI_MspInit+0xc0>)
 800afb4:	f7f8 fbfa 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800afb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800afbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afbe:	2302      	movs	r3, #2
 800afc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc6:	2303      	movs	r3, #3
 800afc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800afca:	2305      	movs	r3, #5
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afce:	f107 0314 	add.w	r3, r7, #20
 800afd2:	4619      	mov	r1, r3
 800afd4:	4806      	ldr	r0, [pc, #24]	; (800aff0 <HAL_SPI_MspInit+0xc4>)
 800afd6:	f7f8 fbe9 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800afda:	bf00      	nop
 800afdc:	3728      	adds	r7, #40	; 0x28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	40003800 	.word	0x40003800
 800afe8:	40023800 	.word	0x40023800
 800afec:	40020000 	.word	0x40020000
 800aff0:	40020400 	.word	0x40020400

0800aff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800affc:	f107 0314 	add.w	r3, r7, #20
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	605a      	str	r2, [r3, #4]
 800b006:	609a      	str	r2, [r3, #8]
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a4a      	ldr	r2, [pc, #296]	; (800b13c <HAL_UART_MspInit+0x148>)
 800b012:	4293      	cmp	r3, r2
 800b014:	f040 808e 	bne.w	800b134 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800b018:	4b49      	ldr	r3, [pc, #292]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01c:	4a48      	ldr	r2, [pc, #288]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b01e:	f043 0320 	orr.w	r3, r3, #32
 800b022:	6453      	str	r3, [r2, #68]	; 0x44
 800b024:	4b46      	ldr	r3, [pc, #280]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b028:	f003 0320 	and.w	r3, r3, #32
 800b02c:	613b      	str	r3, [r7, #16]
 800b02e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b030:	4b43      	ldr	r3, [pc, #268]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b034:	4a42      	ldr	r2, [pc, #264]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b036:	f043 0304 	orr.w	r3, r3, #4
 800b03a:	6313      	str	r3, [r2, #48]	; 0x30
 800b03c:	4b40      	ldr	r3, [pc, #256]	; (800b140 <HAL_UART_MspInit+0x14c>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800b048:	23c0      	movs	r3, #192	; 0xc0
 800b04a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b04c:	2302      	movs	r3, #2
 800b04e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b050:	2300      	movs	r3, #0
 800b052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b054:	2303      	movs	r3, #3
 800b056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b058:	2308      	movs	r3, #8
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b05c:	f107 0314 	add.w	r3, r7, #20
 800b060:	4619      	mov	r1, r3
 800b062:	4838      	ldr	r0, [pc, #224]	; (800b144 <HAL_UART_MspInit+0x150>)
 800b064:	f7f8 fba2 	bl	80037ac <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800b068:	4b37      	ldr	r3, [pc, #220]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b06a:	4a38      	ldr	r2, [pc, #224]	; (800b14c <HAL_UART_MspInit+0x158>)
 800b06c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800b06e:	4b36      	ldr	r3, [pc, #216]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b070:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b074:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b076:	4b34      	ldr	r3, [pc, #208]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b078:	2200      	movs	r2, #0
 800b07a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b07c:	4b32      	ldr	r3, [pc, #200]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b07e:	2200      	movs	r2, #0
 800b080:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b082:	4b31      	ldr	r3, [pc, #196]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b088:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b08a:	4b2f      	ldr	r3, [pc, #188]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b090:	4b2d      	ldr	r3, [pc, #180]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b092:	2200      	movs	r2, #0
 800b094:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800b096:	4b2c      	ldr	r3, [pc, #176]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b09c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b09e:	4b2a      	ldr	r3, [pc, #168]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b0a4:	4b28      	ldr	r3, [pc, #160]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800b0aa:	4827      	ldr	r0, [pc, #156]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b0ac:	f7f6 fc70 	bl	8001990 <HAL_DMA_Init>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800b0b6:	f7ff fe67 	bl	800ad88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a22      	ldr	r2, [pc, #136]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b0be:	66da      	str	r2, [r3, #108]	; 0x6c
 800b0c0:	4a21      	ldr	r2, [pc, #132]	; (800b148 <HAL_UART_MspInit+0x154>)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800b0c6:	4b22      	ldr	r3, [pc, #136]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0c8:	4a22      	ldr	r2, [pc, #136]	; (800b154 <HAL_UART_MspInit+0x160>)
 800b0ca:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800b0cc:	4b20      	ldr	r3, [pc, #128]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b0d2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0d4:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0d6:	2240      	movs	r2, #64	; 0x40
 800b0d8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0da:	4b1d      	ldr	r3, [pc, #116]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b0e0:	4b1b      	ldr	r3, [pc, #108]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0e6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0e8:	4b19      	ldr	r3, [pc, #100]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0ee:	4b18      	ldr	r3, [pc, #96]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800b0f4:	4b16      	ldr	r3, [pc, #88]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b0fc:	4b14      	ldr	r3, [pc, #80]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b104:	2200      	movs	r2, #0
 800b106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800b108:	4811      	ldr	r0, [pc, #68]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b10a:	f7f6 fc41 	bl	8001990 <HAL_DMA_Init>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800b114:	f7ff fe38 	bl	800ad88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a0d      	ldr	r2, [pc, #52]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b11c:	669a      	str	r2, [r3, #104]	; 0x68
 800b11e:	4a0c      	ldr	r2, [pc, #48]	; (800b150 <HAL_UART_MspInit+0x15c>)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800b124:	2200      	movs	r2, #0
 800b126:	2105      	movs	r1, #5
 800b128:	2047      	movs	r0, #71	; 0x47
 800b12a:	f7f6 fc07 	bl	800193c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800b12e:	2047      	movs	r0, #71	; 0x47
 800b130:	f7f6 fc20 	bl	8001974 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800b134:	bf00      	nop
 800b136:	3728      	adds	r7, #40	; 0x28
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	40011400 	.word	0x40011400
 800b140:	40023800 	.word	0x40023800
 800b144:	40020800 	.word	0x40020800
 800b148:	20008228 	.word	0x20008228
 800b14c:	40026428 	.word	0x40026428
 800b150:	200084e8 	.word	0x200084e8
 800b154:	400264a0 	.word	0x400264a0

0800b158 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b15e:	1d3b      	adds	r3, r7, #4
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	609a      	str	r2, [r3, #8]
 800b168:	60da      	str	r2, [r3, #12]
 800b16a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b16c:	4b43      	ldr	r3, [pc, #268]	; (800b27c <HAL_FMC_MspInit+0x124>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d17e      	bne.n	800b272 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800b174:	4b41      	ldr	r3, [pc, #260]	; (800b27c <HAL_FMC_MspInit+0x124>)
 800b176:	2201      	movs	r2, #1
 800b178:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b17a:	4b41      	ldr	r3, [pc, #260]	; (800b280 <HAL_FMC_MspInit+0x128>)
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	4a40      	ldr	r2, [pc, #256]	; (800b280 <HAL_FMC_MspInit+0x128>)
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	6393      	str	r3, [r2, #56]	; 0x38
 800b186:	4b3e      	ldr	r3, [pc, #248]	; (800b280 <HAL_FMC_MspInit+0x128>)
 800b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800b192:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b196:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b198:	2302      	movs	r3, #2
 800b19a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b1a8:	1d3b      	adds	r3, r7, #4
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4835      	ldr	r0, [pc, #212]	; (800b284 <HAL_FMC_MspInit+0x12c>)
 800b1ae:	f7f8 fafd 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b1b2:	2360      	movs	r3, #96	; 0x60
 800b1b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1c6:	1d3b      	adds	r3, r7, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	482f      	ldr	r0, [pc, #188]	; (800b288 <HAL_FMC_MspInit+0x130>)
 800b1cc:	f7f8 faee 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800b1d0:	f248 1337 	movw	r3, #33079	; 0x8137
 800b1d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b1e6:	1d3b      	adds	r3, r7, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4828      	ldr	r0, [pc, #160]	; (800b28c <HAL_FMC_MspInit+0x134>)
 800b1ec:	f7f8 fade 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800b1f0:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b1f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1fe:	2303      	movs	r3, #3
 800b200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b202:	230c      	movs	r3, #12
 800b204:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b206:	1d3b      	adds	r3, r7, #4
 800b208:	4619      	mov	r1, r3
 800b20a:	4821      	ldr	r0, [pc, #132]	; (800b290 <HAL_FMC_MspInit+0x138>)
 800b20c:	f7f8 face 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800b210:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800b214:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b216:	2302      	movs	r3, #2
 800b218:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b21e:	2303      	movs	r3, #3
 800b220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b222:	230c      	movs	r3, #12
 800b224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b226:	1d3b      	adds	r3, r7, #4
 800b228:	4619      	mov	r1, r3
 800b22a:	481a      	ldr	r0, [pc, #104]	; (800b294 <HAL_FMC_MspInit+0x13c>)
 800b22c:	f7f8 fabe 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b230:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b234:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b236:	2302      	movs	r3, #2
 800b238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b23e:	2303      	movs	r3, #3
 800b240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b242:	230c      	movs	r3, #12
 800b244:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b246:	1d3b      	adds	r3, r7, #4
 800b248:	4619      	mov	r1, r3
 800b24a:	4813      	ldr	r0, [pc, #76]	; (800b298 <HAL_FMC_MspInit+0x140>)
 800b24c:	f7f8 faae 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800b250:	f64f 7320 	movw	r3, #65312	; 0xff20
 800b254:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b256:	2302      	movs	r3, #2
 800b258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b25e:	2303      	movs	r3, #3
 800b260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b262:	230c      	movs	r3, #12
 800b264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b266:	1d3b      	adds	r3, r7, #4
 800b268:	4619      	mov	r1, r3
 800b26a:	480c      	ldr	r0, [pc, #48]	; (800b29c <HAL_FMC_MspInit+0x144>)
 800b26c:	f7f8 fa9e 	bl	80037ac <HAL_GPIO_Init>
 800b270:	e000      	b.n	800b274 <HAL_FMC_MspInit+0x11c>
    return;
 800b272:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20007f84 	.word	0x20007f84
 800b280:	40023800 	.word	0x40023800
 800b284:	40021000 	.word	0x40021000
 800b288:	40020400 	.word	0x40020400
 800b28c:	40021800 	.word	0x40021800
 800b290:	40020c00 	.word	0x40020c00
 800b294:	40022000 	.word	0x40022000
 800b298:	40021400 	.word	0x40021400
 800b29c:	40021c00 	.word	0x40021c00

0800b2a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b2a8:	f7ff ff56 	bl	800b158 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08c      	sub	sp, #48	; 0x30
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	2037      	movs	r0, #55	; 0x37
 800b2ca:	f7f6 fb37 	bl	800193c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 800b2ce:	2037      	movs	r0, #55	; 0x37
 800b2d0:	f7f6 fb50 	bl	8001974 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <HAL_InitTick+0xa0>)
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	4a1e      	ldr	r2, [pc, #120]	; (800b354 <HAL_InitTick+0xa0>)
 800b2da:	f043 0320 	orr.w	r3, r3, #32
 800b2de:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e0:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <HAL_InitTick+0xa0>)
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b2ec:	f107 0210 	add.w	r2, r7, #16
 800b2f0:	f107 0314 	add.w	r3, r7, #20
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7f9 fcae 	bl	8004c58 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b2fc:	f7f9 fc84 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 800b300:	4603      	mov	r3, r0
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	4a13      	ldr	r2, [pc, #76]	; (800b358 <HAL_InitTick+0xa4>)
 800b30a:	fba2 2303 	umull	r2, r3, r2, r3
 800b30e:	0c9b      	lsrs	r3, r3, #18
 800b310:	3b01      	subs	r3, #1
 800b312:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800b314:	4b11      	ldr	r3, [pc, #68]	; (800b35c <HAL_InitTick+0xa8>)
 800b316:	4a12      	ldr	r2, [pc, #72]	; (800b360 <HAL_InitTick+0xac>)
 800b318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800b31a:	4b10      	ldr	r3, [pc, #64]	; (800b35c <HAL_InitTick+0xa8>)
 800b31c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b320:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800b322:	4a0e      	ldr	r2, [pc, #56]	; (800b35c <HAL_InitTick+0xa8>)
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800b328:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <HAL_InitTick+0xa8>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b32e:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <HAL_InitTick+0xa8>)
 800b330:	2200      	movs	r2, #0
 800b332:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800b334:	4809      	ldr	r0, [pc, #36]	; (800b35c <HAL_InitTick+0xa8>)
 800b336:	f7fa fd28 	bl	8005d8a <HAL_TIM_Base_Init>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800b340:	4806      	ldr	r0, [pc, #24]	; (800b35c <HAL_InitTick+0xa8>)
 800b342:	f7fa fd57 	bl	8005df4 <HAL_TIM_Base_Start_IT>
 800b346:	4603      	mov	r3, r0
 800b348:	e000      	b.n	800b34c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3730      	adds	r7, #48	; 0x30
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	40023800 	.word	0x40023800
 800b358:	431bde83 	.word	0x431bde83
 800b35c:	20008728 	.word	0x20008728
 800b360:	40001400 	.word	0x40001400

0800b364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b368:	bf00      	nop
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b372:	b480      	push	{r7}
 800b374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b376:	e7fe      	b.n	800b376 <HardFault_Handler+0x4>

0800b378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b37c:	e7fe      	b.n	800b37c <MemManage_Handler+0x4>

0800b37e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b37e:	b480      	push	{r7}
 800b380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b382:	e7fe      	b.n	800b382 <BusFault_Handler+0x4>

0800b384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b388:	e7fe      	b.n	800b388 <UsageFault_Handler+0x4>

0800b38a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b38a:	b480      	push	{r7}
 800b38c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b38e:	bf00      	nop
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b39c:	4802      	ldr	r0, [pc, #8]	; (800b3a8 <TIM7_IRQHandler+0x10>)
 800b39e:	f7fa fd53 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20008728 	.word	0x20008728

0800b3ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800b3b0:	4802      	ldr	r0, [pc, #8]	; (800b3bc <DMA2_Stream1_IRQHandler+0x10>)
 800b3b2:	f7f6 fc7b 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b3b6:	bf00      	nop
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20008228 	.word	0x20008228

0800b3c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800b3c4:	4802      	ldr	r0, [pc, #8]	; (800b3d0 <DMA2_Stream6_IRQHandler+0x10>)
 800b3c6:	f7f6 fc71 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200084e8 	.word	0x200084e8

0800b3d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800b3d8:	4802      	ldr	r0, [pc, #8]	; (800b3e4 <USART6_IRQHandler+0x10>)
 800b3da:	f7fb f889 	bl	80064f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200085b8 	.word	0x200085b8

0800b3e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3ec:	4b15      	ldr	r3, [pc, #84]	; (800b444 <SystemInit+0x5c>)
 800b3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f2:	4a14      	ldr	r2, [pc, #80]	; (800b444 <SystemInit+0x5c>)
 800b3f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <SystemInit+0x60>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a11      	ldr	r2, [pc, #68]	; (800b448 <SystemInit+0x60>)
 800b402:	f043 0301 	orr.w	r3, r3, #1
 800b406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b408:	4b0f      	ldr	r3, [pc, #60]	; (800b448 <SystemInit+0x60>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b40e:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <SystemInit+0x60>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	490d      	ldr	r1, [pc, #52]	; (800b448 <SystemInit+0x60>)
 800b414:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <SystemInit+0x64>)
 800b416:	4013      	ands	r3, r2
 800b418:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b41a:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <SystemInit+0x60>)
 800b41c:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <SystemInit+0x68>)
 800b41e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <SystemInit+0x60>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a08      	ldr	r2, [pc, #32]	; (800b448 <SystemInit+0x60>)
 800b426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b42a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <SystemInit+0x60>)
 800b42e:	2200      	movs	r2, #0
 800b430:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b432:	4b04      	ldr	r3, [pc, #16]	; (800b444 <SystemInit+0x5c>)
 800b434:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b438:	609a      	str	r2, [r3, #8]
#endif
}
 800b43a:	bf00      	nop
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	e000ed00 	.word	0xe000ed00
 800b448:	40023800 	.word	0x40023800
 800b44c:	fef6ffff 	.word	0xfef6ffff
 800b450:	24003010 	.word	0x24003010

0800b454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b48c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b45a:	e003      	b.n	800b464 <LoopCopyDataInit>

0800b45c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b45e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b462:	3104      	adds	r1, #4

0800b464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b464:	480b      	ldr	r0, [pc, #44]	; (800b494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b46a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b46c:	d3f6      	bcc.n	800b45c <CopyDataInit>
  ldr  r2, =_sbss
 800b46e:	4a0b      	ldr	r2, [pc, #44]	; (800b49c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b470:	e002      	b.n	800b478 <LoopFillZerobss>

0800b472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b474:	f842 3b04 	str.w	r3, [r2], #4

0800b478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b478:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b47a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b47c:	d3f9      	bcc.n	800b472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b47e:	f7ff ffb3 	bl	800b3e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b482:	f000 f811 	bl	800b4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b486:	f7fd ff17 	bl	80092b8 <main>
  bx  lr    
 800b48a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b48c:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800b490:	0800d2d0 	.word	0x0800d2d0
  ldr  r0, =_sdata
 800b494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b498:	20004074 	.word	0x20004074
  ldr  r2, =_sbss
 800b49c:	20004074 	.word	0x20004074
  ldr  r3, = _ebss
 800b4a0:	20008768 	.word	0x20008768

0800b4a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4a4:	e7fe      	b.n	800b4a4 <ADC_IRQHandler>
	...

0800b4a8 <__libc_init_array>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	4e0d      	ldr	r6, [pc, #52]	; (800b4e0 <__libc_init_array+0x38>)
 800b4ac:	4c0d      	ldr	r4, [pc, #52]	; (800b4e4 <__libc_init_array+0x3c>)
 800b4ae:	1ba4      	subs	r4, r4, r6
 800b4b0:	10a4      	asrs	r4, r4, #2
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	42a5      	cmp	r5, r4
 800b4b6:	d109      	bne.n	800b4cc <__libc_init_array+0x24>
 800b4b8:	4e0b      	ldr	r6, [pc, #44]	; (800b4e8 <__libc_init_array+0x40>)
 800b4ba:	4c0c      	ldr	r4, [pc, #48]	; (800b4ec <__libc_init_array+0x44>)
 800b4bc:	f000 f82c 	bl	800b518 <_init>
 800b4c0:	1ba4      	subs	r4, r4, r6
 800b4c2:	10a4      	asrs	r4, r4, #2
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	42a5      	cmp	r5, r4
 800b4c8:	d105      	bne.n	800b4d6 <__libc_init_array+0x2e>
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4d0:	4798      	blx	r3
 800b4d2:	3501      	adds	r5, #1
 800b4d4:	e7ee      	b.n	800b4b4 <__libc_init_array+0xc>
 800b4d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4da:	4798      	blx	r3
 800b4dc:	3501      	adds	r5, #1
 800b4de:	e7f2      	b.n	800b4c6 <__libc_init_array+0x1e>
 800b4e0:	0800d2c8 	.word	0x0800d2c8
 800b4e4:	0800d2c8 	.word	0x0800d2c8
 800b4e8:	0800d2c8 	.word	0x0800d2c8
 800b4ec:	0800d2cc 	.word	0x0800d2cc

0800b4f0 <memcpy>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	1e43      	subs	r3, r0, #1
 800b4f4:	440a      	add	r2, r1
 800b4f6:	4291      	cmp	r1, r2
 800b4f8:	d100      	bne.n	800b4fc <memcpy+0xc>
 800b4fa:	bd10      	pop	{r4, pc}
 800b4fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b500:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b504:	e7f7      	b.n	800b4f6 <memcpy+0x6>

0800b506 <memset>:
 800b506:	4402      	add	r2, r0
 800b508:	4603      	mov	r3, r0
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d100      	bne.n	800b510 <memset+0xa>
 800b50e:	4770      	bx	lr
 800b510:	f803 1b01 	strb.w	r1, [r3], #1
 800b514:	e7f9      	b.n	800b50a <memset+0x4>
	...

0800b518 <_init>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr

0800b524 <_fini>:
 800b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b526:	bf00      	nop
 800b528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52a:	bc08      	pop	{r3}
 800b52c:	469e      	mov	lr, r3
 800b52e:	4770      	bx	lr
